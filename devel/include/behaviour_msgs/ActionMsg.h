// Generated by gencpp from file behaviour_msgs/ActionMsg.msg
// DO NOT EDIT!


#ifndef BEHAVIOUR_MSGS_MESSAGE_ACTIONMSG_H
#define BEHAVIOUR_MSGS_MESSAGE_ACTIONMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace behaviour_msgs
{
template <class ContainerAllocator>
struct ActionMsg_
{
  typedef ActionMsg_<ContainerAllocator> Type;

  ActionMsg_()
    : ball_tracking(false)
    , center_ball(false)
    , align_body(false)
    , walk(false)
    , kick(false)
    , defend(0)
    , squat(false)
    , goal_tracking(false)  {
    }
  ActionMsg_(const ContainerAllocator& _alloc)
    : ball_tracking(false)
    , center_ball(false)
    , align_body(false)
    , walk(false)
    , kick(false)
    , defend(0)
    , squat(false)
    , goal_tracking(false)  {
  (void)_alloc;
    }



   typedef uint8_t _ball_tracking_type;
  _ball_tracking_type ball_tracking;

   typedef uint8_t _center_ball_type;
  _center_ball_type center_ball;

   typedef uint8_t _align_body_type;
  _align_body_type align_body;

   typedef uint8_t _walk_type;
  _walk_type walk;

   typedef uint8_t _kick_type;
  _kick_type kick;

   typedef int32_t _defend_type;
  _defend_type defend;

   typedef uint8_t _squat_type;
  _squat_type squat;

   typedef uint8_t _goal_tracking_type;
  _goal_tracking_type goal_tracking;





  typedef boost::shared_ptr< ::behaviour_msgs::ActionMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::behaviour_msgs::ActionMsg_<ContainerAllocator> const> ConstPtr;

}; // struct ActionMsg_

typedef ::behaviour_msgs::ActionMsg_<std::allocator<void> > ActionMsg;

typedef boost::shared_ptr< ::behaviour_msgs::ActionMsg > ActionMsgPtr;
typedef boost::shared_ptr< ::behaviour_msgs::ActionMsg const> ActionMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::behaviour_msgs::ActionMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::behaviour_msgs::ActionMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::behaviour_msgs::ActionMsg_<ContainerAllocator1> & lhs, const ::behaviour_msgs::ActionMsg_<ContainerAllocator2> & rhs)
{
  return lhs.ball_tracking == rhs.ball_tracking &&
    lhs.center_ball == rhs.center_ball &&
    lhs.align_body == rhs.align_body &&
    lhs.walk == rhs.walk &&
    lhs.kick == rhs.kick &&
    lhs.defend == rhs.defend &&
    lhs.squat == rhs.squat &&
    lhs.goal_tracking == rhs.goal_tracking;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::behaviour_msgs::ActionMsg_<ContainerAllocator1> & lhs, const ::behaviour_msgs::ActionMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace behaviour_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::behaviour_msgs::ActionMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::behaviour_msgs::ActionMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::behaviour_msgs::ActionMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::behaviour_msgs::ActionMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::behaviour_msgs::ActionMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::behaviour_msgs::ActionMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::behaviour_msgs::ActionMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2f6660362f84530fb73c09c0b8fc889f";
  }

  static const char* value(const ::behaviour_msgs::ActionMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2f6660362f84530fULL;
  static const uint64_t static_value2 = 0xb73c09c0b8fc889fULL;
};

template<class ContainerAllocator>
struct DataType< ::behaviour_msgs::ActionMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "behaviour_msgs/ActionMsg";
  }

  static const char* value(const ::behaviour_msgs::ActionMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::behaviour_msgs::ActionMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"bool ball_tracking\n"
"bool center_ball\n"
"bool align_body\n"
"bool walk\n"
"bool kick\n"
"int32 defend\n"
"bool squat\n"
"bool goal_tracking\n"
;
  }

  static const char* value(const ::behaviour_msgs::ActionMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::behaviour_msgs::ActionMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ball_tracking);
      stream.next(m.center_ball);
      stream.next(m.align_body);
      stream.next(m.walk);
      stream.next(m.kick);
      stream.next(m.defend);
      stream.next(m.squat);
      stream.next(m.goal_tracking);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ActionMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::behaviour_msgs::ActionMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::behaviour_msgs::ActionMsg_<ContainerAllocator>& v)
  {
    s << indent << "ball_tracking: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ball_tracking);
    s << indent << "center_ball: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.center_ball);
    s << indent << "align_body: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.align_body);
    s << indent << "walk: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.walk);
    s << indent << "kick: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.kick);
    s << indent << "defend: ";
    Printer<int32_t>::stream(s, indent + "  ", v.defend);
    s << indent << "squat: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.squat);
    s << indent << "goal_tracking: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.goal_tracking);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BEHAVIOUR_MSGS_MESSAGE_ACTIONMSG_H
