// Generated by gencpp from file behaviour_msgs/GameControllerTeamMsg.msg
// DO NOT EDIT!


#ifndef BEHAVIOUR_MSGS_MESSAGE_GAMECONTROLLERTEAMMSG_H
#define BEHAVIOUR_MSGS_MESSAGE_GAMECONTROLLERTEAMMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <behaviour_msgs/GameControllerPlayerMsg.h>

namespace behaviour_msgs
{
template <class ContainerAllocator>
struct GameControllerTeamMsg_
{
  typedef GameControllerTeamMsg_<ContainerAllocator> Type;

  GameControllerTeamMsg_()
    : teamNumber(0)
    , teamColour(0)
    , players()  {
    }
  GameControllerTeamMsg_(const ContainerAllocator& _alloc)
    : teamNumber(0)
    , teamColour(0)
    , players(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _teamNumber_type;
  _teamNumber_type teamNumber;

   typedef uint8_t _teamColour_type;
  _teamColour_type teamColour;

   typedef std::vector< ::behaviour_msgs::GameControllerPlayerMsg_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::behaviour_msgs::GameControllerPlayerMsg_<ContainerAllocator> >::other >  _players_type;
  _players_type players;





  typedef boost::shared_ptr< ::behaviour_msgs::GameControllerTeamMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::behaviour_msgs::GameControllerTeamMsg_<ContainerAllocator> const> ConstPtr;

}; // struct GameControllerTeamMsg_

typedef ::behaviour_msgs::GameControllerTeamMsg_<std::allocator<void> > GameControllerTeamMsg;

typedef boost::shared_ptr< ::behaviour_msgs::GameControllerTeamMsg > GameControllerTeamMsgPtr;
typedef boost::shared_ptr< ::behaviour_msgs::GameControllerTeamMsg const> GameControllerTeamMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::behaviour_msgs::GameControllerTeamMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::behaviour_msgs::GameControllerTeamMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::behaviour_msgs::GameControllerTeamMsg_<ContainerAllocator1> & lhs, const ::behaviour_msgs::GameControllerTeamMsg_<ContainerAllocator2> & rhs)
{
  return lhs.teamNumber == rhs.teamNumber &&
    lhs.teamColour == rhs.teamColour &&
    lhs.players == rhs.players;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::behaviour_msgs::GameControllerTeamMsg_<ContainerAllocator1> & lhs, const ::behaviour_msgs::GameControllerTeamMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace behaviour_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::behaviour_msgs::GameControllerTeamMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::behaviour_msgs::GameControllerTeamMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::behaviour_msgs::GameControllerTeamMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::behaviour_msgs::GameControllerTeamMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::behaviour_msgs::GameControllerTeamMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::behaviour_msgs::GameControllerTeamMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::behaviour_msgs::GameControllerTeamMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "eb0242679c00f249e2e638f89df925ef";
  }

  static const char* value(const ::behaviour_msgs::GameControllerTeamMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xeb0242679c00f249ULL;
  static const uint64_t static_value2 = 0xe2e638f89df925efULL;
};

template<class ContainerAllocator>
struct DataType< ::behaviour_msgs::GameControllerTeamMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "behaviour_msgs/GameControllerTeamMsg";
  }

  static const char* value(const ::behaviour_msgs::GameControllerTeamMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::behaviour_msgs::GameControllerTeamMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 teamNumber\n"
"uint8 teamColour\n"
"GameControllerPlayerMsg[] players\n"
"================================================================================\n"
"MSG: behaviour_msgs/GameControllerPlayerMsg\n"
"uint8 penalty\n"
"uint8 secsTillUnpenalised\n"
;
  }

  static const char* value(const ::behaviour_msgs::GameControllerTeamMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::behaviour_msgs::GameControllerTeamMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.teamNumber);
      stream.next(m.teamColour);
      stream.next(m.players);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GameControllerTeamMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::behaviour_msgs::GameControllerTeamMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::behaviour_msgs::GameControllerTeamMsg_<ContainerAllocator>& v)
  {
    s << indent << "teamNumber: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.teamNumber);
    s << indent << "teamColour: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.teamColour);
    s << indent << "players[]" << std::endl;
    for (size_t i = 0; i < v.players.size(); ++i)
    {
      s << indent << "  players[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::behaviour_msgs::GameControllerPlayerMsg_<ContainerAllocator> >::stream(s, indent + "    ", v.players[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // BEHAVIOUR_MSGS_MESSAGE_GAMECONTROLLERTEAMMSG_H
