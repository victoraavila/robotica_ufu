// Generated by gencpp from file dynamixel_workbench_msgs/JointCommandRequest.msg
// DO NOT EDIT!


#ifndef DYNAMIXEL_WORKBENCH_MSGS_MESSAGE_JOINTCOMMANDREQUEST_H
#define DYNAMIXEL_WORKBENCH_MSGS_MESSAGE_JOINTCOMMANDREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dynamixel_workbench_msgs
{
template <class ContainerAllocator>
struct JointCommandRequest_
{
  typedef JointCommandRequest_<ContainerAllocator> Type;

  JointCommandRequest_()
    : unit()
    , pan_pos(0.0)
    , tilt_pos(0.0)  {
    }
  JointCommandRequest_(const ContainerAllocator& _alloc)
    : unit(_alloc)
    , pan_pos(0.0)
    , tilt_pos(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _unit_type;
  _unit_type unit;

   typedef float _pan_pos_type;
  _pan_pos_type pan_pos;

   typedef float _tilt_pos_type;
  _tilt_pos_type tilt_pos;





  typedef boost::shared_ptr< ::dynamixel_workbench_msgs::JointCommandRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dynamixel_workbench_msgs::JointCommandRequest_<ContainerAllocator> const> ConstPtr;

}; // struct JointCommandRequest_

typedef ::dynamixel_workbench_msgs::JointCommandRequest_<std::allocator<void> > JointCommandRequest;

typedef boost::shared_ptr< ::dynamixel_workbench_msgs::JointCommandRequest > JointCommandRequestPtr;
typedef boost::shared_ptr< ::dynamixel_workbench_msgs::JointCommandRequest const> JointCommandRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dynamixel_workbench_msgs::JointCommandRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dynamixel_workbench_msgs::JointCommandRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dynamixel_workbench_msgs::JointCommandRequest_<ContainerAllocator1> & lhs, const ::dynamixel_workbench_msgs::JointCommandRequest_<ContainerAllocator2> & rhs)
{
  return lhs.unit == rhs.unit &&
    lhs.pan_pos == rhs.pan_pos &&
    lhs.tilt_pos == rhs.tilt_pos;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dynamixel_workbench_msgs::JointCommandRequest_<ContainerAllocator1> & lhs, const ::dynamixel_workbench_msgs::JointCommandRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dynamixel_workbench_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::dynamixel_workbench_msgs::JointCommandRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dynamixel_workbench_msgs::JointCommandRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dynamixel_workbench_msgs::JointCommandRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dynamixel_workbench_msgs::JointCommandRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dynamixel_workbench_msgs::JointCommandRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dynamixel_workbench_msgs::JointCommandRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dynamixel_workbench_msgs::JointCommandRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c27f3d329dca1827fd6d3958865f8e67";
  }

  static const char* value(const ::dynamixel_workbench_msgs::JointCommandRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc27f3d329dca1827ULL;
  static const uint64_t static_value2 = 0xfd6d3958865f8e67ULL;
};

template<class ContainerAllocator>
struct DataType< ::dynamixel_workbench_msgs::JointCommandRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dynamixel_workbench_msgs/JointCommandRequest";
  }

  static const char* value(const ::dynamixel_workbench_msgs::JointCommandRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dynamixel_workbench_msgs::JointCommandRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This message is used to send position command to dynamixel\n"
"\n"
"string unit\n"
"float32 pan_pos\n"
"float32 tilt_pos\n"
;
  }

  static const char* value(const ::dynamixel_workbench_msgs::JointCommandRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dynamixel_workbench_msgs::JointCommandRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.unit);
      stream.next(m.pan_pos);
      stream.next(m.tilt_pos);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct JointCommandRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dynamixel_workbench_msgs::JointCommandRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dynamixel_workbench_msgs::JointCommandRequest_<ContainerAllocator>& v)
  {
    s << indent << "unit: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.unit);
    s << indent << "pan_pos: ";
    Printer<float>::stream(s, indent + "  ", v.pan_pos);
    s << indent << "tilt_pos: ";
    Printer<float>::stream(s, indent + "  ", v.tilt_pos);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DYNAMIXEL_WORKBENCH_MSGS_MESSAGE_JOINTCOMMANDREQUEST_H
