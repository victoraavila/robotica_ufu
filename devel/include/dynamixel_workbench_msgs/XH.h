// Generated by gencpp from file dynamixel_workbench_msgs/XH.msg
// DO NOT EDIT!


#ifndef DYNAMIXEL_WORKBENCH_MSGS_MESSAGE_XH_H
#define DYNAMIXEL_WORKBENCH_MSGS_MESSAGE_XH_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dynamixel_workbench_msgs
{
template <class ContainerAllocator>
struct XH_
{
  typedef XH_<ContainerAllocator> Type;

  XH_()
    : model_number(0)
    , version_of_firmware(0)
    , id(0)
    , baud_rate(0)
    , return_delay_time(0)
    , drive_mode(0)
    , operating_mode(0)
    , secondary_id(0)
    , protocol_version(0)
    , homing_offset(0)
    , moving_threshold(0)
    , temperature_limit(0)
    , max_voltage_limit(0)
    , min_voltage_limit(0)
    , pwm_limit(0)
    , current_limit(0)
    , acceleration_limit(0)
    , velocity_limit(0)
    , max_position_limit(0)
    , min_position_limit(0)
    , shutdown(0)
    , torque_enable(0)
    , led(0)
    , status_return_level(0)
    , registered_instruction(0)
    , hardware_error_status(0)
    , velocity_i_gain(0)
    , velocity_p_gain(0)
    , position_d_gain(0)
    , position_i_gain(0)
    , position_p_gain(0)
    , feedforward_2nd_gain(0)
    , feedforward_1st_gain(0)
    , bus_watchdog(0)
    , goal_pwm(0)
    , goal_current(0)
    , goal_velocity(0)
    , profile_acceleration(0)
    , profile_velocity(0)
    , goal_position(0)
    , realtime_tick(0)
    , moving(0)
    , moving_status(0)
    , present_pwm(0)
    , present_current(0)
    , present_velocity(0)
    , present_position(0)
    , velocity_trajectory(0)
    , position_trajectory(0)
    , present_input_voltage(0)
    , present_temperature(0)  {
    }
  XH_(const ContainerAllocator& _alloc)
    : model_number(0)
    , version_of_firmware(0)
    , id(0)
    , baud_rate(0)
    , return_delay_time(0)
    , drive_mode(0)
    , operating_mode(0)
    , secondary_id(0)
    , protocol_version(0)
    , homing_offset(0)
    , moving_threshold(0)
    , temperature_limit(0)
    , max_voltage_limit(0)
    , min_voltage_limit(0)
    , pwm_limit(0)
    , current_limit(0)
    , acceleration_limit(0)
    , velocity_limit(0)
    , max_position_limit(0)
    , min_position_limit(0)
    , shutdown(0)
    , torque_enable(0)
    , led(0)
    , status_return_level(0)
    , registered_instruction(0)
    , hardware_error_status(0)
    , velocity_i_gain(0)
    , velocity_p_gain(0)
    , position_d_gain(0)
    , position_i_gain(0)
    , position_p_gain(0)
    , feedforward_2nd_gain(0)
    , feedforward_1st_gain(0)
    , bus_watchdog(0)
    , goal_pwm(0)
    , goal_current(0)
    , goal_velocity(0)
    , profile_acceleration(0)
    , profile_velocity(0)
    , goal_position(0)
    , realtime_tick(0)
    , moving(0)
    , moving_status(0)
    , present_pwm(0)
    , present_current(0)
    , present_velocity(0)
    , present_position(0)
    , velocity_trajectory(0)
    , position_trajectory(0)
    , present_input_voltage(0)
    , present_temperature(0)  {
  (void)_alloc;
    }



   typedef uint16_t _model_number_type;
  _model_number_type model_number;

   typedef uint8_t _version_of_firmware_type;
  _version_of_firmware_type version_of_firmware;

   typedef uint8_t _id_type;
  _id_type id;

   typedef uint8_t _baud_rate_type;
  _baud_rate_type baud_rate;

   typedef uint8_t _return_delay_time_type;
  _return_delay_time_type return_delay_time;

   typedef uint8_t _drive_mode_type;
  _drive_mode_type drive_mode;

   typedef uint8_t _operating_mode_type;
  _operating_mode_type operating_mode;

   typedef uint8_t _secondary_id_type;
  _secondary_id_type secondary_id;

   typedef uint8_t _protocol_version_type;
  _protocol_version_type protocol_version;

   typedef int32_t _homing_offset_type;
  _homing_offset_type homing_offset;

   typedef uint32_t _moving_threshold_type;
  _moving_threshold_type moving_threshold;

   typedef uint8_t _temperature_limit_type;
  _temperature_limit_type temperature_limit;

   typedef uint16_t _max_voltage_limit_type;
  _max_voltage_limit_type max_voltage_limit;

   typedef uint16_t _min_voltage_limit_type;
  _min_voltage_limit_type min_voltage_limit;

   typedef uint16_t _pwm_limit_type;
  _pwm_limit_type pwm_limit;

   typedef uint16_t _current_limit_type;
  _current_limit_type current_limit;

   typedef uint32_t _acceleration_limit_type;
  _acceleration_limit_type acceleration_limit;

   typedef uint32_t _velocity_limit_type;
  _velocity_limit_type velocity_limit;

   typedef uint32_t _max_position_limit_type;
  _max_position_limit_type max_position_limit;

   typedef uint32_t _min_position_limit_type;
  _min_position_limit_type min_position_limit;

   typedef uint8_t _shutdown_type;
  _shutdown_type shutdown;

   typedef uint8_t _torque_enable_type;
  _torque_enable_type torque_enable;

   typedef uint8_t _led_type;
  _led_type led;

   typedef uint8_t _status_return_level_type;
  _status_return_level_type status_return_level;

   typedef uint8_t _registered_instruction_type;
  _registered_instruction_type registered_instruction;

   typedef uint8_t _hardware_error_status_type;
  _hardware_error_status_type hardware_error_status;

   typedef uint16_t _velocity_i_gain_type;
  _velocity_i_gain_type velocity_i_gain;

   typedef uint16_t _velocity_p_gain_type;
  _velocity_p_gain_type velocity_p_gain;

   typedef uint16_t _position_d_gain_type;
  _position_d_gain_type position_d_gain;

   typedef uint16_t _position_i_gain_type;
  _position_i_gain_type position_i_gain;

   typedef uint16_t _position_p_gain_type;
  _position_p_gain_type position_p_gain;

   typedef uint16_t _feedforward_2nd_gain_type;
  _feedforward_2nd_gain_type feedforward_2nd_gain;

   typedef uint16_t _feedforward_1st_gain_type;
  _feedforward_1st_gain_type feedforward_1st_gain;

   typedef int16_t _bus_watchdog_type;
  _bus_watchdog_type bus_watchdog;

   typedef int16_t _goal_pwm_type;
  _goal_pwm_type goal_pwm;

   typedef int16_t _goal_current_type;
  _goal_current_type goal_current;

   typedef int32_t _goal_velocity_type;
  _goal_velocity_type goal_velocity;

   typedef uint32_t _profile_acceleration_type;
  _profile_acceleration_type profile_acceleration;

   typedef uint32_t _profile_velocity_type;
  _profile_velocity_type profile_velocity;

   typedef uint32_t _goal_position_type;
  _goal_position_type goal_position;

   typedef uint16_t _realtime_tick_type;
  _realtime_tick_type realtime_tick;

   typedef uint8_t _moving_type;
  _moving_type moving;

   typedef uint8_t _moving_status_type;
  _moving_status_type moving_status;

   typedef int16_t _present_pwm_type;
  _present_pwm_type present_pwm;

   typedef int16_t _present_current_type;
  _present_current_type present_current;

   typedef int32_t _present_velocity_type;
  _present_velocity_type present_velocity;

   typedef uint32_t _present_position_type;
  _present_position_type present_position;

   typedef uint32_t _velocity_trajectory_type;
  _velocity_trajectory_type velocity_trajectory;

   typedef uint32_t _position_trajectory_type;
  _position_trajectory_type position_trajectory;

   typedef uint16_t _present_input_voltage_type;
  _present_input_voltage_type present_input_voltage;

   typedef uint8_t _present_temperature_type;
  _present_temperature_type present_temperature;





  typedef boost::shared_ptr< ::dynamixel_workbench_msgs::XH_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dynamixel_workbench_msgs::XH_<ContainerAllocator> const> ConstPtr;

}; // struct XH_

typedef ::dynamixel_workbench_msgs::XH_<std::allocator<void> > XH;

typedef boost::shared_ptr< ::dynamixel_workbench_msgs::XH > XHPtr;
typedef boost::shared_ptr< ::dynamixel_workbench_msgs::XH const> XHConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dynamixel_workbench_msgs::XH_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dynamixel_workbench_msgs::XH_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dynamixel_workbench_msgs::XH_<ContainerAllocator1> & lhs, const ::dynamixel_workbench_msgs::XH_<ContainerAllocator2> & rhs)
{
  return lhs.model_number == rhs.model_number &&
    lhs.version_of_firmware == rhs.version_of_firmware &&
    lhs.id == rhs.id &&
    lhs.baud_rate == rhs.baud_rate &&
    lhs.return_delay_time == rhs.return_delay_time &&
    lhs.drive_mode == rhs.drive_mode &&
    lhs.operating_mode == rhs.operating_mode &&
    lhs.secondary_id == rhs.secondary_id &&
    lhs.protocol_version == rhs.protocol_version &&
    lhs.homing_offset == rhs.homing_offset &&
    lhs.moving_threshold == rhs.moving_threshold &&
    lhs.temperature_limit == rhs.temperature_limit &&
    lhs.max_voltage_limit == rhs.max_voltage_limit &&
    lhs.min_voltage_limit == rhs.min_voltage_limit &&
    lhs.pwm_limit == rhs.pwm_limit &&
    lhs.current_limit == rhs.current_limit &&
    lhs.acceleration_limit == rhs.acceleration_limit &&
    lhs.velocity_limit == rhs.velocity_limit &&
    lhs.max_position_limit == rhs.max_position_limit &&
    lhs.min_position_limit == rhs.min_position_limit &&
    lhs.shutdown == rhs.shutdown &&
    lhs.torque_enable == rhs.torque_enable &&
    lhs.led == rhs.led &&
    lhs.status_return_level == rhs.status_return_level &&
    lhs.registered_instruction == rhs.registered_instruction &&
    lhs.hardware_error_status == rhs.hardware_error_status &&
    lhs.velocity_i_gain == rhs.velocity_i_gain &&
    lhs.velocity_p_gain == rhs.velocity_p_gain &&
    lhs.position_d_gain == rhs.position_d_gain &&
    lhs.position_i_gain == rhs.position_i_gain &&
    lhs.position_p_gain == rhs.position_p_gain &&
    lhs.feedforward_2nd_gain == rhs.feedforward_2nd_gain &&
    lhs.feedforward_1st_gain == rhs.feedforward_1st_gain &&
    lhs.bus_watchdog == rhs.bus_watchdog &&
    lhs.goal_pwm == rhs.goal_pwm &&
    lhs.goal_current == rhs.goal_current &&
    lhs.goal_velocity == rhs.goal_velocity &&
    lhs.profile_acceleration == rhs.profile_acceleration &&
    lhs.profile_velocity == rhs.profile_velocity &&
    lhs.goal_position == rhs.goal_position &&
    lhs.realtime_tick == rhs.realtime_tick &&
    lhs.moving == rhs.moving &&
    lhs.moving_status == rhs.moving_status &&
    lhs.present_pwm == rhs.present_pwm &&
    lhs.present_current == rhs.present_current &&
    lhs.present_velocity == rhs.present_velocity &&
    lhs.present_position == rhs.present_position &&
    lhs.velocity_trajectory == rhs.velocity_trajectory &&
    lhs.position_trajectory == rhs.position_trajectory &&
    lhs.present_input_voltage == rhs.present_input_voltage &&
    lhs.present_temperature == rhs.present_temperature;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dynamixel_workbench_msgs::XH_<ContainerAllocator1> & lhs, const ::dynamixel_workbench_msgs::XH_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dynamixel_workbench_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::dynamixel_workbench_msgs::XH_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dynamixel_workbench_msgs::XH_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dynamixel_workbench_msgs::XH_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dynamixel_workbench_msgs::XH_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dynamixel_workbench_msgs::XH_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dynamixel_workbench_msgs::XH_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dynamixel_workbench_msgs::XH_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f92d7e6a732639abbc0fbe9844400002";
  }

  static const char* value(const ::dynamixel_workbench_msgs::XH_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf92d7e6a732639abULL;
  static const uint64_t static_value2 = 0xbc0fbe9844400002ULL;
};

template<class ContainerAllocator>
struct DataType< ::dynamixel_workbench_msgs::XH_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dynamixel_workbench_msgs/XH";
  }

  static const char* value(const ::dynamixel_workbench_msgs::XH_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dynamixel_workbench_msgs::XH_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# It is Published by 'single_dynamixel_monitor' node\n"
"# It is Subscribed by 'dynamixel_workbench_single_manager_gui/qnode' node\n"
"# This message is compatible with control table of Dynamixel XH Series (XH430-W210-T/R, XH430-W350-T/R, XH430-V210, XH430-V350)\n"
"# It is linked to 'XH430_W210.device', 'XH430_W350.device', 'XH430_V210.device' and 'XH430_V350.device' in dynamixel_workbench_toolbox/dynamixel/models/XH\n"
"# If you want to specific information about control table, please follow the link (http://support.robotis.com/en/)\n"
"\n"
"uint16 model_number\n"
"uint8  version_of_firmware\n"
"uint8  id\n"
"uint8  baud_rate\n"
"uint8  return_delay_time\n"
"uint8  drive_mode\n"
"uint8  operating_mode\n"
"uint8  secondary_id\n"
"uint8  protocol_version\n"
"int32 homing_offset\n"
"uint32 moving_threshold\n"
"uint8  temperature_limit\n"
"uint16 max_voltage_limit\n"
"uint16 min_voltage_limit\n"
"uint16 pwm_limit\n"
"uint16 current_limit\n"
"uint32 acceleration_limit\n"
"uint32 velocity_limit\n"
"uint32 max_position_limit\n"
"uint32 min_position_limit\n"
"uint8  shutdown\n"
"\n"
"uint8  torque_enable\n"
"uint8  led\n"
"uint8  status_return_level\n"
"uint8  registered_instruction\n"
"uint8  hardware_error_status\n"
"uint16 velocity_i_gain\n"
"uint16 velocity_p_gain\n"
"uint16 position_d_gain\n"
"uint16 position_i_gain\n"
"uint16 position_p_gain\n"
"uint16 feedforward_2nd_gain\n"
"uint16 feedforward_1st_gain\n"
"int16  bus_watchdog\n"
"int16  goal_pwm\n"
"int16  goal_current\n"
"int32  goal_velocity\n"
"uint32 profile_acceleration\n"
"uint32 profile_velocity\n"
"uint32 goal_position\n"
"uint16 realtime_tick\n"
"uint8  moving\n"
"uint8  moving_status\n"
"int16  present_pwm\n"
"int16  present_current\n"
"int32  present_velocity\n"
"uint32 present_position\n"
"uint32 velocity_trajectory\n"
"uint32 position_trajectory\n"
"uint16 present_input_voltage\n"
"uint8  present_temperature\n"
;
  }

  static const char* value(const ::dynamixel_workbench_msgs::XH_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dynamixel_workbench_msgs::XH_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.model_number);
      stream.next(m.version_of_firmware);
      stream.next(m.id);
      stream.next(m.baud_rate);
      stream.next(m.return_delay_time);
      stream.next(m.drive_mode);
      stream.next(m.operating_mode);
      stream.next(m.secondary_id);
      stream.next(m.protocol_version);
      stream.next(m.homing_offset);
      stream.next(m.moving_threshold);
      stream.next(m.temperature_limit);
      stream.next(m.max_voltage_limit);
      stream.next(m.min_voltage_limit);
      stream.next(m.pwm_limit);
      stream.next(m.current_limit);
      stream.next(m.acceleration_limit);
      stream.next(m.velocity_limit);
      stream.next(m.max_position_limit);
      stream.next(m.min_position_limit);
      stream.next(m.shutdown);
      stream.next(m.torque_enable);
      stream.next(m.led);
      stream.next(m.status_return_level);
      stream.next(m.registered_instruction);
      stream.next(m.hardware_error_status);
      stream.next(m.velocity_i_gain);
      stream.next(m.velocity_p_gain);
      stream.next(m.position_d_gain);
      stream.next(m.position_i_gain);
      stream.next(m.position_p_gain);
      stream.next(m.feedforward_2nd_gain);
      stream.next(m.feedforward_1st_gain);
      stream.next(m.bus_watchdog);
      stream.next(m.goal_pwm);
      stream.next(m.goal_current);
      stream.next(m.goal_velocity);
      stream.next(m.profile_acceleration);
      stream.next(m.profile_velocity);
      stream.next(m.goal_position);
      stream.next(m.realtime_tick);
      stream.next(m.moving);
      stream.next(m.moving_status);
      stream.next(m.present_pwm);
      stream.next(m.present_current);
      stream.next(m.present_velocity);
      stream.next(m.present_position);
      stream.next(m.velocity_trajectory);
      stream.next(m.position_trajectory);
      stream.next(m.present_input_voltage);
      stream.next(m.present_temperature);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct XH_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dynamixel_workbench_msgs::XH_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dynamixel_workbench_msgs::XH_<ContainerAllocator>& v)
  {
    s << indent << "model_number: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.model_number);
    s << indent << "version_of_firmware: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.version_of_firmware);
    s << indent << "id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.id);
    s << indent << "baud_rate: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.baud_rate);
    s << indent << "return_delay_time: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.return_delay_time);
    s << indent << "drive_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.drive_mode);
    s << indent << "operating_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.operating_mode);
    s << indent << "secondary_id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.secondary_id);
    s << indent << "protocol_version: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.protocol_version);
    s << indent << "homing_offset: ";
    Printer<int32_t>::stream(s, indent + "  ", v.homing_offset);
    s << indent << "moving_threshold: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.moving_threshold);
    s << indent << "temperature_limit: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.temperature_limit);
    s << indent << "max_voltage_limit: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.max_voltage_limit);
    s << indent << "min_voltage_limit: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.min_voltage_limit);
    s << indent << "pwm_limit: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.pwm_limit);
    s << indent << "current_limit: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.current_limit);
    s << indent << "acceleration_limit: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.acceleration_limit);
    s << indent << "velocity_limit: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.velocity_limit);
    s << indent << "max_position_limit: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.max_position_limit);
    s << indent << "min_position_limit: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.min_position_limit);
    s << indent << "shutdown: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.shutdown);
    s << indent << "torque_enable: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.torque_enable);
    s << indent << "led: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.led);
    s << indent << "status_return_level: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.status_return_level);
    s << indent << "registered_instruction: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.registered_instruction);
    s << indent << "hardware_error_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.hardware_error_status);
    s << indent << "velocity_i_gain: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.velocity_i_gain);
    s << indent << "velocity_p_gain: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.velocity_p_gain);
    s << indent << "position_d_gain: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.position_d_gain);
    s << indent << "position_i_gain: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.position_i_gain);
    s << indent << "position_p_gain: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.position_p_gain);
    s << indent << "feedforward_2nd_gain: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.feedforward_2nd_gain);
    s << indent << "feedforward_1st_gain: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.feedforward_1st_gain);
    s << indent << "bus_watchdog: ";
    Printer<int16_t>::stream(s, indent + "  ", v.bus_watchdog);
    s << indent << "goal_pwm: ";
    Printer<int16_t>::stream(s, indent + "  ", v.goal_pwm);
    s << indent << "goal_current: ";
    Printer<int16_t>::stream(s, indent + "  ", v.goal_current);
    s << indent << "goal_velocity: ";
    Printer<int32_t>::stream(s, indent + "  ", v.goal_velocity);
    s << indent << "profile_acceleration: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.profile_acceleration);
    s << indent << "profile_velocity: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.profile_velocity);
    s << indent << "goal_position: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.goal_position);
    s << indent << "realtime_tick: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.realtime_tick);
    s << indent << "moving: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.moving);
    s << indent << "moving_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.moving_status);
    s << indent << "present_pwm: ";
    Printer<int16_t>::stream(s, indent + "  ", v.present_pwm);
    s << indent << "present_current: ";
    Printer<int16_t>::stream(s, indent + "  ", v.present_current);
    s << indent << "present_velocity: ";
    Printer<int32_t>::stream(s, indent + "  ", v.present_velocity);
    s << indent << "present_position: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.present_position);
    s << indent << "velocity_trajectory: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.velocity_trajectory);
    s << indent << "position_trajectory: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.position_trajectory);
    s << indent << "present_input_voltage: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.present_input_voltage);
    s << indent << "present_temperature: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.present_temperature);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DYNAMIXEL_WORKBENCH_MSGS_MESSAGE_XH_H
