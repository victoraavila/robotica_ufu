// Generated by gencpp from file movement_msgs/DynamixelCreatorSrvResponse.msg
// DO NOT EDIT!


#ifndef MOVEMENT_MSGS_MESSAGE_DYNAMIXELCREATORSRVRESPONSE_H
#define MOVEMENT_MSGS_MESSAGE_DYNAMIXELCREATORSRVRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace movement_msgs
{
template <class ContainerAllocator>
struct DynamixelCreatorSrvResponse_
{
  typedef DynamixelCreatorSrvResponse_<ContainerAllocator> Type;

  DynamixelCreatorSrvResponse_()
    : feedbackPosition()
    , feedbackTorque()
    , feedbackVcc()  {
      feedbackPosition.assign(0.0);

      feedbackTorque.assign(false);

      feedbackVcc.assign(0.0);
  }
  DynamixelCreatorSrvResponse_(const ContainerAllocator& _alloc)
    : feedbackPosition()
    , feedbackTorque()
    , feedbackVcc()  {
  (void)_alloc;
      feedbackPosition.assign(0.0);

      feedbackTorque.assign(false);

      feedbackVcc.assign(0.0);
  }



   typedef boost::array<double, 20>  _feedbackPosition_type;
  _feedbackPosition_type feedbackPosition;

   typedef boost::array<uint8_t, 20>  _feedbackTorque_type;
  _feedbackTorque_type feedbackTorque;

   typedef boost::array<double, 20>  _feedbackVcc_type;
  _feedbackVcc_type feedbackVcc;





  typedef boost::shared_ptr< ::movement_msgs::DynamixelCreatorSrvResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::movement_msgs::DynamixelCreatorSrvResponse_<ContainerAllocator> const> ConstPtr;

}; // struct DynamixelCreatorSrvResponse_

typedef ::movement_msgs::DynamixelCreatorSrvResponse_<std::allocator<void> > DynamixelCreatorSrvResponse;

typedef boost::shared_ptr< ::movement_msgs::DynamixelCreatorSrvResponse > DynamixelCreatorSrvResponsePtr;
typedef boost::shared_ptr< ::movement_msgs::DynamixelCreatorSrvResponse const> DynamixelCreatorSrvResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::movement_msgs::DynamixelCreatorSrvResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::movement_msgs::DynamixelCreatorSrvResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::movement_msgs::DynamixelCreatorSrvResponse_<ContainerAllocator1> & lhs, const ::movement_msgs::DynamixelCreatorSrvResponse_<ContainerAllocator2> & rhs)
{
  return lhs.feedbackPosition == rhs.feedbackPosition &&
    lhs.feedbackTorque == rhs.feedbackTorque &&
    lhs.feedbackVcc == rhs.feedbackVcc;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::movement_msgs::DynamixelCreatorSrvResponse_<ContainerAllocator1> & lhs, const ::movement_msgs::DynamixelCreatorSrvResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace movement_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::movement_msgs::DynamixelCreatorSrvResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::movement_msgs::DynamixelCreatorSrvResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::movement_msgs::DynamixelCreatorSrvResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::movement_msgs::DynamixelCreatorSrvResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::movement_msgs::DynamixelCreatorSrvResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::movement_msgs::DynamixelCreatorSrvResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::movement_msgs::DynamixelCreatorSrvResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8223065620cdc5ef775559d5daa46c26";
  }

  static const char* value(const ::movement_msgs::DynamixelCreatorSrvResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8223065620cdc5efULL;
  static const uint64_t static_value2 = 0x775559d5daa46c26ULL;
};

template<class ContainerAllocator>
struct DataType< ::movement_msgs::DynamixelCreatorSrvResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "movement_msgs/DynamixelCreatorSrvResponse";
  }

  static const char* value(const ::movement_msgs::DynamixelCreatorSrvResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::movement_msgs::DynamixelCreatorSrvResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[20] feedbackPosition\n"
"bool[20] feedbackTorque\n"
"float64[20] feedbackVcc\n"
"\n"
;
  }

  static const char* value(const ::movement_msgs::DynamixelCreatorSrvResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::movement_msgs::DynamixelCreatorSrvResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.feedbackPosition);
      stream.next(m.feedbackTorque);
      stream.next(m.feedbackVcc);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DynamixelCreatorSrvResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::movement_msgs::DynamixelCreatorSrvResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::movement_msgs::DynamixelCreatorSrvResponse_<ContainerAllocator>& v)
  {
    s << indent << "feedbackPosition[]" << std::endl;
    for (size_t i = 0; i < v.feedbackPosition.size(); ++i)
    {
      s << indent << "  feedbackPosition[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.feedbackPosition[i]);
    }
    s << indent << "feedbackTorque[]" << std::endl;
    for (size_t i = 0; i < v.feedbackTorque.size(); ++i)
    {
      s << indent << "  feedbackTorque[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.feedbackTorque[i]);
    }
    s << indent << "feedbackVcc[]" << std::endl;
    for (size_t i = 0; i < v.feedbackVcc.size(); ++i)
    {
      s << indent << "  feedbackVcc[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.feedbackVcc[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOVEMENT_MSGS_MESSAGE_DYNAMIXELCREATORSRVRESPONSE_H
