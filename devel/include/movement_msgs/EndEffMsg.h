// Generated by gencpp from file movement_msgs/EndEffMsg.msg
// DO NOT EDIT!


#ifndef MOVEMENT_MSGS_MESSAGE_ENDEFFMSG_H
#define MOVEMENT_MSGS_MESSAGE_ENDEFFMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>

namespace movement_msgs
{
template <class ContainerAllocator>
struct EndEffMsg_
{
  typedef EndEffMsg_<ContainerAllocator> Type;

  EndEffMsg_()
    : pos()
    , vel()
    , acc()
    , rot()
    , type(0)
    , flag(0)
    , dt(0.0)  {
    }
  EndEffMsg_(const ContainerAllocator& _alloc)
    : pos(_alloc)
    , vel(_alloc)
    , acc(_alloc)
    , rot(_alloc)
    , type(0)
    , flag(0)
    , dt(0.0)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _pos_type;
  _pos_type pos;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _vel_type;
  _vel_type vel;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _acc_type;
  _acc_type acc;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _rot_type;
  _rot_type rot;

   typedef int32_t _type_type;
  _type_type type;

   typedef int32_t _flag_type;
  _flag_type flag;

   typedef double _dt_type;
  _dt_type dt;





  typedef boost::shared_ptr< ::movement_msgs::EndEffMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::movement_msgs::EndEffMsg_<ContainerAllocator> const> ConstPtr;

}; // struct EndEffMsg_

typedef ::movement_msgs::EndEffMsg_<std::allocator<void> > EndEffMsg;

typedef boost::shared_ptr< ::movement_msgs::EndEffMsg > EndEffMsgPtr;
typedef boost::shared_ptr< ::movement_msgs::EndEffMsg const> EndEffMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::movement_msgs::EndEffMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::movement_msgs::EndEffMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::movement_msgs::EndEffMsg_<ContainerAllocator1> & lhs, const ::movement_msgs::EndEffMsg_<ContainerAllocator2> & rhs)
{
  return lhs.pos == rhs.pos &&
    lhs.vel == rhs.vel &&
    lhs.acc == rhs.acc &&
    lhs.rot == rhs.rot &&
    lhs.type == rhs.type &&
    lhs.flag == rhs.flag &&
    lhs.dt == rhs.dt;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::movement_msgs::EndEffMsg_<ContainerAllocator1> & lhs, const ::movement_msgs::EndEffMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace movement_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::movement_msgs::EndEffMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::movement_msgs::EndEffMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::movement_msgs::EndEffMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::movement_msgs::EndEffMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::movement_msgs::EndEffMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::movement_msgs::EndEffMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::movement_msgs::EndEffMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "25f406f2d522d107819391a084c12896";
  }

  static const char* value(const ::movement_msgs::EndEffMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x25f406f2d522d107ULL;
  static const uint64_t static_value2 = 0x819391a084c12896ULL;
};

template<class ContainerAllocator>
struct DataType< ::movement_msgs::EndEffMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "movement_msgs/EndEffMsg";
  }

  static const char* value(const ::movement_msgs::EndEffMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::movement_msgs::EndEffMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Point  pos\n"
"geometry_msgs/Point  vel\n"
"geometry_msgs/Point  acc\n"
"geometry_msgs/Point  rot\n"
"int32                type\n"
"int32                flag\n"
"float64              dt\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::movement_msgs::EndEffMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::movement_msgs::EndEffMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pos);
      stream.next(m.vel);
      stream.next(m.acc);
      stream.next(m.rot);
      stream.next(m.type);
      stream.next(m.flag);
      stream.next(m.dt);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct EndEffMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::movement_msgs::EndEffMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::movement_msgs::EndEffMsg_<ContainerAllocator>& v)
  {
    s << indent << "pos: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.pos);
    s << indent << "vel: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.vel);
    s << indent << "acc: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.acc);
    s << indent << "rot: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.rot);
    s << indent << "type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.type);
    s << indent << "flag: ";
    Printer<int32_t>::stream(s, indent + "  ", v.flag);
    s << indent << "dt: ";
    Printer<double>::stream(s, indent + "  ", v.dt);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOVEMENT_MSGS_MESSAGE_ENDEFFMSG_H
