// Generated by gencpp from file movement_msgs/HeadMoveMsg.msg
// DO NOT EDIT!


#ifndef MOVEMENT_MSGS_MESSAGE_HEADMOVEMSG_H
#define MOVEMENT_MSGS_MESSAGE_HEADMOVEMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace movement_msgs
{
template <class ContainerAllocator>
struct HeadMoveMsg_
{
  typedef HeadMoveMsg_<ContainerAllocator> Type;

  HeadMoveMsg_()
    : xMove(0)
    , yMove(0)
    , pos(0)
    , xPos(0.0)
    , yPos(0.0)  {
    }
  HeadMoveMsg_(const ContainerAllocator& _alloc)
    : xMove(0)
    , yMove(0)
    , pos(0)
    , xPos(0.0)
    , yPos(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _xMove_type;
  _xMove_type xMove;

   typedef int32_t _yMove_type;
  _yMove_type yMove;

   typedef int16_t _pos_type;
  _pos_type pos;

   typedef double _xPos_type;
  _xPos_type xPos;

   typedef double _yPos_type;
  _yPos_type yPos;





  typedef boost::shared_ptr< ::movement_msgs::HeadMoveMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::movement_msgs::HeadMoveMsg_<ContainerAllocator> const> ConstPtr;

}; // struct HeadMoveMsg_

typedef ::movement_msgs::HeadMoveMsg_<std::allocator<void> > HeadMoveMsg;

typedef boost::shared_ptr< ::movement_msgs::HeadMoveMsg > HeadMoveMsgPtr;
typedef boost::shared_ptr< ::movement_msgs::HeadMoveMsg const> HeadMoveMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::movement_msgs::HeadMoveMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::movement_msgs::HeadMoveMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::movement_msgs::HeadMoveMsg_<ContainerAllocator1> & lhs, const ::movement_msgs::HeadMoveMsg_<ContainerAllocator2> & rhs)
{
  return lhs.xMove == rhs.xMove &&
    lhs.yMove == rhs.yMove &&
    lhs.pos == rhs.pos &&
    lhs.xPos == rhs.xPos &&
    lhs.yPos == rhs.yPos;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::movement_msgs::HeadMoveMsg_<ContainerAllocator1> & lhs, const ::movement_msgs::HeadMoveMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace movement_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::movement_msgs::HeadMoveMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::movement_msgs::HeadMoveMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::movement_msgs::HeadMoveMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::movement_msgs::HeadMoveMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::movement_msgs::HeadMoveMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::movement_msgs::HeadMoveMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::movement_msgs::HeadMoveMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cfc3b4f883111d2901b09d0640ace5ea";
  }

  static const char* value(const ::movement_msgs::HeadMoveMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcfc3b4f883111d29ULL;
  static const uint64_t static_value2 = 0x01b09d0640ace5eaULL;
};

template<class ContainerAllocator>
struct DataType< ::movement_msgs::HeadMoveMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "movement_msgs/HeadMoveMsg";
  }

  static const char* value(const ::movement_msgs::HeadMoveMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::movement_msgs::HeadMoveMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32    xMove  \n"
"int32    yMove\n"
"int16	 pos\n"
"float64  xPos\n"
"float64  yPos\n"
;
  }

  static const char* value(const ::movement_msgs::HeadMoveMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::movement_msgs::HeadMoveMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.xMove);
      stream.next(m.yMove);
      stream.next(m.pos);
      stream.next(m.xPos);
      stream.next(m.yPos);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct HeadMoveMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::movement_msgs::HeadMoveMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::movement_msgs::HeadMoveMsg_<ContainerAllocator>& v)
  {
    s << indent << "xMove: ";
    Printer<int32_t>::stream(s, indent + "  ", v.xMove);
    s << indent << "yMove: ";
    Printer<int32_t>::stream(s, indent + "  ", v.yMove);
    s << indent << "pos: ";
    Printer<int16_t>::stream(s, indent + "  ", v.pos);
    s << indent << "xPos: ";
    Printer<double>::stream(s, indent + "  ", v.xPos);
    s << indent << "yPos: ";
    Printer<double>::stream(s, indent + "  ", v.yPos);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOVEMENT_MSGS_MESSAGE_HEADMOVEMSG_H
