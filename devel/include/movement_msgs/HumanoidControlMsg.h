// Generated by gencpp from file movement_msgs/HumanoidControlMsg.msg
// DO NOT EDIT!


#ifndef MOVEMENT_MSGS_MESSAGE_HUMANOIDCONTROLMSG_H
#define MOVEMENT_MSGS_MESSAGE_HUMANOIDCONTROLMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <movement_msgs/EndEffMsg.h>
#include <movement_msgs/EndEffMsg.h>

namespace movement_msgs
{
template <class ContainerAllocator>
struct HumanoidControlMsg_
{
  typedef HumanoidControlMsg_<ContainerAllocator> Type;

  HumanoidControlMsg_()
    : header()
    , ctrl_flag(false)
    , arm_ctrl_flag(false)
    , torso_ctrl_flag(false)
    , phase_ctrl_flag(false)
    , slope_ctrl_flag(false)
    , foot_ctrl_flag(false)
    , torsoAddX(0.0)
    , torsoAddY(0.0)
    , torsoAddZ(0.0)
    , slope(0.0)
    , rFootFac()
    , lFootFac()
    , phaseFac(0.0)
    , armAdd(0.0)
    , delayR(0.0)
    , delayL(0.0)
    , delayAll(0.0)  {
    }
  HumanoidControlMsg_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , ctrl_flag(false)
    , arm_ctrl_flag(false)
    , torso_ctrl_flag(false)
    , phase_ctrl_flag(false)
    , slope_ctrl_flag(false)
    , foot_ctrl_flag(false)
    , torsoAddX(0.0)
    , torsoAddY(0.0)
    , torsoAddZ(0.0)
    , slope(0.0)
    , rFootFac(_alloc)
    , lFootFac(_alloc)
    , phaseFac(0.0)
    , armAdd(0.0)
    , delayR(0.0)
    , delayL(0.0)
    , delayAll(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _ctrl_flag_type;
  _ctrl_flag_type ctrl_flag;

   typedef uint8_t _arm_ctrl_flag_type;
  _arm_ctrl_flag_type arm_ctrl_flag;

   typedef uint8_t _torso_ctrl_flag_type;
  _torso_ctrl_flag_type torso_ctrl_flag;

   typedef uint8_t _phase_ctrl_flag_type;
  _phase_ctrl_flag_type phase_ctrl_flag;

   typedef uint8_t _slope_ctrl_flag_type;
  _slope_ctrl_flag_type slope_ctrl_flag;

   typedef uint8_t _foot_ctrl_flag_type;
  _foot_ctrl_flag_type foot_ctrl_flag;

   typedef double _torsoAddX_type;
  _torsoAddX_type torsoAddX;

   typedef double _torsoAddY_type;
  _torsoAddY_type torsoAddY;

   typedef double _torsoAddZ_type;
  _torsoAddZ_type torsoAddZ;

   typedef double _slope_type;
  _slope_type slope;

   typedef  ::movement_msgs::EndEffMsg_<ContainerAllocator>  _rFootFac_type;
  _rFootFac_type rFootFac;

   typedef  ::movement_msgs::EndEffMsg_<ContainerAllocator>  _lFootFac_type;
  _lFootFac_type lFootFac;

   typedef double _phaseFac_type;
  _phaseFac_type phaseFac;

   typedef double _armAdd_type;
  _armAdd_type armAdd;

   typedef double _delayR_type;
  _delayR_type delayR;

   typedef double _delayL_type;
  _delayL_type delayL;

   typedef double _delayAll_type;
  _delayAll_type delayAll;





  typedef boost::shared_ptr< ::movement_msgs::HumanoidControlMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::movement_msgs::HumanoidControlMsg_<ContainerAllocator> const> ConstPtr;

}; // struct HumanoidControlMsg_

typedef ::movement_msgs::HumanoidControlMsg_<std::allocator<void> > HumanoidControlMsg;

typedef boost::shared_ptr< ::movement_msgs::HumanoidControlMsg > HumanoidControlMsgPtr;
typedef boost::shared_ptr< ::movement_msgs::HumanoidControlMsg const> HumanoidControlMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::movement_msgs::HumanoidControlMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::movement_msgs::HumanoidControlMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::movement_msgs::HumanoidControlMsg_<ContainerAllocator1> & lhs, const ::movement_msgs::HumanoidControlMsg_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.ctrl_flag == rhs.ctrl_flag &&
    lhs.arm_ctrl_flag == rhs.arm_ctrl_flag &&
    lhs.torso_ctrl_flag == rhs.torso_ctrl_flag &&
    lhs.phase_ctrl_flag == rhs.phase_ctrl_flag &&
    lhs.slope_ctrl_flag == rhs.slope_ctrl_flag &&
    lhs.foot_ctrl_flag == rhs.foot_ctrl_flag &&
    lhs.torsoAddX == rhs.torsoAddX &&
    lhs.torsoAddY == rhs.torsoAddY &&
    lhs.torsoAddZ == rhs.torsoAddZ &&
    lhs.slope == rhs.slope &&
    lhs.rFootFac == rhs.rFootFac &&
    lhs.lFootFac == rhs.lFootFac &&
    lhs.phaseFac == rhs.phaseFac &&
    lhs.armAdd == rhs.armAdd &&
    lhs.delayR == rhs.delayR &&
    lhs.delayL == rhs.delayL &&
    lhs.delayAll == rhs.delayAll;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::movement_msgs::HumanoidControlMsg_<ContainerAllocator1> & lhs, const ::movement_msgs::HumanoidControlMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace movement_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::movement_msgs::HumanoidControlMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::movement_msgs::HumanoidControlMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::movement_msgs::HumanoidControlMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::movement_msgs::HumanoidControlMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::movement_msgs::HumanoidControlMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::movement_msgs::HumanoidControlMsg_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::movement_msgs::HumanoidControlMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0b7c6a6b1b062af7f2563f72e33b0aab";
  }

  static const char* value(const ::movement_msgs::HumanoidControlMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0b7c6a6b1b062af7ULL;
  static const uint64_t static_value2 = 0xf2563f72e33b0aabULL;
};

template<class ContainerAllocator>
struct DataType< ::movement_msgs::HumanoidControlMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "movement_msgs/HumanoidControlMsg";
  }

  static const char* value(const ::movement_msgs::HumanoidControlMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::movement_msgs::HumanoidControlMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header  header\n"
"bool    ctrl_flag  \n"
"bool    arm_ctrl_flag\n"
"bool    torso_ctrl_flag \n"
"bool    phase_ctrl_flag \n"
"bool    slope_ctrl_flag \n"
"bool    foot_ctrl_flag \n"
"\n"
"float64 torsoAddX\n"
"float64 torsoAddY\n"
"float64 torsoAddZ\n"
"\n"
"float64 slope\n"
"\n"
"movement_msgs/EndEffMsg  rFootFac\n"
"movement_msgs/EndEffMsg  lFootFac\n"
"\n"
"float64 phaseFac\n"
"\n"
"\n"
"float64 armAdd\n"
"\n"
"\n"
"float64 delayR\n"
"float64 delayL\n"
"float64 delayAll\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: movement_msgs/EndEffMsg\n"
"geometry_msgs/Point  pos\n"
"geometry_msgs/Point  vel\n"
"geometry_msgs/Point  acc\n"
"geometry_msgs/Point  rot\n"
"int32                type\n"
"int32                flag\n"
"float64              dt\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::movement_msgs::HumanoidControlMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::movement_msgs::HumanoidControlMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.ctrl_flag);
      stream.next(m.arm_ctrl_flag);
      stream.next(m.torso_ctrl_flag);
      stream.next(m.phase_ctrl_flag);
      stream.next(m.slope_ctrl_flag);
      stream.next(m.foot_ctrl_flag);
      stream.next(m.torsoAddX);
      stream.next(m.torsoAddY);
      stream.next(m.torsoAddZ);
      stream.next(m.slope);
      stream.next(m.rFootFac);
      stream.next(m.lFootFac);
      stream.next(m.phaseFac);
      stream.next(m.armAdd);
      stream.next(m.delayR);
      stream.next(m.delayL);
      stream.next(m.delayAll);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct HumanoidControlMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::movement_msgs::HumanoidControlMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::movement_msgs::HumanoidControlMsg_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "ctrl_flag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ctrl_flag);
    s << indent << "arm_ctrl_flag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.arm_ctrl_flag);
    s << indent << "torso_ctrl_flag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.torso_ctrl_flag);
    s << indent << "phase_ctrl_flag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.phase_ctrl_flag);
    s << indent << "slope_ctrl_flag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.slope_ctrl_flag);
    s << indent << "foot_ctrl_flag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.foot_ctrl_flag);
    s << indent << "torsoAddX: ";
    Printer<double>::stream(s, indent + "  ", v.torsoAddX);
    s << indent << "torsoAddY: ";
    Printer<double>::stream(s, indent + "  ", v.torsoAddY);
    s << indent << "torsoAddZ: ";
    Printer<double>::stream(s, indent + "  ", v.torsoAddZ);
    s << indent << "slope: ";
    Printer<double>::stream(s, indent + "  ", v.slope);
    s << indent << "rFootFac: ";
    s << std::endl;
    Printer< ::movement_msgs::EndEffMsg_<ContainerAllocator> >::stream(s, indent + "  ", v.rFootFac);
    s << indent << "lFootFac: ";
    s << std::endl;
    Printer< ::movement_msgs::EndEffMsg_<ContainerAllocator> >::stream(s, indent + "  ", v.lFootFac);
    s << indent << "phaseFac: ";
    Printer<double>::stream(s, indent + "  ", v.phaseFac);
    s << indent << "armAdd: ";
    Printer<double>::stream(s, indent + "  ", v.armAdd);
    s << indent << "delayR: ";
    Printer<double>::stream(s, indent + "  ", v.delayR);
    s << indent << "delayL: ";
    Printer<double>::stream(s, indent + "  ", v.delayL);
    s << indent << "delayAll: ";
    Printer<double>::stream(s, indent + "  ", v.delayAll);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOVEMENT_MSGS_MESSAGE_HUMANOIDCONTROLMSG_H
