//#line 2 "/opt/ros/noetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"
// *********************************************************
//
// File autogenerated for the movement_msgs package
// by the dynamic_reconfigure package.
// Please do not edit.
//
// ********************************************************/

#ifndef __movement_msgs__HUMANOIDCTRLCONFIG_H__
#define __movement_msgs__HUMANOIDCTRLCONFIG_H__

#if __cplusplus >= 201103L
#define DYNAMIC_RECONFIGURE_FINAL final
#else
#define DYNAMIC_RECONFIGURE_FINAL
#endif

#include <dynamic_reconfigure/config_tools.h>
#include <limits>
#include <ros/node_handle.h>
#include <dynamic_reconfigure/ConfigDescription.h>
#include <dynamic_reconfigure/ParamDescription.h>
#include <dynamic_reconfigure/Group.h>
#include <dynamic_reconfigure/config_init_mutex.h>
#include <boost/any.hpp>

namespace movement_msgs
{
  class HumanoidCtrlConfigStatics;

  class HumanoidCtrlConfig
  {
  public:
    class AbstractParamDescription : public dynamic_reconfigure::ParamDescription
    {
    public:
      AbstractParamDescription(std::string n, std::string t, uint32_t l,
          std::string d, std::string e)
      {
        name = n;
        type = t;
        level = l;
        description = d;
        edit_method = e;
      }
      virtual ~AbstractParamDescription() = default;

      virtual void clamp(HumanoidCtrlConfig &config, const HumanoidCtrlConfig &max, const HumanoidCtrlConfig &min) const = 0;
      virtual void calcLevel(uint32_t &level, const HumanoidCtrlConfig &config1, const HumanoidCtrlConfig &config2) const = 0;
      virtual void fromServer(const ros::NodeHandle &nh, HumanoidCtrlConfig &config) const = 0;
      virtual void toServer(const ros::NodeHandle &nh, const HumanoidCtrlConfig &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, HumanoidCtrlConfig &config) const = 0;
      virtual void toMessage(dynamic_reconfigure::Config &msg, const HumanoidCtrlConfig &config) const = 0;
      virtual void getValue(const HumanoidCtrlConfig &config, boost::any &val) const = 0;
    };

    typedef boost::shared_ptr<AbstractParamDescription> AbstractParamDescriptionPtr;
    typedef boost::shared_ptr<const AbstractParamDescription> AbstractParamDescriptionConstPtr;

    // Final keyword added to class because it has virtual methods and inherits
    // from a class with a non-virtual destructor.
    template <class T>
    class ParamDescription DYNAMIC_RECONFIGURE_FINAL : public AbstractParamDescription
    {
    public:
      ParamDescription(std::string a_name, std::string a_type, uint32_t a_level,
          std::string a_description, std::string a_edit_method, T HumanoidCtrlConfig::* a_f) :
        AbstractParamDescription(a_name, a_type, a_level, a_description, a_edit_method),
        field(a_f)
      {}

      T HumanoidCtrlConfig::* field;

      virtual void clamp(HumanoidCtrlConfig &config, const HumanoidCtrlConfig &max, const HumanoidCtrlConfig &min) const override
      {
        if (config.*field > max.*field)
          config.*field = max.*field;

        if (config.*field < min.*field)
          config.*field = min.*field;
      }

      virtual void calcLevel(uint32_t &comb_level, const HumanoidCtrlConfig &config1, const HumanoidCtrlConfig &config2) const override
      {
        if (config1.*field != config2.*field)
          comb_level |= level;
      }

      virtual void fromServer(const ros::NodeHandle &nh, HumanoidCtrlConfig &config) const override
      {
        nh.getParam(name, config.*field);
      }

      virtual void toServer(const ros::NodeHandle &nh, const HumanoidCtrlConfig &config) const override
      {
        nh.setParam(name, config.*field);
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, HumanoidCtrlConfig &config) const override
      {
        return dynamic_reconfigure::ConfigTools::getParameter(msg, name, config.*field);
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const HumanoidCtrlConfig &config) const override
      {
        dynamic_reconfigure::ConfigTools::appendParameter(msg, name, config.*field);
      }

      virtual void getValue(const HumanoidCtrlConfig &config, boost::any &val) const override
      {
        val = config.*field;
      }
    };

    class AbstractGroupDescription : public dynamic_reconfigure::Group
    {
      public:
      AbstractGroupDescription(std::string n, std::string t, int p, int i, bool s)
      {
        name = n;
        type = t;
        parent = p;
        state = s;
        id = i;
      }

      virtual ~AbstractGroupDescription() = default;

      std::vector<AbstractParamDescriptionConstPtr> abstract_parameters;
      bool state;

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &config) const =0;
      virtual void updateParams(boost::any &cfg, HumanoidCtrlConfig &top) const= 0;
      virtual void setInitialState(boost::any &cfg) const = 0;


      void convertParams()
      {
        for(std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = abstract_parameters.begin(); i != abstract_parameters.end(); ++i)
        {
          parameters.push_back(dynamic_reconfigure::ParamDescription(**i));
        }
      }
    };

    typedef boost::shared_ptr<AbstractGroupDescription> AbstractGroupDescriptionPtr;
    typedef boost::shared_ptr<const AbstractGroupDescription> AbstractGroupDescriptionConstPtr;

    // Final keyword added to class because it has virtual methods and inherits
    // from a class with a non-virtual destructor.
    template<class T, class PT>
    class GroupDescription DYNAMIC_RECONFIGURE_FINAL : public AbstractGroupDescription
    {
    public:
      GroupDescription(std::string a_name, std::string a_type, int a_parent, int a_id, bool a_s, T PT::* a_f) : AbstractGroupDescription(a_name, a_type, a_parent, a_id, a_s), field(a_f)
      {
      }

      GroupDescription(const GroupDescription<T, PT>& g): AbstractGroupDescription(g.name, g.type, g.parent, g.id, g.state), field(g.field), groups(g.groups)
      {
        parameters = g.parameters;
        abstract_parameters = g.abstract_parameters;
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &cfg) const override
      {
        PT* config = boost::any_cast<PT*>(cfg);
        if(!dynamic_reconfigure::ConfigTools::getGroupState(msg, name, (*config).*field))
          return false;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          if(!(*i)->fromMessage(msg, n))
            return false;
        }

        return true;
      }

      virtual void setInitialState(boost::any &cfg) const override
      {
        PT* config = boost::any_cast<PT*>(cfg);
        T* group = &((*config).*field);
        group->state = state;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = boost::any(&((*config).*field));
          (*i)->setInitialState(n);
        }

      }

      virtual void updateParams(boost::any &cfg, HumanoidCtrlConfig &top) const override
      {
        PT* config = boost::any_cast<PT*>(cfg);

        T* f = &((*config).*field);
        f->setParams(top, abstract_parameters);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          (*i)->updateParams(n, top);
        }
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &cfg) const override
      {
        const PT config = boost::any_cast<PT>(cfg);
        dynamic_reconfigure::ConfigTools::appendGroup<T>(msg, name, id, parent, config.*field);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          (*i)->toMessage(msg, config.*field);
        }
      }

      T PT::* field;
      std::vector<HumanoidCtrlConfig::AbstractGroupDescriptionConstPtr> groups;
    };

class DEFAULT
{
  public:
    DEFAULT()
    {
      state = true;
      name = "Default";
    }

    void setParams(HumanoidCtrlConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("dt"==(*_i)->name){dt = boost::any_cast<double>(val);}
        if("kpUpperBody"==(*_i)->name){kpUpperBody = boost::any_cast<double>(val);}
        if("kpHipRoll"==(*_i)->name){kpHipRoll = boost::any_cast<double>(val);}
        if("kpHipPitch"==(*_i)->name){kpHipPitch = boost::any_cast<double>(val);}
        if("kpKneePitch"==(*_i)->name){kpKneePitch = boost::any_cast<double>(val);}
        if("kpFootPitch"==(*_i)->name){kpFootPitch = boost::any_cast<double>(val);}
        if("kpFootRoll"==(*_i)->name){kpFootRoll = boost::any_cast<double>(val);}
        if("torsoKp"==(*_i)->name){torsoKp = boost::any_cast<double>(val);}
        if("torsoKi"==(*_i)->name){torsoKi = boost::any_cast<double>(val);}
        if("torsoKd"==(*_i)->name){torsoKd = boost::any_cast<double>(val);}
        if("armKp"==(*_i)->name){armKp = boost::any_cast<double>(val);}
        if("armKi"==(*_i)->name){armKi = boost::any_cast<double>(val);}
        if("armKd"==(*_i)->name){armKd = boost::any_cast<double>(val);}
        if("phaseKp"==(*_i)->name){phaseKp = boost::any_cast<double>(val);}
        if("phaseKi"==(*_i)->name){phaseKi = boost::any_cast<double>(val);}
        if("phaseKd"==(*_i)->name){phaseKd = boost::any_cast<double>(val);}
        if("phaseRef"==(*_i)->name){phaseRef = boost::any_cast<double>(val);}
        if("phase_ctrl_flag"==(*_i)->name){phase_ctrl_flag = boost::any_cast<bool>(val);}
        if("arm_ctrl_flag"==(*_i)->name){arm_ctrl_flag = boost::any_cast<bool>(val);}
        if("torso_ctrl_flag"==(*_i)->name){torso_ctrl_flag = boost::any_cast<bool>(val);}
        if("slope_ctrl_flag"==(*_i)->name){slope_ctrl_flag = boost::any_cast<bool>(val);}
        if("foot_ctrl_flag"==(*_i)->name){foot_ctrl_flag = boost::any_cast<bool>(val);}
        if("ctrl_flag"==(*_i)->name){ctrl_flag = boost::any_cast<bool>(val);}
      }
    }

    double dt;
double kpUpperBody;
double kpHipRoll;
double kpHipPitch;
double kpKneePitch;
double kpFootPitch;
double kpFootRoll;
double torsoKp;
double torsoKi;
double torsoKd;
double armKp;
double armKi;
double armKd;
double phaseKp;
double phaseKi;
double phaseKd;
double phaseRef;
bool phase_ctrl_flag;
bool arm_ctrl_flag;
bool torso_ctrl_flag;
bool slope_ctrl_flag;
bool foot_ctrl_flag;
bool ctrl_flag;

    bool state;
    std::string name;

    
}groups;



//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double dt;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double kpUpperBody;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double kpHipRoll;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double kpHipPitch;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double kpKneePitch;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double kpFootPitch;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double kpFootRoll;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double torsoKp;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double torsoKi;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double torsoKd;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double armKp;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double armKi;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double armKd;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double phaseKp;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double phaseKi;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double phaseKd;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double phaseRef;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool phase_ctrl_flag;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool arm_ctrl_flag;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool torso_ctrl_flag;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool slope_ctrl_flag;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool foot_ctrl_flag;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool ctrl_flag;
//#line 231 "/opt/ros/noetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

    bool __fromMessage__(dynamic_reconfigure::Config &msg)
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();

      int count = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        if ((*i)->fromMessage(msg, *this))
          count++;

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i ++)
      {
        if ((*i)->id == 0)
        {
          boost::any n = boost::any(this);
          (*i)->updateParams(n, *this);
          (*i)->fromMessage(msg, n);
        }
      }

      if (count != dynamic_reconfigure::ConfigTools::size(msg))
      {
        ROS_ERROR("HumanoidCtrlConfig::__fromMessage__ called with an unexpected parameter.");
        ROS_ERROR("Booleans:");
        for (unsigned int i = 0; i < msg.bools.size(); i++)
          ROS_ERROR("  %s", msg.bools[i].name.c_str());
        ROS_ERROR("Integers:");
        for (unsigned int i = 0; i < msg.ints.size(); i++)
          ROS_ERROR("  %s", msg.ints[i].name.c_str());
        ROS_ERROR("Doubles:");
        for (unsigned int i = 0; i < msg.doubles.size(); i++)
          ROS_ERROR("  %s", msg.doubles[i].name.c_str());
        ROS_ERROR("Strings:");
        for (unsigned int i = 0; i < msg.strs.size(); i++)
          ROS_ERROR("  %s", msg.strs[i].name.c_str());
        // @todo Check that there are no duplicates. Make this error more
        // explicit.
        return false;
      }
      return true;
    }

    // This version of __toMessage__ is used during initialization of
    // statics when __getParamDescriptions__ can't be called yet.
    void __toMessage__(dynamic_reconfigure::Config &msg, const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__, const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__) const
    {
      dynamic_reconfigure::ConfigTools::clear(msg);
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toMessage(msg, *this);

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        if((*i)->id == 0)
        {
          (*i)->toMessage(msg, *this);
        }
      }
    }

    void __toMessage__(dynamic_reconfigure::Config &msg) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      __toMessage__(msg, __param_descriptions__, __group_descriptions__);
    }

    void __toServer__(const ros::NodeHandle &nh) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toServer(nh, *this);
    }

    void __fromServer__(const ros::NodeHandle &nh)
    {
      static bool setup=false;

      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->fromServer(nh, *this);

      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i++){
        if (!setup && (*i)->id == 0) {
          setup = true;
          boost::any n = boost::any(this);
          (*i)->setInitialState(n);
        }
      }
    }

    void __clamp__()
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const HumanoidCtrlConfig &__max__ = __getMax__();
      const HumanoidCtrlConfig &__min__ = __getMin__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->clamp(*this, __max__, __min__);
    }

    uint32_t __level__(const HumanoidCtrlConfig &config) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      uint32_t level = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->calcLevel(level, config, *this);
      return level;
    }

    static const dynamic_reconfigure::ConfigDescription &__getDescriptionMessage__();
    static const HumanoidCtrlConfig &__getDefault__();
    static const HumanoidCtrlConfig &__getMax__();
    static const HumanoidCtrlConfig &__getMin__();
    static const std::vector<AbstractParamDescriptionConstPtr> &__getParamDescriptions__();
    static const std::vector<AbstractGroupDescriptionConstPtr> &__getGroupDescriptions__();

  private:
    static const HumanoidCtrlConfigStatics *__get_statics__();
  };

  template <> // Max and min are ignored for strings.
  inline void HumanoidCtrlConfig::ParamDescription<std::string>::clamp(HumanoidCtrlConfig &config, const HumanoidCtrlConfig &max, const HumanoidCtrlConfig &min) const
  {
    (void) config;
    (void) min;
    (void) max;
    return;
  }

  class HumanoidCtrlConfigStatics
  {
    friend class HumanoidCtrlConfig;

    HumanoidCtrlConfigStatics()
    {
HumanoidCtrlConfig::GroupDescription<HumanoidCtrlConfig::DEFAULT, HumanoidCtrlConfig> Default("Default", "", 0, 0, true, &HumanoidCtrlConfig::groups);
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.dt = 0.001;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.dt = 0.5;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.dt = 0.07;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(HumanoidCtrlConfig::AbstractParamDescriptionConstPtr(new HumanoidCtrlConfig::ParamDescription<double>("dt", "double", 0, "DT", "", &HumanoidCtrlConfig::dt)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(HumanoidCtrlConfig::AbstractParamDescriptionConstPtr(new HumanoidCtrlConfig::ParamDescription<double>("dt", "double", 0, "DT", "", &HumanoidCtrlConfig::dt)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.kpUpperBody = 1.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.kpUpperBody = 3000.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.kpUpperBody = 850.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(HumanoidCtrlConfig::AbstractParamDescriptionConstPtr(new HumanoidCtrlConfig::ParamDescription<double>("kpUpperBody", "double", 0, "KP UPPER BODY", "", &HumanoidCtrlConfig::kpUpperBody)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(HumanoidCtrlConfig::AbstractParamDescriptionConstPtr(new HumanoidCtrlConfig::ParamDescription<double>("kpUpperBody", "double", 0, "KP UPPER BODY", "", &HumanoidCtrlConfig::kpUpperBody)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.kpHipRoll = 1.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.kpHipRoll = 3000.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.kpHipRoll = 850.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(HumanoidCtrlConfig::AbstractParamDescriptionConstPtr(new HumanoidCtrlConfig::ParamDescription<double>("kpHipRoll", "double", 0, "KP HIP ROLL", "", &HumanoidCtrlConfig::kpHipRoll)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(HumanoidCtrlConfig::AbstractParamDescriptionConstPtr(new HumanoidCtrlConfig::ParamDescription<double>("kpHipRoll", "double", 0, "KP HIP ROLL", "", &HumanoidCtrlConfig::kpHipRoll)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.kpHipPitch = 1.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.kpHipPitch = 3000.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.kpHipPitch = 850.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(HumanoidCtrlConfig::AbstractParamDescriptionConstPtr(new HumanoidCtrlConfig::ParamDescription<double>("kpHipPitch", "double", 0, "KP HIP PITCH", "", &HumanoidCtrlConfig::kpHipPitch)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(HumanoidCtrlConfig::AbstractParamDescriptionConstPtr(new HumanoidCtrlConfig::ParamDescription<double>("kpHipPitch", "double", 0, "KP HIP PITCH", "", &HumanoidCtrlConfig::kpHipPitch)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.kpKneePitch = 1.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.kpKneePitch = 3000.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.kpKneePitch = 850.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(HumanoidCtrlConfig::AbstractParamDescriptionConstPtr(new HumanoidCtrlConfig::ParamDescription<double>("kpKneePitch", "double", 0, "KP KNEE PITCH", "", &HumanoidCtrlConfig::kpKneePitch)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(HumanoidCtrlConfig::AbstractParamDescriptionConstPtr(new HumanoidCtrlConfig::ParamDescription<double>("kpKneePitch", "double", 0, "KP KNEE PITCH", "", &HumanoidCtrlConfig::kpKneePitch)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.kpFootPitch = 1.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.kpFootPitch = 3000.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.kpFootPitch = 850.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(HumanoidCtrlConfig::AbstractParamDescriptionConstPtr(new HumanoidCtrlConfig::ParamDescription<double>("kpFootPitch", "double", 0, "KP FOOT PITCH", "", &HumanoidCtrlConfig::kpFootPitch)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(HumanoidCtrlConfig::AbstractParamDescriptionConstPtr(new HumanoidCtrlConfig::ParamDescription<double>("kpFootPitch", "double", 0, "KP FOOT PITCH", "", &HumanoidCtrlConfig::kpFootPitch)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.kpFootRoll = 1.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.kpFootRoll = 3000.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.kpFootRoll = 850.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(HumanoidCtrlConfig::AbstractParamDescriptionConstPtr(new HumanoidCtrlConfig::ParamDescription<double>("kpFootRoll", "double", 0, "KP FOOT ROLL", "", &HumanoidCtrlConfig::kpFootRoll)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(HumanoidCtrlConfig::AbstractParamDescriptionConstPtr(new HumanoidCtrlConfig::ParamDescription<double>("kpFootRoll", "double", 0, "KP FOOT ROLL", "", &HumanoidCtrlConfig::kpFootRoll)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.torsoKp = -1.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.torsoKp = 1.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.torsoKp = 0.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(HumanoidCtrlConfig::AbstractParamDescriptionConstPtr(new HumanoidCtrlConfig::ParamDescription<double>("torsoKp", "double", 0, "TORSO KP", "", &HumanoidCtrlConfig::torsoKp)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(HumanoidCtrlConfig::AbstractParamDescriptionConstPtr(new HumanoidCtrlConfig::ParamDescription<double>("torsoKp", "double", 0, "TORSO KP", "", &HumanoidCtrlConfig::torsoKp)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.torsoKi = 0.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.torsoKi = 1.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.torsoKi = 0.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(HumanoidCtrlConfig::AbstractParamDescriptionConstPtr(new HumanoidCtrlConfig::ParamDescription<double>("torsoKi", "double", 0, "TORSO KI", "", &HumanoidCtrlConfig::torsoKi)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(HumanoidCtrlConfig::AbstractParamDescriptionConstPtr(new HumanoidCtrlConfig::ParamDescription<double>("torsoKi", "double", 0, "TORSO KI", "", &HumanoidCtrlConfig::torsoKi)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.torsoKd = 0.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.torsoKd = 1.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.torsoKd = 0.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(HumanoidCtrlConfig::AbstractParamDescriptionConstPtr(new HumanoidCtrlConfig::ParamDescription<double>("torsoKd", "double", 0, "TORSO KD", "", &HumanoidCtrlConfig::torsoKd)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(HumanoidCtrlConfig::AbstractParamDescriptionConstPtr(new HumanoidCtrlConfig::ParamDescription<double>("torsoKd", "double", 0, "TORSO KD", "", &HumanoidCtrlConfig::torsoKd)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.armKp = 0.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.armKp = 2.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.armKp = 0.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(HumanoidCtrlConfig::AbstractParamDescriptionConstPtr(new HumanoidCtrlConfig::ParamDescription<double>("armKp", "double", 0, "TORSO KP", "", &HumanoidCtrlConfig::armKp)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(HumanoidCtrlConfig::AbstractParamDescriptionConstPtr(new HumanoidCtrlConfig::ParamDescription<double>("armKp", "double", 0, "TORSO KP", "", &HumanoidCtrlConfig::armKp)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.armKi = 0.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.armKi = 2.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.armKi = 0.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(HumanoidCtrlConfig::AbstractParamDescriptionConstPtr(new HumanoidCtrlConfig::ParamDescription<double>("armKi", "double", 0, "TORSO KI", "", &HumanoidCtrlConfig::armKi)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(HumanoidCtrlConfig::AbstractParamDescriptionConstPtr(new HumanoidCtrlConfig::ParamDescription<double>("armKi", "double", 0, "TORSO KI", "", &HumanoidCtrlConfig::armKi)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.armKd = 0.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.armKd = 2.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.armKd = 0.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(HumanoidCtrlConfig::AbstractParamDescriptionConstPtr(new HumanoidCtrlConfig::ParamDescription<double>("armKd", "double", 0, "TORSO KD", "", &HumanoidCtrlConfig::armKd)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(HumanoidCtrlConfig::AbstractParamDescriptionConstPtr(new HumanoidCtrlConfig::ParamDescription<double>("armKd", "double", 0, "TORSO KD", "", &HumanoidCtrlConfig::armKd)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.phaseKp = 0.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.phaseKp = 2.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.phaseKp = 0.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(HumanoidCtrlConfig::AbstractParamDescriptionConstPtr(new HumanoidCtrlConfig::ParamDescription<double>("phaseKp", "double", 0, "PHASE KP", "", &HumanoidCtrlConfig::phaseKp)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(HumanoidCtrlConfig::AbstractParamDescriptionConstPtr(new HumanoidCtrlConfig::ParamDescription<double>("phaseKp", "double", 0, "PHASE KP", "", &HumanoidCtrlConfig::phaseKp)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.phaseKi = 0.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.phaseKi = 2.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.phaseKi = 0.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(HumanoidCtrlConfig::AbstractParamDescriptionConstPtr(new HumanoidCtrlConfig::ParamDescription<double>("phaseKi", "double", 0, "PHASE KI", "", &HumanoidCtrlConfig::phaseKi)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(HumanoidCtrlConfig::AbstractParamDescriptionConstPtr(new HumanoidCtrlConfig::ParamDescription<double>("phaseKi", "double", 0, "PHASE KI", "", &HumanoidCtrlConfig::phaseKi)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.phaseKd = 0.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.phaseKd = 2.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.phaseKd = 0.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(HumanoidCtrlConfig::AbstractParamDescriptionConstPtr(new HumanoidCtrlConfig::ParamDescription<double>("phaseKd", "double", 0, "PHASE KD", "", &HumanoidCtrlConfig::phaseKd)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(HumanoidCtrlConfig::AbstractParamDescriptionConstPtr(new HumanoidCtrlConfig::ParamDescription<double>("phaseKd", "double", 0, "PHASE KD", "", &HumanoidCtrlConfig::phaseKd)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.phaseRef = 1.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.phaseRef = 30.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.phaseRef = 1.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(HumanoidCtrlConfig::AbstractParamDescriptionConstPtr(new HumanoidCtrlConfig::ParamDescription<double>("phaseRef", "double", 0, "PHASE REF", "", &HumanoidCtrlConfig::phaseRef)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(HumanoidCtrlConfig::AbstractParamDescriptionConstPtr(new HumanoidCtrlConfig::ParamDescription<double>("phaseRef", "double", 0, "PHASE REF", "", &HumanoidCtrlConfig::phaseRef)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.phase_ctrl_flag = 0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.phase_ctrl_flag = 1;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.phase_ctrl_flag = 0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(HumanoidCtrlConfig::AbstractParamDescriptionConstPtr(new HumanoidCtrlConfig::ParamDescription<bool>("phase_ctrl_flag", "bool", 0, " PHASE Control Flag", "", &HumanoidCtrlConfig::phase_ctrl_flag)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(HumanoidCtrlConfig::AbstractParamDescriptionConstPtr(new HumanoidCtrlConfig::ParamDescription<bool>("phase_ctrl_flag", "bool", 0, " PHASE Control Flag", "", &HumanoidCtrlConfig::phase_ctrl_flag)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.arm_ctrl_flag = 0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.arm_ctrl_flag = 1;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.arm_ctrl_flag = 0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(HumanoidCtrlConfig::AbstractParamDescriptionConstPtr(new HumanoidCtrlConfig::ParamDescription<bool>("arm_ctrl_flag", "bool", 0, " ARM Control Flag", "", &HumanoidCtrlConfig::arm_ctrl_flag)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(HumanoidCtrlConfig::AbstractParamDescriptionConstPtr(new HumanoidCtrlConfig::ParamDescription<bool>("arm_ctrl_flag", "bool", 0, " ARM Control Flag", "", &HumanoidCtrlConfig::arm_ctrl_flag)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.torso_ctrl_flag = 0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.torso_ctrl_flag = 1;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.torso_ctrl_flag = 0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(HumanoidCtrlConfig::AbstractParamDescriptionConstPtr(new HumanoidCtrlConfig::ParamDescription<bool>("torso_ctrl_flag", "bool", 0, "TORSO Control Flag", "", &HumanoidCtrlConfig::torso_ctrl_flag)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(HumanoidCtrlConfig::AbstractParamDescriptionConstPtr(new HumanoidCtrlConfig::ParamDescription<bool>("torso_ctrl_flag", "bool", 0, "TORSO Control Flag", "", &HumanoidCtrlConfig::torso_ctrl_flag)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.slope_ctrl_flag = 0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.slope_ctrl_flag = 1;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.slope_ctrl_flag = 0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(HumanoidCtrlConfig::AbstractParamDescriptionConstPtr(new HumanoidCtrlConfig::ParamDescription<bool>("slope_ctrl_flag", "bool", 0, "SLOPE Control Flag", "", &HumanoidCtrlConfig::slope_ctrl_flag)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(HumanoidCtrlConfig::AbstractParamDescriptionConstPtr(new HumanoidCtrlConfig::ParamDescription<bool>("slope_ctrl_flag", "bool", 0, "SLOPE Control Flag", "", &HumanoidCtrlConfig::slope_ctrl_flag)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.foot_ctrl_flag = 0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.foot_ctrl_flag = 1;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.foot_ctrl_flag = 0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(HumanoidCtrlConfig::AbstractParamDescriptionConstPtr(new HumanoidCtrlConfig::ParamDescription<bool>("foot_ctrl_flag", "bool", 0, "FOOT Control Flag", "", &HumanoidCtrlConfig::foot_ctrl_flag)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(HumanoidCtrlConfig::AbstractParamDescriptionConstPtr(new HumanoidCtrlConfig::ParamDescription<bool>("foot_ctrl_flag", "bool", 0, "FOOT Control Flag", "", &HumanoidCtrlConfig::foot_ctrl_flag)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.ctrl_flag = 0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.ctrl_flag = 1;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.ctrl_flag = 0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(HumanoidCtrlConfig::AbstractParamDescriptionConstPtr(new HumanoidCtrlConfig::ParamDescription<bool>("ctrl_flag", "bool", 0, "Control Flag", "", &HumanoidCtrlConfig::ctrl_flag)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(HumanoidCtrlConfig::AbstractParamDescriptionConstPtr(new HumanoidCtrlConfig::ParamDescription<bool>("ctrl_flag", "bool", 0, "Control Flag", "", &HumanoidCtrlConfig::ctrl_flag)));
//#line 246 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.convertParams();
//#line 246 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(HumanoidCtrlConfig::AbstractGroupDescriptionConstPtr(new HumanoidCtrlConfig::GroupDescription<HumanoidCtrlConfig::DEFAULT, HumanoidCtrlConfig>(Default)));
//#line 369 "/opt/ros/noetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

      for (std::vector<HumanoidCtrlConfig::AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        __description_message__.groups.push_back(**i);
      }
      __max__.__toMessage__(__description_message__.max, __param_descriptions__, __group_descriptions__);
      __min__.__toMessage__(__description_message__.min, __param_descriptions__, __group_descriptions__);
      __default__.__toMessage__(__description_message__.dflt, __param_descriptions__, __group_descriptions__);
    }
    std::vector<HumanoidCtrlConfig::AbstractParamDescriptionConstPtr> __param_descriptions__;
    std::vector<HumanoidCtrlConfig::AbstractGroupDescriptionConstPtr> __group_descriptions__;
    HumanoidCtrlConfig __max__;
    HumanoidCtrlConfig __min__;
    HumanoidCtrlConfig __default__;
    dynamic_reconfigure::ConfigDescription __description_message__;

    static const HumanoidCtrlConfigStatics *get_instance()
    {
      // Split this off in a separate function because I know that
      // instance will get initialized the first time get_instance is
      // called, and I am guaranteeing that get_instance gets called at
      // most once.
      static HumanoidCtrlConfigStatics instance;
      return &instance;
    }
  };

  inline const dynamic_reconfigure::ConfigDescription &HumanoidCtrlConfig::__getDescriptionMessage__()
  {
    return __get_statics__()->__description_message__;
  }

  inline const HumanoidCtrlConfig &HumanoidCtrlConfig::__getDefault__()
  {
    return __get_statics__()->__default__;
  }

  inline const HumanoidCtrlConfig &HumanoidCtrlConfig::__getMax__()
  {
    return __get_statics__()->__max__;
  }

  inline const HumanoidCtrlConfig &HumanoidCtrlConfig::__getMin__()
  {
    return __get_statics__()->__min__;
  }

  inline const std::vector<HumanoidCtrlConfig::AbstractParamDescriptionConstPtr> &HumanoidCtrlConfig::__getParamDescriptions__()
  {
    return __get_statics__()->__param_descriptions__;
  }

  inline const std::vector<HumanoidCtrlConfig::AbstractGroupDescriptionConstPtr> &HumanoidCtrlConfig::__getGroupDescriptions__()
  {
    return __get_statics__()->__group_descriptions__;
  }

  inline const HumanoidCtrlConfigStatics *HumanoidCtrlConfig::__get_statics__()
  {
    const static HumanoidCtrlConfigStatics *statics;

    if (statics) // Common case
      return statics;

    boost::mutex::scoped_lock lock(dynamic_reconfigure::__init_mutex__);

    if (statics) // In case we lost a race.
      return statics;

    statics = HumanoidCtrlConfigStatics::get_instance();

    return statics;
  }


}

#undef DYNAMIC_RECONFIGURE_FINAL

#endif // __HUMANOIDCTRLRECONFIGURATOR_H__
