// Generated by gencpp from file movement_msgs/HumanoidPropertiesMsg.msg
// DO NOT EDIT!


#ifndef MOVEMENT_MSGS_MESSAGE_HUMANOIDPROPERTIESMSG_H
#define MOVEMENT_MSGS_MESSAGE_HUMANOIDPROPERTIESMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>

namespace movement_msgs
{
template <class ContainerAllocator>
struct HumanoidPropertiesMsg_
{
  typedef HumanoidPropertiesMsg_<ContainerAllocator> Type;

  HumanoidPropertiesMsg_()
    : squat(0.0)
    , open(0.0)
    , incl(0.0)
    , sideIncl(0.0)
    , footIncl(0.0)
    , zmpPoint()
    , comPoint()
    , footComPoint()
    , torq()  {
    }
  HumanoidPropertiesMsg_(const ContainerAllocator& _alloc)
    : squat(0.0)
    , open(0.0)
    , incl(0.0)
    , sideIncl(0.0)
    , footIncl(0.0)
    , zmpPoint(_alloc)
    , comPoint(_alloc)
    , footComPoint(_alloc)
    , torq(_alloc)  {
  (void)_alloc;
    }



   typedef double _squat_type;
  _squat_type squat;

   typedef double _open_type;
  _open_type open;

   typedef double _incl_type;
  _incl_type incl;

   typedef double _sideIncl_type;
  _sideIncl_type sideIncl;

   typedef double _footIncl_type;
  _footIncl_type footIncl;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _zmpPoint_type;
  _zmpPoint_type zmpPoint;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _comPoint_type;
  _comPoint_type comPoint;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _footComPoint_type;
  _footComPoint_type footComPoint;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _torq_type;
  _torq_type torq;





  typedef boost::shared_ptr< ::movement_msgs::HumanoidPropertiesMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::movement_msgs::HumanoidPropertiesMsg_<ContainerAllocator> const> ConstPtr;

}; // struct HumanoidPropertiesMsg_

typedef ::movement_msgs::HumanoidPropertiesMsg_<std::allocator<void> > HumanoidPropertiesMsg;

typedef boost::shared_ptr< ::movement_msgs::HumanoidPropertiesMsg > HumanoidPropertiesMsgPtr;
typedef boost::shared_ptr< ::movement_msgs::HumanoidPropertiesMsg const> HumanoidPropertiesMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::movement_msgs::HumanoidPropertiesMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::movement_msgs::HumanoidPropertiesMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::movement_msgs::HumanoidPropertiesMsg_<ContainerAllocator1> & lhs, const ::movement_msgs::HumanoidPropertiesMsg_<ContainerAllocator2> & rhs)
{
  return lhs.squat == rhs.squat &&
    lhs.open == rhs.open &&
    lhs.incl == rhs.incl &&
    lhs.sideIncl == rhs.sideIncl &&
    lhs.footIncl == rhs.footIncl &&
    lhs.zmpPoint == rhs.zmpPoint &&
    lhs.comPoint == rhs.comPoint &&
    lhs.footComPoint == rhs.footComPoint &&
    lhs.torq == rhs.torq;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::movement_msgs::HumanoidPropertiesMsg_<ContainerAllocator1> & lhs, const ::movement_msgs::HumanoidPropertiesMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace movement_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::movement_msgs::HumanoidPropertiesMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::movement_msgs::HumanoidPropertiesMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::movement_msgs::HumanoidPropertiesMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::movement_msgs::HumanoidPropertiesMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::movement_msgs::HumanoidPropertiesMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::movement_msgs::HumanoidPropertiesMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::movement_msgs::HumanoidPropertiesMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ed5d141b03975d3cb4615c633a218029";
  }

  static const char* value(const ::movement_msgs::HumanoidPropertiesMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xed5d141b03975d3cULL;
  static const uint64_t static_value2 = 0xb4615c633a218029ULL;
};

template<class ContainerAllocator>
struct DataType< ::movement_msgs::HumanoidPropertiesMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "movement_msgs/HumanoidPropertiesMsg";
  }

  static const char* value(const ::movement_msgs::HumanoidPropertiesMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::movement_msgs::HumanoidPropertiesMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64               squat\n"
"float64               open\n"
"float64               incl\n"
"float64               sideIncl\n"
"float64               footIncl\n"
"geometry_msgs/Point  zmpPoint\n"
"geometry_msgs/Point  comPoint\n"
"geometry_msgs/Point  footComPoint\n"
"float64[]            torq\n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::movement_msgs::HumanoidPropertiesMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::movement_msgs::HumanoidPropertiesMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.squat);
      stream.next(m.open);
      stream.next(m.incl);
      stream.next(m.sideIncl);
      stream.next(m.footIncl);
      stream.next(m.zmpPoint);
      stream.next(m.comPoint);
      stream.next(m.footComPoint);
      stream.next(m.torq);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct HumanoidPropertiesMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::movement_msgs::HumanoidPropertiesMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::movement_msgs::HumanoidPropertiesMsg_<ContainerAllocator>& v)
  {
    s << indent << "squat: ";
    Printer<double>::stream(s, indent + "  ", v.squat);
    s << indent << "open: ";
    Printer<double>::stream(s, indent + "  ", v.open);
    s << indent << "incl: ";
    Printer<double>::stream(s, indent + "  ", v.incl);
    s << indent << "sideIncl: ";
    Printer<double>::stream(s, indent + "  ", v.sideIncl);
    s << indent << "footIncl: ";
    Printer<double>::stream(s, indent + "  ", v.footIncl);
    s << indent << "zmpPoint: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.zmpPoint);
    s << indent << "comPoint: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.comPoint);
    s << indent << "footComPoint: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.footComPoint);
    s << indent << "torq[]" << std::endl;
    for (size_t i = 0; i < v.torq.size(); ++i)
    {
      s << indent << "  torq[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.torq[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOVEMENT_MSGS_MESSAGE_HUMANOIDPROPERTIESMSG_H
