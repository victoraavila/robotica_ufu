// Generated by gencpp from file movement_msgs/HumanoidStateMsg.msg
// DO NOT EDIT!


#ifndef MOVEMENT_MSGS_MESSAGE_HUMANOIDSTATEMSG_H
#define MOVEMENT_MSGS_MESSAGE_HUMANOIDSTATEMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace movement_msgs
{
template <class ContainerAllocator>
struct HumanoidStateMsg_
{
  typedef HumanoidStateMsg_<ContainerAllocator> Type;

  HumanoidStateMsg_()
    : angX(0.0)
    , angY(0.0)
    , gyroX(0.0)
    , gyroY(0.0)
    , gyroZ(0.0)
    , accX(0.0)
    , accY(0.0)
    , accZ(0.0)  {
    }
  HumanoidStateMsg_(const ContainerAllocator& _alloc)
    : angX(0.0)
    , angY(0.0)
    , gyroX(0.0)
    , gyroY(0.0)
    , gyroZ(0.0)
    , accX(0.0)
    , accY(0.0)
    , accZ(0.0)  {
  (void)_alloc;
    }



   typedef double _angX_type;
  _angX_type angX;

   typedef double _angY_type;
  _angY_type angY;

   typedef double _gyroX_type;
  _gyroX_type gyroX;

   typedef double _gyroY_type;
  _gyroY_type gyroY;

   typedef double _gyroZ_type;
  _gyroZ_type gyroZ;

   typedef double _accX_type;
  _accX_type accX;

   typedef double _accY_type;
  _accY_type accY;

   typedef double _accZ_type;
  _accZ_type accZ;





  typedef boost::shared_ptr< ::movement_msgs::HumanoidStateMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::movement_msgs::HumanoidStateMsg_<ContainerAllocator> const> ConstPtr;

}; // struct HumanoidStateMsg_

typedef ::movement_msgs::HumanoidStateMsg_<std::allocator<void> > HumanoidStateMsg;

typedef boost::shared_ptr< ::movement_msgs::HumanoidStateMsg > HumanoidStateMsgPtr;
typedef boost::shared_ptr< ::movement_msgs::HumanoidStateMsg const> HumanoidStateMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::movement_msgs::HumanoidStateMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::movement_msgs::HumanoidStateMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::movement_msgs::HumanoidStateMsg_<ContainerAllocator1> & lhs, const ::movement_msgs::HumanoidStateMsg_<ContainerAllocator2> & rhs)
{
  return lhs.angX == rhs.angX &&
    lhs.angY == rhs.angY &&
    lhs.gyroX == rhs.gyroX &&
    lhs.gyroY == rhs.gyroY &&
    lhs.gyroZ == rhs.gyroZ &&
    lhs.accX == rhs.accX &&
    lhs.accY == rhs.accY &&
    lhs.accZ == rhs.accZ;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::movement_msgs::HumanoidStateMsg_<ContainerAllocator1> & lhs, const ::movement_msgs::HumanoidStateMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace movement_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::movement_msgs::HumanoidStateMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::movement_msgs::HumanoidStateMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::movement_msgs::HumanoidStateMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::movement_msgs::HumanoidStateMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::movement_msgs::HumanoidStateMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::movement_msgs::HumanoidStateMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::movement_msgs::HumanoidStateMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7110852ac7d0bacf26e5ea1ead1abb25";
  }

  static const char* value(const ::movement_msgs::HumanoidStateMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7110852ac7d0bacfULL;
  static const uint64_t static_value2 = 0x26e5ea1ead1abb25ULL;
};

template<class ContainerAllocator>
struct DataType< ::movement_msgs::HumanoidStateMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "movement_msgs/HumanoidStateMsg";
  }

  static const char* value(const ::movement_msgs::HumanoidStateMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::movement_msgs::HumanoidStateMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 angX\n"
"float64 angY\n"
"\n"
"float64 gyroX\n"
"float64 gyroY\n"
"float64 gyroZ\n"
"\n"
"float64 accX\n"
"float64 accY\n"
"float64 accZ\n"
;
  }

  static const char* value(const ::movement_msgs::HumanoidStateMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::movement_msgs::HumanoidStateMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.angX);
      stream.next(m.angY);
      stream.next(m.gyroX);
      stream.next(m.gyroY);
      stream.next(m.gyroZ);
      stream.next(m.accX);
      stream.next(m.accY);
      stream.next(m.accZ);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct HumanoidStateMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::movement_msgs::HumanoidStateMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::movement_msgs::HumanoidStateMsg_<ContainerAllocator>& v)
  {
    s << indent << "angX: ";
    Printer<double>::stream(s, indent + "  ", v.angX);
    s << indent << "angY: ";
    Printer<double>::stream(s, indent + "  ", v.angY);
    s << indent << "gyroX: ";
    Printer<double>::stream(s, indent + "  ", v.gyroX);
    s << indent << "gyroY: ";
    Printer<double>::stream(s, indent + "  ", v.gyroY);
    s << indent << "gyroZ: ";
    Printer<double>::stream(s, indent + "  ", v.gyroZ);
    s << indent << "accX: ";
    Printer<double>::stream(s, indent + "  ", v.accX);
    s << indent << "accY: ";
    Printer<double>::stream(s, indent + "  ", v.accY);
    s << indent << "accZ: ";
    Printer<double>::stream(s, indent + "  ", v.accZ);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOVEMENT_MSGS_MESSAGE_HUMANOIDSTATEMSG_H
