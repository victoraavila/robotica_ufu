// Generated by gencpp from file movement_msgs/InterfaceSrvResponse.msg
// DO NOT EDIT!


#ifndef MOVEMENT_MSGS_MESSAGE_INTERFACESRVRESPONSE_H
#define MOVEMENT_MSGS_MESSAGE_INTERFACESRVRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <movement_msgs/JointStateMsg.h>
#include <movement_msgs/MotorPIDMsg.h>

namespace movement_msgs
{
template <class ContainerAllocator>
struct InterfaceSrvResponse_
{
  typedef InterfaceSrvResponse_<ContainerAllocator> Type;

  InterfaceSrvResponse_()
    : motorState()
    , motorPID()
    , ids()  {
    }
  InterfaceSrvResponse_(const ContainerAllocator& _alloc)
    : motorState(_alloc)
    , motorPID(_alloc)
    , ids(_alloc)  {
  (void)_alloc;
    }



   typedef  ::movement_msgs::JointStateMsg_<ContainerAllocator>  _motorState_type;
  _motorState_type motorState;

   typedef  ::movement_msgs::MotorPIDMsg_<ContainerAllocator>  _motorPID_type;
  _motorPID_type motorPID;

   typedef std::vector<int16_t, typename ContainerAllocator::template rebind<int16_t>::other >  _ids_type;
  _ids_type ids;





  typedef boost::shared_ptr< ::movement_msgs::InterfaceSrvResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::movement_msgs::InterfaceSrvResponse_<ContainerAllocator> const> ConstPtr;

}; // struct InterfaceSrvResponse_

typedef ::movement_msgs::InterfaceSrvResponse_<std::allocator<void> > InterfaceSrvResponse;

typedef boost::shared_ptr< ::movement_msgs::InterfaceSrvResponse > InterfaceSrvResponsePtr;
typedef boost::shared_ptr< ::movement_msgs::InterfaceSrvResponse const> InterfaceSrvResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::movement_msgs::InterfaceSrvResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::movement_msgs::InterfaceSrvResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::movement_msgs::InterfaceSrvResponse_<ContainerAllocator1> & lhs, const ::movement_msgs::InterfaceSrvResponse_<ContainerAllocator2> & rhs)
{
  return lhs.motorState == rhs.motorState &&
    lhs.motorPID == rhs.motorPID &&
    lhs.ids == rhs.ids;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::movement_msgs::InterfaceSrvResponse_<ContainerAllocator1> & lhs, const ::movement_msgs::InterfaceSrvResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace movement_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::movement_msgs::InterfaceSrvResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::movement_msgs::InterfaceSrvResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::movement_msgs::InterfaceSrvResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::movement_msgs::InterfaceSrvResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::movement_msgs::InterfaceSrvResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::movement_msgs::InterfaceSrvResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::movement_msgs::InterfaceSrvResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9f6a712565425d1f45ef42e77c1863fd";
  }

  static const char* value(const ::movement_msgs::InterfaceSrvResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9f6a712565425d1fULL;
  static const uint64_t static_value2 = 0x45ef42e77c1863fdULL;
};

template<class ContainerAllocator>
struct DataType< ::movement_msgs::InterfaceSrvResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "movement_msgs/InterfaceSrvResponse";
  }

  static const char* value(const ::movement_msgs::InterfaceSrvResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::movement_msgs::InterfaceSrvResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "movement_msgs/JointStateMsg motorState\n"
"movement_msgs/MotorPIDMsg   motorPID\n"
"int16[]                     ids\n"
"\n"
"\n"
"================================================================================\n"
"MSG: movement_msgs/JointStateMsg\n"
"Header    header\n"
"float64[] pos\n"
"float64[] vel\n"
"float64[] acc\n"
"float64[] torq\n"
"string  writeCommand\n"
"string        kind\n"
"string        readCommand\n"
"int32         type\n"
"int32         source\n"
"float64       dt\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: movement_msgs/MotorPIDMsg\n"
"float64[]       kp\n"
"float64[]       ki\n"
"float64[]       kd\n"
"\n"
"\n"
;
  }

  static const char* value(const ::movement_msgs::InterfaceSrvResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::movement_msgs::InterfaceSrvResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.motorState);
      stream.next(m.motorPID);
      stream.next(m.ids);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct InterfaceSrvResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::movement_msgs::InterfaceSrvResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::movement_msgs::InterfaceSrvResponse_<ContainerAllocator>& v)
  {
    s << indent << "motorState: ";
    s << std::endl;
    Printer< ::movement_msgs::JointStateMsg_<ContainerAllocator> >::stream(s, indent + "  ", v.motorState);
    s << indent << "motorPID: ";
    s << std::endl;
    Printer< ::movement_msgs::MotorPIDMsg_<ContainerAllocator> >::stream(s, indent + "  ", v.motorPID);
    s << indent << "ids[]" << std::endl;
    for (size_t i = 0; i < v.ids.size(); ++i)
    {
      s << indent << "  ids[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.ids[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOVEMENT_MSGS_MESSAGE_INTERFACESRVRESPONSE_H
