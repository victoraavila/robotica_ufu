// Generated by gencpp from file movement_msgs/JointStateMsg.msg
// DO NOT EDIT!


#ifndef MOVEMENT_MSGS_MESSAGE_JOINTSTATEMSG_H
#define MOVEMENT_MSGS_MESSAGE_JOINTSTATEMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace movement_msgs
{
template <class ContainerAllocator>
struct JointStateMsg_
{
  typedef JointStateMsg_<ContainerAllocator> Type;

  JointStateMsg_()
    : header()
    , pos()
    , vel()
    , acc()
    , torq()
    , writeCommand()
    , kind()
    , readCommand()
    , type(0)
    , source(0)
    , dt(0.0)  {
    }
  JointStateMsg_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , pos(_alloc)
    , vel(_alloc)
    , acc(_alloc)
    , torq(_alloc)
    , writeCommand(_alloc)
    , kind(_alloc)
    , readCommand(_alloc)
    , type(0)
    , source(0)
    , dt(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _pos_type;
  _pos_type pos;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _vel_type;
  _vel_type vel;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _acc_type;
  _acc_type acc;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _torq_type;
  _torq_type torq;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _writeCommand_type;
  _writeCommand_type writeCommand;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _kind_type;
  _kind_type kind;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _readCommand_type;
  _readCommand_type readCommand;

   typedef int32_t _type_type;
  _type_type type;

   typedef int32_t _source_type;
  _source_type source;

   typedef double _dt_type;
  _dt_type dt;





  typedef boost::shared_ptr< ::movement_msgs::JointStateMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::movement_msgs::JointStateMsg_<ContainerAllocator> const> ConstPtr;

}; // struct JointStateMsg_

typedef ::movement_msgs::JointStateMsg_<std::allocator<void> > JointStateMsg;

typedef boost::shared_ptr< ::movement_msgs::JointStateMsg > JointStateMsgPtr;
typedef boost::shared_ptr< ::movement_msgs::JointStateMsg const> JointStateMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::movement_msgs::JointStateMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::movement_msgs::JointStateMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::movement_msgs::JointStateMsg_<ContainerAllocator1> & lhs, const ::movement_msgs::JointStateMsg_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.pos == rhs.pos &&
    lhs.vel == rhs.vel &&
    lhs.acc == rhs.acc &&
    lhs.torq == rhs.torq &&
    lhs.writeCommand == rhs.writeCommand &&
    lhs.kind == rhs.kind &&
    lhs.readCommand == rhs.readCommand &&
    lhs.type == rhs.type &&
    lhs.source == rhs.source &&
    lhs.dt == rhs.dt;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::movement_msgs::JointStateMsg_<ContainerAllocator1> & lhs, const ::movement_msgs::JointStateMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace movement_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::movement_msgs::JointStateMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::movement_msgs::JointStateMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::movement_msgs::JointStateMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::movement_msgs::JointStateMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::movement_msgs::JointStateMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::movement_msgs::JointStateMsg_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::movement_msgs::JointStateMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d7972f556d5c14278ff625e52fac2b86";
  }

  static const char* value(const ::movement_msgs::JointStateMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd7972f556d5c1427ULL;
  static const uint64_t static_value2 = 0x8ff625e52fac2b86ULL;
};

template<class ContainerAllocator>
struct DataType< ::movement_msgs::JointStateMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "movement_msgs/JointStateMsg";
  }

  static const char* value(const ::movement_msgs::JointStateMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::movement_msgs::JointStateMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header    header\n"
"float64[] pos\n"
"float64[] vel\n"
"float64[] acc\n"
"float64[] torq\n"
"string  writeCommand\n"
"string        kind\n"
"string        readCommand\n"
"int32         type\n"
"int32         source\n"
"float64       dt\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::movement_msgs::JointStateMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::movement_msgs::JointStateMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.pos);
      stream.next(m.vel);
      stream.next(m.acc);
      stream.next(m.torq);
      stream.next(m.writeCommand);
      stream.next(m.kind);
      stream.next(m.readCommand);
      stream.next(m.type);
      stream.next(m.source);
      stream.next(m.dt);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct JointStateMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::movement_msgs::JointStateMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::movement_msgs::JointStateMsg_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "pos[]" << std::endl;
    for (size_t i = 0; i < v.pos.size(); ++i)
    {
      s << indent << "  pos[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.pos[i]);
    }
    s << indent << "vel[]" << std::endl;
    for (size_t i = 0; i < v.vel.size(); ++i)
    {
      s << indent << "  vel[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.vel[i]);
    }
    s << indent << "acc[]" << std::endl;
    for (size_t i = 0; i < v.acc.size(); ++i)
    {
      s << indent << "  acc[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.acc[i]);
    }
    s << indent << "torq[]" << std::endl;
    for (size_t i = 0; i < v.torq.size(); ++i)
    {
      s << indent << "  torq[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.torq[i]);
    }
    s << indent << "writeCommand: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.writeCommand);
    s << indent << "kind: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.kind);
    s << indent << "readCommand: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.readCommand);
    s << indent << "type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.type);
    s << indent << "source: ";
    Printer<int32_t>::stream(s, indent + "  ", v.source);
    s << indent << "dt: ";
    Printer<double>::stream(s, indent + "  ", v.dt);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOVEMENT_MSGS_MESSAGE_JOINTSTATEMSG_H
