// Generated by gencpp from file movement_msgs/LearningMsg.msg
// DO NOT EDIT!


#ifndef MOVEMENT_MSGS_MESSAGE_LEARNINGMSG_H
#define MOVEMENT_MSGS_MESSAGE_LEARNINGMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <movement_msgs/PerformanceMsg.h>
#include <movement_msgs/PerformanceMsg.h>
#include <movement_msgs/PerformanceMsg.h>
#include <movement_msgs/PerformanceMsg.h>
#include <movement_msgs/PerformanceMsg.h>
#include <sensor_msgs/Imu.h>
#include <movement_msgs/HumanoidStateMsg.h>

namespace movement_msgs
{
template <class ContainerAllocator>
struct LearningMsg_
{
  typedef LearningMsg_<ContainerAllocator> Type;

  LearningMsg_()
    : header()
    , x()
    , y()
    , z()
    , rFoot()
    , lFoot()
    , force()
    , torque3()
    , torque4()
    , torqueF()
    , imu()
    , perf(0.0)
    , df(0.0)
    , state()  {
    }
  LearningMsg_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , x(_alloc)
    , y(_alloc)
    , z(_alloc)
    , rFoot(_alloc)
    , lFoot(_alloc)
    , force(_alloc)
    , torque3(_alloc)
    , torque4(_alloc)
    , torqueF(_alloc)
    , imu(_alloc)
    , perf(0.0)
    , df(0.0)
    , state(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::movement_msgs::PerformanceMsg_<ContainerAllocator>  _x_type;
  _x_type x;

   typedef  ::movement_msgs::PerformanceMsg_<ContainerAllocator>  _y_type;
  _y_type y;

   typedef  ::movement_msgs::PerformanceMsg_<ContainerAllocator>  _z_type;
  _z_type z;

   typedef  ::movement_msgs::PerformanceMsg_<ContainerAllocator>  _rFoot_type;
  _rFoot_type rFoot;

   typedef  ::movement_msgs::PerformanceMsg_<ContainerAllocator>  _lFoot_type;
  _lFoot_type lFoot;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _force_type;
  _force_type force;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _torque3_type;
  _torque3_type torque3;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _torque4_type;
  _torque4_type torque4;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _torqueF_type;
  _torqueF_type torqueF;

   typedef std::vector< ::sensor_msgs::Imu_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::sensor_msgs::Imu_<ContainerAllocator> >::other >  _imu_type;
  _imu_type imu;

   typedef double _perf_type;
  _perf_type perf;

   typedef double _df_type;
  _df_type df;

   typedef  ::movement_msgs::HumanoidStateMsg_<ContainerAllocator>  _state_type;
  _state_type state;





  typedef boost::shared_ptr< ::movement_msgs::LearningMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::movement_msgs::LearningMsg_<ContainerAllocator> const> ConstPtr;

}; // struct LearningMsg_

typedef ::movement_msgs::LearningMsg_<std::allocator<void> > LearningMsg;

typedef boost::shared_ptr< ::movement_msgs::LearningMsg > LearningMsgPtr;
typedef boost::shared_ptr< ::movement_msgs::LearningMsg const> LearningMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::movement_msgs::LearningMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::movement_msgs::LearningMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::movement_msgs::LearningMsg_<ContainerAllocator1> & lhs, const ::movement_msgs::LearningMsg_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.z == rhs.z &&
    lhs.rFoot == rhs.rFoot &&
    lhs.lFoot == rhs.lFoot &&
    lhs.force == rhs.force &&
    lhs.torque3 == rhs.torque3 &&
    lhs.torque4 == rhs.torque4 &&
    lhs.torqueF == rhs.torqueF &&
    lhs.imu == rhs.imu &&
    lhs.perf == rhs.perf &&
    lhs.df == rhs.df &&
    lhs.state == rhs.state;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::movement_msgs::LearningMsg_<ContainerAllocator1> & lhs, const ::movement_msgs::LearningMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace movement_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::movement_msgs::LearningMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::movement_msgs::LearningMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::movement_msgs::LearningMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::movement_msgs::LearningMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::movement_msgs::LearningMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::movement_msgs::LearningMsg_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::movement_msgs::LearningMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bb9643324c03e2d257aa2412b115318f";
  }

  static const char* value(const ::movement_msgs::LearningMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbb9643324c03e2d2ULL;
  static const uint64_t static_value2 = 0x57aa2412b115318fULL;
};

template<class ContainerAllocator>
struct DataType< ::movement_msgs::LearningMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "movement_msgs/LearningMsg";
  }

  static const char* value(const ::movement_msgs::LearningMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::movement_msgs::LearningMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header    header\n"
"movement_msgs/PerformanceMsg x\n"
"movement_msgs/PerformanceMsg y\n"
"movement_msgs/PerformanceMsg z\n"
"movement_msgs/PerformanceMsg rFoot\n"
"movement_msgs/PerformanceMsg lFoot\n"
"\n"
"float64[]           force\n"
"float64[]           torque3\n"
"float64[]           torque4\n"
"float64[]           torqueF\n"
"sensor_msgs/Imu[]   imu\n"
"\n"
"float64   perf\n"
"float64   df\n"
"movement_msgs/HumanoidStateMsg  state\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: movement_msgs/PerformanceMsg\n"
"float64[] data\n"
"float64[] bins\n"
"float64   freq\n"
"float64   amp\n"
"float64   mean\n"
"float64   integral\n"
"float64   freqRef\n"
"float64   freqRange\n"
"float64   ampRef\n"
"float64   ampRange\n"
"float64   meanRef\n"
"float64   meanRange\n"
"\n"
"float64   freqPerf\n"
"float64   ampPerf\n"
"float64   meanPerf\n"
"\n"
"float64   wFreq\n"
"float64   wAmp\n"
"float64   wMean\n"
"\n"
"float64   perf\n"
"\n"
"================================================================================\n"
"MSG: sensor_msgs/Imu\n"
"# This is a message to hold data from an IMU (Inertial Measurement Unit)\n"
"#\n"
"# Accelerations should be in m/s^2 (not in g's), and rotational velocity should be in rad/sec\n"
"#\n"
"# If the covariance of the measurement is known, it should be filled in (if all you know is the \n"
"# variance of each measurement, e.g. from the datasheet, just put those along the diagonal)\n"
"# A covariance matrix of all zeros will be interpreted as \"covariance unknown\", and to use the\n"
"# data a covariance will have to be assumed or gotten from some other source\n"
"#\n"
"# If you have no estimate for one of the data elements (e.g. your IMU doesn't produce an orientation \n"
"# estimate), please set element 0 of the associated covariance matrix to -1\n"
"# If you are interpreting this message, please check for a value of -1 in the first element of each \n"
"# covariance matrix, and disregard the associated estimate.\n"
"\n"
"Header header\n"
"\n"
"geometry_msgs/Quaternion orientation\n"
"float64[9] orientation_covariance # Row major about x, y, z axes\n"
"\n"
"geometry_msgs/Vector3 angular_velocity\n"
"float64[9] angular_velocity_covariance # Row major about x, y, z axes\n"
"\n"
"geometry_msgs/Vector3 linear_acceleration\n"
"float64[9] linear_acceleration_covariance # Row major x, y z \n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: movement_msgs/HumanoidStateMsg\n"
"float64 angX\n"
"float64 angY\n"
"\n"
"float64 gyroX\n"
"float64 gyroY\n"
"float64 gyroZ\n"
"\n"
"float64 accX\n"
"float64 accY\n"
"float64 accZ\n"
;
  }

  static const char* value(const ::movement_msgs::LearningMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::movement_msgs::LearningMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.rFoot);
      stream.next(m.lFoot);
      stream.next(m.force);
      stream.next(m.torque3);
      stream.next(m.torque4);
      stream.next(m.torqueF);
      stream.next(m.imu);
      stream.next(m.perf);
      stream.next(m.df);
      stream.next(m.state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LearningMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::movement_msgs::LearningMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::movement_msgs::LearningMsg_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "x: ";
    s << std::endl;
    Printer< ::movement_msgs::PerformanceMsg_<ContainerAllocator> >::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    s << std::endl;
    Printer< ::movement_msgs::PerformanceMsg_<ContainerAllocator> >::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    s << std::endl;
    Printer< ::movement_msgs::PerformanceMsg_<ContainerAllocator> >::stream(s, indent + "  ", v.z);
    s << indent << "rFoot: ";
    s << std::endl;
    Printer< ::movement_msgs::PerformanceMsg_<ContainerAllocator> >::stream(s, indent + "  ", v.rFoot);
    s << indent << "lFoot: ";
    s << std::endl;
    Printer< ::movement_msgs::PerformanceMsg_<ContainerAllocator> >::stream(s, indent + "  ", v.lFoot);
    s << indent << "force[]" << std::endl;
    for (size_t i = 0; i < v.force.size(); ++i)
    {
      s << indent << "  force[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.force[i]);
    }
    s << indent << "torque3[]" << std::endl;
    for (size_t i = 0; i < v.torque3.size(); ++i)
    {
      s << indent << "  torque3[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.torque3[i]);
    }
    s << indent << "torque4[]" << std::endl;
    for (size_t i = 0; i < v.torque4.size(); ++i)
    {
      s << indent << "  torque4[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.torque4[i]);
    }
    s << indent << "torqueF[]" << std::endl;
    for (size_t i = 0; i < v.torqueF.size(); ++i)
    {
      s << indent << "  torqueF[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.torqueF[i]);
    }
    s << indent << "imu[]" << std::endl;
    for (size_t i = 0; i < v.imu.size(); ++i)
    {
      s << indent << "  imu[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::sensor_msgs::Imu_<ContainerAllocator> >::stream(s, indent + "    ", v.imu[i]);
    }
    s << indent << "perf: ";
    Printer<double>::stream(s, indent + "  ", v.perf);
    s << indent << "df: ";
    Printer<double>::stream(s, indent + "  ", v.df);
    s << indent << "state: ";
    s << std::endl;
    Printer< ::movement_msgs::HumanoidStateMsg_<ContainerAllocator> >::stream(s, indent + "  ", v.state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOVEMENT_MSGS_MESSAGE_LEARNINGMSG_H
