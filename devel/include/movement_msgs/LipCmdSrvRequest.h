// Generated by gencpp from file movement_msgs/LipCmdSrvRequest.msg
// DO NOT EDIT!


#ifndef MOVEMENT_MSGS_MESSAGE_LIPCMDSRVREQUEST_H
#define MOVEMENT_MSGS_MESSAGE_LIPCMDSRVREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace movement_msgs
{
template <class ContainerAllocator>
struct LipCmdSrvRequest_
{
  typedef LipCmdSrvRequest_<ContainerAllocator> Type;

  LipCmdSrvRequest_()
    : first_pose(false)
    , move_head(false)
    , walk_flag(false)
    , reset_walk(false)
    , test_mode(false)
    , vx(0.0)
    , vy(0.0)
    , vz(0.0)  {
    }
  LipCmdSrvRequest_(const ContainerAllocator& _alloc)
    : first_pose(false)
    , move_head(false)
    , walk_flag(false)
    , reset_walk(false)
    , test_mode(false)
    , vx(0.0)
    , vy(0.0)
    , vz(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _first_pose_type;
  _first_pose_type first_pose;

   typedef uint8_t _move_head_type;
  _move_head_type move_head;

   typedef uint8_t _walk_flag_type;
  _walk_flag_type walk_flag;

   typedef uint8_t _reset_walk_type;
  _reset_walk_type reset_walk;

   typedef uint8_t _test_mode_type;
  _test_mode_type test_mode;

   typedef double _vx_type;
  _vx_type vx;

   typedef double _vy_type;
  _vy_type vy;

   typedef double _vz_type;
  _vz_type vz;





  typedef boost::shared_ptr< ::movement_msgs::LipCmdSrvRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::movement_msgs::LipCmdSrvRequest_<ContainerAllocator> const> ConstPtr;

}; // struct LipCmdSrvRequest_

typedef ::movement_msgs::LipCmdSrvRequest_<std::allocator<void> > LipCmdSrvRequest;

typedef boost::shared_ptr< ::movement_msgs::LipCmdSrvRequest > LipCmdSrvRequestPtr;
typedef boost::shared_ptr< ::movement_msgs::LipCmdSrvRequest const> LipCmdSrvRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::movement_msgs::LipCmdSrvRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::movement_msgs::LipCmdSrvRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::movement_msgs::LipCmdSrvRequest_<ContainerAllocator1> & lhs, const ::movement_msgs::LipCmdSrvRequest_<ContainerAllocator2> & rhs)
{
  return lhs.first_pose == rhs.first_pose &&
    lhs.move_head == rhs.move_head &&
    lhs.walk_flag == rhs.walk_flag &&
    lhs.reset_walk == rhs.reset_walk &&
    lhs.test_mode == rhs.test_mode &&
    lhs.vx == rhs.vx &&
    lhs.vy == rhs.vy &&
    lhs.vz == rhs.vz;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::movement_msgs::LipCmdSrvRequest_<ContainerAllocator1> & lhs, const ::movement_msgs::LipCmdSrvRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace movement_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::movement_msgs::LipCmdSrvRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::movement_msgs::LipCmdSrvRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::movement_msgs::LipCmdSrvRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::movement_msgs::LipCmdSrvRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::movement_msgs::LipCmdSrvRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::movement_msgs::LipCmdSrvRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::movement_msgs::LipCmdSrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4433778752b474643548f0d3ce287ab0";
  }

  static const char* value(const ::movement_msgs::LipCmdSrvRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4433778752b47464ULL;
  static const uint64_t static_value2 = 0x3548f0d3ce287ab0ULL;
};

template<class ContainerAllocator>
struct DataType< ::movement_msgs::LipCmdSrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "movement_msgs/LipCmdSrvRequest";
  }

  static const char* value(const ::movement_msgs::LipCmdSrvRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::movement_msgs::LipCmdSrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool    first_pose\n"
"bool    move_head\n"
"bool    walk_flag\n"
"bool    reset_walk \n"
"bool    test_mode\n"
"float64 vx\n"
"float64 vy\n"
"float64 vz\n"
"\n"
;
  }

  static const char* value(const ::movement_msgs::LipCmdSrvRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::movement_msgs::LipCmdSrvRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.first_pose);
      stream.next(m.move_head);
      stream.next(m.walk_flag);
      stream.next(m.reset_walk);
      stream.next(m.test_mode);
      stream.next(m.vx);
      stream.next(m.vy);
      stream.next(m.vz);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LipCmdSrvRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::movement_msgs::LipCmdSrvRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::movement_msgs::LipCmdSrvRequest_<ContainerAllocator>& v)
  {
    s << indent << "first_pose: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.first_pose);
    s << indent << "move_head: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.move_head);
    s << indent << "walk_flag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.walk_flag);
    s << indent << "reset_walk: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.reset_walk);
    s << indent << "test_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.test_mode);
    s << indent << "vx: ";
    Printer<double>::stream(s, indent + "  ", v.vx);
    s << indent << "vy: ";
    Printer<double>::stream(s, indent + "  ", v.vy);
    s << indent << "vz: ";
    Printer<double>::stream(s, indent + "  ", v.vz);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOVEMENT_MSGS_MESSAGE_LIPCMDSRVREQUEST_H
