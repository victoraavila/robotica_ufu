// Generated by gencpp from file movement_msgs/LipFeedBack.msg
// DO NOT EDIT!


#ifndef MOVEMENT_MSGS_MESSAGE_LIPFEEDBACK_H
#define MOVEMENT_MSGS_MESSAGE_LIPFEEDBACK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>

namespace movement_msgs
{
template <class ContainerAllocator>
struct LipFeedBack_
{
  typedef LipFeedBack_<ContainerAllocator> Type;

  LipFeedBack_()
    : header()
    , comPos()
    , comVel()
    , comAcc()
    , footStep()
    , footStepR()
    , zmp()
    , footGround(0)
    , footAir(0)
    , wState(0)  {
    }
  LipFeedBack_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , comPos(_alloc)
    , comVel(_alloc)
    , comAcc(_alloc)
    , footStep(_alloc)
    , footStepR(_alloc)
    , zmp(_alloc)
    , footGround(0)
    , footAir(0)
    , wState(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _comPos_type;
  _comPos_type comPos;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _comVel_type;
  _comVel_type comVel;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _comAcc_type;
  _comAcc_type comAcc;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _footStep_type;
  _footStep_type footStep;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _footStepR_type;
  _footStepR_type footStepR;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _zmp_type;
  _zmp_type zmp;

   typedef int16_t _footGround_type;
  _footGround_type footGround;

   typedef int16_t _footAir_type;
  _footAir_type footAir;

   typedef int16_t _wState_type;
  _wState_type wState;





  typedef boost::shared_ptr< ::movement_msgs::LipFeedBack_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::movement_msgs::LipFeedBack_<ContainerAllocator> const> ConstPtr;

}; // struct LipFeedBack_

typedef ::movement_msgs::LipFeedBack_<std::allocator<void> > LipFeedBack;

typedef boost::shared_ptr< ::movement_msgs::LipFeedBack > LipFeedBackPtr;
typedef boost::shared_ptr< ::movement_msgs::LipFeedBack const> LipFeedBackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::movement_msgs::LipFeedBack_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::movement_msgs::LipFeedBack_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::movement_msgs::LipFeedBack_<ContainerAllocator1> & lhs, const ::movement_msgs::LipFeedBack_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.comPos == rhs.comPos &&
    lhs.comVel == rhs.comVel &&
    lhs.comAcc == rhs.comAcc &&
    lhs.footStep == rhs.footStep &&
    lhs.footStepR == rhs.footStepR &&
    lhs.zmp == rhs.zmp &&
    lhs.footGround == rhs.footGround &&
    lhs.footAir == rhs.footAir &&
    lhs.wState == rhs.wState;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::movement_msgs::LipFeedBack_<ContainerAllocator1> & lhs, const ::movement_msgs::LipFeedBack_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace movement_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::movement_msgs::LipFeedBack_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::movement_msgs::LipFeedBack_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::movement_msgs::LipFeedBack_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::movement_msgs::LipFeedBack_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::movement_msgs::LipFeedBack_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::movement_msgs::LipFeedBack_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::movement_msgs::LipFeedBack_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e610855409fd0666f178d132dd374e0d";
  }

  static const char* value(const ::movement_msgs::LipFeedBack_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe610855409fd0666ULL;
  static const uint64_t static_value2 = 0xf178d132dd374e0dULL;
};

template<class ContainerAllocator>
struct DataType< ::movement_msgs::LipFeedBack_<ContainerAllocator> >
{
  static const char* value()
  {
    return "movement_msgs/LipFeedBack";
  }

  static const char* value(const ::movement_msgs::LipFeedBack_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::movement_msgs::LipFeedBack_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header                header\n"
"geometry_msgs/Point   comPos\n"
"geometry_msgs/Point   comVel\n"
"geometry_msgs/Point   comAcc\n"
"geometry_msgs/Point   footStep\n"
"geometry_msgs/Point   footStepR\n"
"geometry_msgs/Point   zmp\n"
"int16                 footGround\n"
"int16                 footAir\n"
"int16                 wState\n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::movement_msgs::LipFeedBack_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::movement_msgs::LipFeedBack_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.comPos);
      stream.next(m.comVel);
      stream.next(m.comAcc);
      stream.next(m.footStep);
      stream.next(m.footStepR);
      stream.next(m.zmp);
      stream.next(m.footGround);
      stream.next(m.footAir);
      stream.next(m.wState);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LipFeedBack_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::movement_msgs::LipFeedBack_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::movement_msgs::LipFeedBack_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "comPos: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.comPos);
    s << indent << "comVel: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.comVel);
    s << indent << "comAcc: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.comAcc);
    s << indent << "footStep: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.footStep);
    s << indent << "footStepR: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.footStepR);
    s << indent << "zmp: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.zmp);
    s << indent << "footGround: ";
    Printer<int16_t>::stream(s, indent + "  ", v.footGround);
    s << indent << "footAir: ";
    Printer<int16_t>::stream(s, indent + "  ", v.footAir);
    s << indent << "wState: ";
    Printer<int16_t>::stream(s, indent + "  ", v.wState);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOVEMENT_MSGS_MESSAGE_LIPFEEDBACK_H
