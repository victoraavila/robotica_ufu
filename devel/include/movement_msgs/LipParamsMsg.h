// Generated by gencpp from file movement_msgs/LipParamsMsg.msg
// DO NOT EDIT!


#ifndef MOVEMENT_MSGS_MESSAGE_LIPPARAMSMSG_H
#define MOVEMENT_MSGS_MESSAGE_LIPPARAMSMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace movement_msgs
{
template <class ContainerAllocator>
struct LipParamsMsg_
{
  typedef LipParamsMsg_<ContainerAllocator> Type;

  LipParamsMsg_()
    : first_pose(false)
    , move_head(false)
    , walk_flag(false)
    , test_mode(false)
    , zCCorr(0.0)
    , tS(0.0)
    , tD(0.0)
    , stepH(0.0)
    , delayR(0.0)
    , delayL(0.0)
    , delayAll(0.0)
    , vx(0.0)
    , vy(0.0)
    , vz(0.0)  {
    }
  LipParamsMsg_(const ContainerAllocator& _alloc)
    : first_pose(false)
    , move_head(false)
    , walk_flag(false)
    , test_mode(false)
    , zCCorr(0.0)
    , tS(0.0)
    , tD(0.0)
    , stepH(0.0)
    , delayR(0.0)
    , delayL(0.0)
    , delayAll(0.0)
    , vx(0.0)
    , vy(0.0)
    , vz(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _first_pose_type;
  _first_pose_type first_pose;

   typedef uint8_t _move_head_type;
  _move_head_type move_head;

   typedef uint8_t _walk_flag_type;
  _walk_flag_type walk_flag;

   typedef uint8_t _test_mode_type;
  _test_mode_type test_mode;

   typedef double _zCCorr_type;
  _zCCorr_type zCCorr;

   typedef double _tS_type;
  _tS_type tS;

   typedef double _tD_type;
  _tD_type tD;

   typedef double _stepH_type;
  _stepH_type stepH;

   typedef double _delayR_type;
  _delayR_type delayR;

   typedef double _delayL_type;
  _delayL_type delayL;

   typedef double _delayAll_type;
  _delayAll_type delayAll;

   typedef double _vx_type;
  _vx_type vx;

   typedef double _vy_type;
  _vy_type vy;

   typedef double _vz_type;
  _vz_type vz;





  typedef boost::shared_ptr< ::movement_msgs::LipParamsMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::movement_msgs::LipParamsMsg_<ContainerAllocator> const> ConstPtr;

}; // struct LipParamsMsg_

typedef ::movement_msgs::LipParamsMsg_<std::allocator<void> > LipParamsMsg;

typedef boost::shared_ptr< ::movement_msgs::LipParamsMsg > LipParamsMsgPtr;
typedef boost::shared_ptr< ::movement_msgs::LipParamsMsg const> LipParamsMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::movement_msgs::LipParamsMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::movement_msgs::LipParamsMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::movement_msgs::LipParamsMsg_<ContainerAllocator1> & lhs, const ::movement_msgs::LipParamsMsg_<ContainerAllocator2> & rhs)
{
  return lhs.first_pose == rhs.first_pose &&
    lhs.move_head == rhs.move_head &&
    lhs.walk_flag == rhs.walk_flag &&
    lhs.test_mode == rhs.test_mode &&
    lhs.zCCorr == rhs.zCCorr &&
    lhs.tS == rhs.tS &&
    lhs.tD == rhs.tD &&
    lhs.stepH == rhs.stepH &&
    lhs.delayR == rhs.delayR &&
    lhs.delayL == rhs.delayL &&
    lhs.delayAll == rhs.delayAll &&
    lhs.vx == rhs.vx &&
    lhs.vy == rhs.vy &&
    lhs.vz == rhs.vz;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::movement_msgs::LipParamsMsg_<ContainerAllocator1> & lhs, const ::movement_msgs::LipParamsMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace movement_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::movement_msgs::LipParamsMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::movement_msgs::LipParamsMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::movement_msgs::LipParamsMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::movement_msgs::LipParamsMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::movement_msgs::LipParamsMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::movement_msgs::LipParamsMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::movement_msgs::LipParamsMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6a778c748371c895283cbab464bdfc2f";
  }

  static const char* value(const ::movement_msgs::LipParamsMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6a778c748371c895ULL;
  static const uint64_t static_value2 = 0x283cbab464bdfc2fULL;
};

template<class ContainerAllocator>
struct DataType< ::movement_msgs::LipParamsMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "movement_msgs/LipParamsMsg";
  }

  static const char* value(const ::movement_msgs::LipParamsMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::movement_msgs::LipParamsMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool    first_pose\n"
"bool    move_head\n"
"bool    walk_flag\n"
"bool    test_mode\n"
"float64 zCCorr\n"
"float64 tS\n"
"float64 tD\n"
"float64 stepH\n"
"float64 delayR\n"
"float64 delayL\n"
"float64 delayAll\n"
"float64 vx\n"
"float64 vy\n"
"float64 vz\n"
"\n"
"\n"
;
  }

  static const char* value(const ::movement_msgs::LipParamsMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::movement_msgs::LipParamsMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.first_pose);
      stream.next(m.move_head);
      stream.next(m.walk_flag);
      stream.next(m.test_mode);
      stream.next(m.zCCorr);
      stream.next(m.tS);
      stream.next(m.tD);
      stream.next(m.stepH);
      stream.next(m.delayR);
      stream.next(m.delayL);
      stream.next(m.delayAll);
      stream.next(m.vx);
      stream.next(m.vy);
      stream.next(m.vz);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LipParamsMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::movement_msgs::LipParamsMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::movement_msgs::LipParamsMsg_<ContainerAllocator>& v)
  {
    s << indent << "first_pose: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.first_pose);
    s << indent << "move_head: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.move_head);
    s << indent << "walk_flag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.walk_flag);
    s << indent << "test_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.test_mode);
    s << indent << "zCCorr: ";
    Printer<double>::stream(s, indent + "  ", v.zCCorr);
    s << indent << "tS: ";
    Printer<double>::stream(s, indent + "  ", v.tS);
    s << indent << "tD: ";
    Printer<double>::stream(s, indent + "  ", v.tD);
    s << indent << "stepH: ";
    Printer<double>::stream(s, indent + "  ", v.stepH);
    s << indent << "delayR: ";
    Printer<double>::stream(s, indent + "  ", v.delayR);
    s << indent << "delayL: ";
    Printer<double>::stream(s, indent + "  ", v.delayL);
    s << indent << "delayAll: ";
    Printer<double>::stream(s, indent + "  ", v.delayAll);
    s << indent << "vx: ";
    Printer<double>::stream(s, indent + "  ", v.vx);
    s << indent << "vy: ";
    Printer<double>::stream(s, indent + "  ", v.vy);
    s << indent << "vz: ";
    Printer<double>::stream(s, indent + "  ", v.vz);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOVEMENT_MSGS_MESSAGE_LIPPARAMSMSG_H
