// Generated by gencpp from file movement_msgs/LoadHumanoidPropertiesSrvRequest.msg
// DO NOT EDIT!


#ifndef MOVEMENT_MSGS_MESSAGE_LOADHUMANOIDPROPERTIESSRVREQUEST_H
#define MOVEMENT_MSGS_MESSAGE_LOADHUMANOIDPROPERTIESSRVREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <movement_msgs/JointStateMsg.h>
#include <movement_msgs/EndEffStateMsg.h>
#include <geometry_msgs/Point.h>

namespace movement_msgs
{
template <class ContainerAllocator>
struct LoadHumanoidPropertiesSrvRequest_
{
  typedef LoadHumanoidPropertiesSrvRequest_<ContainerAllocator> Type;

  LoadHumanoidPropertiesSrvRequest_()
    : header()
    , joint()
    , endEff()
    , ikRef()
    , calcZMP(false)
    , calcCOM(false)
    , calcInvDyn(false)
    , setIkRef(false)
    , setComAsIkRef(false)  {
    }
  LoadHumanoidPropertiesSrvRequest_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , joint(_alloc)
    , endEff(_alloc)
    , ikRef(_alloc)
    , calcZMP(false)
    , calcCOM(false)
    , calcInvDyn(false)
    , setIkRef(false)
    , setComAsIkRef(false)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::movement_msgs::JointStateMsg_<ContainerAllocator>  _joint_type;
  _joint_type joint;

   typedef  ::movement_msgs::EndEffStateMsg_<ContainerAllocator>  _endEff_type;
  _endEff_type endEff;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _ikRef_type;
  _ikRef_type ikRef;

   typedef uint8_t _calcZMP_type;
  _calcZMP_type calcZMP;

   typedef uint8_t _calcCOM_type;
  _calcCOM_type calcCOM;

   typedef uint8_t _calcInvDyn_type;
  _calcInvDyn_type calcInvDyn;

   typedef uint8_t _setIkRef_type;
  _setIkRef_type setIkRef;

   typedef uint8_t _setComAsIkRef_type;
  _setComAsIkRef_type setComAsIkRef;





  typedef boost::shared_ptr< ::movement_msgs::LoadHumanoidPropertiesSrvRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::movement_msgs::LoadHumanoidPropertiesSrvRequest_<ContainerAllocator> const> ConstPtr;

}; // struct LoadHumanoidPropertiesSrvRequest_

typedef ::movement_msgs::LoadHumanoidPropertiesSrvRequest_<std::allocator<void> > LoadHumanoidPropertiesSrvRequest;

typedef boost::shared_ptr< ::movement_msgs::LoadHumanoidPropertiesSrvRequest > LoadHumanoidPropertiesSrvRequestPtr;
typedef boost::shared_ptr< ::movement_msgs::LoadHumanoidPropertiesSrvRequest const> LoadHumanoidPropertiesSrvRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::movement_msgs::LoadHumanoidPropertiesSrvRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::movement_msgs::LoadHumanoidPropertiesSrvRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::movement_msgs::LoadHumanoidPropertiesSrvRequest_<ContainerAllocator1> & lhs, const ::movement_msgs::LoadHumanoidPropertiesSrvRequest_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.joint == rhs.joint &&
    lhs.endEff == rhs.endEff &&
    lhs.ikRef == rhs.ikRef &&
    lhs.calcZMP == rhs.calcZMP &&
    lhs.calcCOM == rhs.calcCOM &&
    lhs.calcInvDyn == rhs.calcInvDyn &&
    lhs.setIkRef == rhs.setIkRef &&
    lhs.setComAsIkRef == rhs.setComAsIkRef;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::movement_msgs::LoadHumanoidPropertiesSrvRequest_<ContainerAllocator1> & lhs, const ::movement_msgs::LoadHumanoidPropertiesSrvRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace movement_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::movement_msgs::LoadHumanoidPropertiesSrvRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::movement_msgs::LoadHumanoidPropertiesSrvRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::movement_msgs::LoadHumanoidPropertiesSrvRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::movement_msgs::LoadHumanoidPropertiesSrvRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::movement_msgs::LoadHumanoidPropertiesSrvRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::movement_msgs::LoadHumanoidPropertiesSrvRequest_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::movement_msgs::LoadHumanoidPropertiesSrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1843db99d8df7f28f948fe93eedb228a";
  }

  static const char* value(const ::movement_msgs::LoadHumanoidPropertiesSrvRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1843db99d8df7f28ULL;
  static const uint64_t static_value2 = 0xf948fe93eedb228aULL;
};

template<class ContainerAllocator>
struct DataType< ::movement_msgs::LoadHumanoidPropertiesSrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "movement_msgs/LoadHumanoidPropertiesSrvRequest";
  }

  static const char* value(const ::movement_msgs::LoadHumanoidPropertiesSrvRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::movement_msgs::LoadHumanoidPropertiesSrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header                       header\n"
"movement_msgs/JointStateMsg  joint\n"
"movement_msgs/EndEffStateMsg endEff\n"
"geometry_msgs/Point          ikRef\n"
"\n"
"bool                         calcZMP\n"
"bool                         calcCOM\n"
"bool                         calcInvDyn\n"
"bool                         setIkRef\n"
"bool                         setComAsIkRef\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: movement_msgs/JointStateMsg\n"
"Header    header\n"
"float64[] pos\n"
"float64[] vel\n"
"float64[] acc\n"
"float64[] torq\n"
"string  writeCommand\n"
"string        kind\n"
"string        readCommand\n"
"int32         type\n"
"int32         source\n"
"float64       dt\n"
"\n"
"\n"
"================================================================================\n"
"MSG: movement_msgs/EndEffStateMsg\n"
"Header                     header\n"
"movement_msgs/EndEffMsg[]  endEff\n"
"\n"
"================================================================================\n"
"MSG: movement_msgs/EndEffMsg\n"
"geometry_msgs/Point  pos\n"
"geometry_msgs/Point  vel\n"
"geometry_msgs/Point  acc\n"
"geometry_msgs/Point  rot\n"
"int32                type\n"
"int32                flag\n"
"float64              dt\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::movement_msgs::LoadHumanoidPropertiesSrvRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::movement_msgs::LoadHumanoidPropertiesSrvRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.joint);
      stream.next(m.endEff);
      stream.next(m.ikRef);
      stream.next(m.calcZMP);
      stream.next(m.calcCOM);
      stream.next(m.calcInvDyn);
      stream.next(m.setIkRef);
      stream.next(m.setComAsIkRef);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LoadHumanoidPropertiesSrvRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::movement_msgs::LoadHumanoidPropertiesSrvRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::movement_msgs::LoadHumanoidPropertiesSrvRequest_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "joint: ";
    s << std::endl;
    Printer< ::movement_msgs::JointStateMsg_<ContainerAllocator> >::stream(s, indent + "  ", v.joint);
    s << indent << "endEff: ";
    s << std::endl;
    Printer< ::movement_msgs::EndEffStateMsg_<ContainerAllocator> >::stream(s, indent + "  ", v.endEff);
    s << indent << "ikRef: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.ikRef);
    s << indent << "calcZMP: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.calcZMP);
    s << indent << "calcCOM: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.calcCOM);
    s << indent << "calcInvDyn: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.calcInvDyn);
    s << indent << "setIkRef: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.setIkRef);
    s << indent << "setComAsIkRef: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.setComAsIkRef);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOVEMENT_MSGS_MESSAGE_LOADHUMANOIDPROPERTIESSRVREQUEST_H
