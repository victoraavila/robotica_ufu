// Generated by gencpp from file movement_msgs/LoadMapConfigsSrvRequest.msg
// DO NOT EDIT!


#ifndef MOVEMENT_MSGS_MESSAGE_LOADMAPCONFIGSSRVREQUEST_H
#define MOVEMENT_MSGS_MESSAGE_LOADMAPCONFIGSSRVREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace movement_msgs
{
template <class ContainerAllocator>
struct LoadMapConfigsSrvRequest_
{
  typedef LoadMapConfigsSrvRequest_<ContainerAllocator> Type;

  LoadMapConfigsSrvRequest_()
    : header()
    , fEnum()
    , fRobot()
    , fUrdf()
    , fIk()
    , update(false)  {
    }
  LoadMapConfigsSrvRequest_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , fEnum(_alloc)
    , fRobot(_alloc)
    , fUrdf(_alloc)
    , fIk(_alloc)
    , update(false)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _fEnum_type;
  _fEnum_type fEnum;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _fRobot_type;
  _fRobot_type fRobot;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _fUrdf_type;
  _fUrdf_type fUrdf;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _fIk_type;
  _fIk_type fIk;

   typedef uint8_t _update_type;
  _update_type update;





  typedef boost::shared_ptr< ::movement_msgs::LoadMapConfigsSrvRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::movement_msgs::LoadMapConfigsSrvRequest_<ContainerAllocator> const> ConstPtr;

}; // struct LoadMapConfigsSrvRequest_

typedef ::movement_msgs::LoadMapConfigsSrvRequest_<std::allocator<void> > LoadMapConfigsSrvRequest;

typedef boost::shared_ptr< ::movement_msgs::LoadMapConfigsSrvRequest > LoadMapConfigsSrvRequestPtr;
typedef boost::shared_ptr< ::movement_msgs::LoadMapConfigsSrvRequest const> LoadMapConfigsSrvRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::movement_msgs::LoadMapConfigsSrvRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::movement_msgs::LoadMapConfigsSrvRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::movement_msgs::LoadMapConfigsSrvRequest_<ContainerAllocator1> & lhs, const ::movement_msgs::LoadMapConfigsSrvRequest_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.fEnum == rhs.fEnum &&
    lhs.fRobot == rhs.fRobot &&
    lhs.fUrdf == rhs.fUrdf &&
    lhs.fIk == rhs.fIk &&
    lhs.update == rhs.update;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::movement_msgs::LoadMapConfigsSrvRequest_<ContainerAllocator1> & lhs, const ::movement_msgs::LoadMapConfigsSrvRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace movement_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::movement_msgs::LoadMapConfigsSrvRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::movement_msgs::LoadMapConfigsSrvRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::movement_msgs::LoadMapConfigsSrvRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::movement_msgs::LoadMapConfigsSrvRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::movement_msgs::LoadMapConfigsSrvRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::movement_msgs::LoadMapConfigsSrvRequest_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::movement_msgs::LoadMapConfigsSrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "87df5d2fa1bb2cecad32bfb2cadd2eb6";
  }

  static const char* value(const ::movement_msgs::LoadMapConfigsSrvRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x87df5d2fa1bb2cecULL;
  static const uint64_t static_value2 = 0xad32bfb2cadd2eb6ULL;
};

template<class ContainerAllocator>
struct DataType< ::movement_msgs::LoadMapConfigsSrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "movement_msgs/LoadMapConfigsSrvRequest";
  }

  static const char* value(const ::movement_msgs::LoadMapConfigsSrvRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::movement_msgs::LoadMapConfigsSrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"string fEnum\n"
"string fRobot\n"
"string fUrdf\n"
"string fIk\n"
"bool   update\n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::movement_msgs::LoadMapConfigsSrvRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::movement_msgs::LoadMapConfigsSrvRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.fEnum);
      stream.next(m.fRobot);
      stream.next(m.fUrdf);
      stream.next(m.fIk);
      stream.next(m.update);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LoadMapConfigsSrvRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::movement_msgs::LoadMapConfigsSrvRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::movement_msgs::LoadMapConfigsSrvRequest_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "fEnum: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.fEnum);
    s << indent << "fRobot: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.fRobot);
    s << indent << "fUrdf: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.fUrdf);
    s << indent << "fIk: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.fIk);
    s << indent << "update: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.update);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOVEMENT_MSGS_MESSAGE_LOADMAPCONFIGSSRVREQUEST_H
