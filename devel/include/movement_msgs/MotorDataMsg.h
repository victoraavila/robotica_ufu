// Generated by gencpp from file movement_msgs/MotorDataMsg.msg
// DO NOT EDIT!


#ifndef MOVEMENT_MSGS_MESSAGE_MOTORDATAMSG_H
#define MOVEMENT_MSGS_MESSAGE_MOTORDATAMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace movement_msgs
{
template <class ContainerAllocator>
struct MotorDataMsg_
{
  typedef MotorDataMsg_<ContainerAllocator> Type;

  MotorDataMsg_()
    : source()
    , command()
    , data()
    , vel()  {
      data.assign(0.0);

      vel.assign(0.0);
  }
  MotorDataMsg_(const ContainerAllocator& _alloc)
    : source(_alloc)
    , command(_alloc)
    , data()
    , vel()  {
  (void)_alloc;
      data.assign(0.0);

      vel.assign(0.0);
  }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _source_type;
  _source_type source;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _command_type;
  _command_type command;

   typedef boost::array<double, 21>  _data_type;
  _data_type data;

   typedef boost::array<double, 21>  _vel_type;
  _vel_type vel;





  typedef boost::shared_ptr< ::movement_msgs::MotorDataMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::movement_msgs::MotorDataMsg_<ContainerAllocator> const> ConstPtr;

}; // struct MotorDataMsg_

typedef ::movement_msgs::MotorDataMsg_<std::allocator<void> > MotorDataMsg;

typedef boost::shared_ptr< ::movement_msgs::MotorDataMsg > MotorDataMsgPtr;
typedef boost::shared_ptr< ::movement_msgs::MotorDataMsg const> MotorDataMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::movement_msgs::MotorDataMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::movement_msgs::MotorDataMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::movement_msgs::MotorDataMsg_<ContainerAllocator1> & lhs, const ::movement_msgs::MotorDataMsg_<ContainerAllocator2> & rhs)
{
  return lhs.source == rhs.source &&
    lhs.command == rhs.command &&
    lhs.data == rhs.data &&
    lhs.vel == rhs.vel;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::movement_msgs::MotorDataMsg_<ContainerAllocator1> & lhs, const ::movement_msgs::MotorDataMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace movement_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::movement_msgs::MotorDataMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::movement_msgs::MotorDataMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::movement_msgs::MotorDataMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::movement_msgs::MotorDataMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::movement_msgs::MotorDataMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::movement_msgs::MotorDataMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::movement_msgs::MotorDataMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6feb0c31507e3a5a74f2b1241e9d5301";
  }

  static const char* value(const ::movement_msgs::MotorDataMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6feb0c31507e3a5aULL;
  static const uint64_t static_value2 = 0x74f2b1241e9d5301ULL;
};

template<class ContainerAllocator>
struct DataType< ::movement_msgs::MotorDataMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "movement_msgs/MotorDataMsg";
  }

  static const char* value(const ::movement_msgs::MotorDataMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::movement_msgs::MotorDataMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string source\n"
"string command\n"
"float64[21] data\n"
"float64[21] vel\n"
"\n"
"\n"
;
  }

  static const char* value(const ::movement_msgs::MotorDataMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::movement_msgs::MotorDataMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.source);
      stream.next(m.command);
      stream.next(m.data);
      stream.next(m.vel);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MotorDataMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::movement_msgs::MotorDataMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::movement_msgs::MotorDataMsg_<ContainerAllocator>& v)
  {
    s << indent << "source: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.source);
    s << indent << "command: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.command);
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.data[i]);
    }
    s << indent << "vel[]" << std::endl;
    for (size_t i = 0; i < v.vel.size(); ++i)
    {
      s << indent << "  vel[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.vel[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOVEMENT_MSGS_MESSAGE_MOTORDATAMSG_H
