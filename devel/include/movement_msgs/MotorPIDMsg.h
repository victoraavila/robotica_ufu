// Generated by gencpp from file movement_msgs/MotorPIDMsg.msg
// DO NOT EDIT!


#ifndef MOVEMENT_MSGS_MESSAGE_MOTORPIDMSG_H
#define MOVEMENT_MSGS_MESSAGE_MOTORPIDMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace movement_msgs
{
template <class ContainerAllocator>
struct MotorPIDMsg_
{
  typedef MotorPIDMsg_<ContainerAllocator> Type;

  MotorPIDMsg_()
    : kp()
    , ki()
    , kd()  {
    }
  MotorPIDMsg_(const ContainerAllocator& _alloc)
    : kp(_alloc)
    , ki(_alloc)
    , kd(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _kp_type;
  _kp_type kp;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _ki_type;
  _ki_type ki;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _kd_type;
  _kd_type kd;





  typedef boost::shared_ptr< ::movement_msgs::MotorPIDMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::movement_msgs::MotorPIDMsg_<ContainerAllocator> const> ConstPtr;

}; // struct MotorPIDMsg_

typedef ::movement_msgs::MotorPIDMsg_<std::allocator<void> > MotorPIDMsg;

typedef boost::shared_ptr< ::movement_msgs::MotorPIDMsg > MotorPIDMsgPtr;
typedef boost::shared_ptr< ::movement_msgs::MotorPIDMsg const> MotorPIDMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::movement_msgs::MotorPIDMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::movement_msgs::MotorPIDMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::movement_msgs::MotorPIDMsg_<ContainerAllocator1> & lhs, const ::movement_msgs::MotorPIDMsg_<ContainerAllocator2> & rhs)
{
  return lhs.kp == rhs.kp &&
    lhs.ki == rhs.ki &&
    lhs.kd == rhs.kd;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::movement_msgs::MotorPIDMsg_<ContainerAllocator1> & lhs, const ::movement_msgs::MotorPIDMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace movement_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::movement_msgs::MotorPIDMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::movement_msgs::MotorPIDMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::movement_msgs::MotorPIDMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::movement_msgs::MotorPIDMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::movement_msgs::MotorPIDMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::movement_msgs::MotorPIDMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::movement_msgs::MotorPIDMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4792326033ccf840aaf0bded51af3ebe";
  }

  static const char* value(const ::movement_msgs::MotorPIDMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4792326033ccf840ULL;
  static const uint64_t static_value2 = 0xaaf0bded51af3ebeULL;
};

template<class ContainerAllocator>
struct DataType< ::movement_msgs::MotorPIDMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "movement_msgs/MotorPIDMsg";
  }

  static const char* value(const ::movement_msgs::MotorPIDMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::movement_msgs::MotorPIDMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[]       kp\n"
"float64[]       ki\n"
"float64[]       kd\n"
"\n"
"\n"
;
  }

  static const char* value(const ::movement_msgs::MotorPIDMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::movement_msgs::MotorPIDMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.kp);
      stream.next(m.ki);
      stream.next(m.kd);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MotorPIDMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::movement_msgs::MotorPIDMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::movement_msgs::MotorPIDMsg_<ContainerAllocator>& v)
  {
    s << indent << "kp[]" << std::endl;
    for (size_t i = 0; i < v.kp.size(); ++i)
    {
      s << indent << "  kp[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.kp[i]);
    }
    s << indent << "ki[]" << std::endl;
    for (size_t i = 0; i < v.ki.size(); ++i)
    {
      s << indent << "  ki[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.ki[i]);
    }
    s << indent << "kd[]" << std::endl;
    for (size_t i = 0; i < v.kd.size(); ++i)
    {
      s << indent << "  kd[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.kd[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOVEMENT_MSGS_MESSAGE_MOTORPIDMSG_H
