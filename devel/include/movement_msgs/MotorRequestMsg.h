// Generated by gencpp from file movement_msgs/MotorRequestMsg.msg
// DO NOT EDIT!


#ifndef MOVEMENT_MSGS_MESSAGE_MOTORREQUESTMSG_H
#define MOVEMENT_MSGS_MESSAGE_MOTORREQUESTMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace movement_msgs
{
template <class ContainerAllocator>
struct MotorRequestMsg_
{
  typedef MotorRequestMsg_<ContainerAllocator> Type;

  MotorRequestMsg_()
    : source()
    , writeCommand()
    , data()
    , velocity()
    , readCommand()  {
    }
  MotorRequestMsg_(const ContainerAllocator& _alloc)
    : source(_alloc)
    , writeCommand(_alloc)
    , data(_alloc)
    , velocity(_alloc)
    , readCommand(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _source_type;
  _source_type source;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _writeCommand_type;
  _writeCommand_type writeCommand;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _data_type;
  _data_type data;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _velocity_type;
  _velocity_type velocity;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _readCommand_type;
  _readCommand_type readCommand;





  typedef boost::shared_ptr< ::movement_msgs::MotorRequestMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::movement_msgs::MotorRequestMsg_<ContainerAllocator> const> ConstPtr;

}; // struct MotorRequestMsg_

typedef ::movement_msgs::MotorRequestMsg_<std::allocator<void> > MotorRequestMsg;

typedef boost::shared_ptr< ::movement_msgs::MotorRequestMsg > MotorRequestMsgPtr;
typedef boost::shared_ptr< ::movement_msgs::MotorRequestMsg const> MotorRequestMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::movement_msgs::MotorRequestMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::movement_msgs::MotorRequestMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::movement_msgs::MotorRequestMsg_<ContainerAllocator1> & lhs, const ::movement_msgs::MotorRequestMsg_<ContainerAllocator2> & rhs)
{
  return lhs.source == rhs.source &&
    lhs.writeCommand == rhs.writeCommand &&
    lhs.data == rhs.data &&
    lhs.velocity == rhs.velocity &&
    lhs.readCommand == rhs.readCommand;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::movement_msgs::MotorRequestMsg_<ContainerAllocator1> & lhs, const ::movement_msgs::MotorRequestMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace movement_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::movement_msgs::MotorRequestMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::movement_msgs::MotorRequestMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::movement_msgs::MotorRequestMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::movement_msgs::MotorRequestMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::movement_msgs::MotorRequestMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::movement_msgs::MotorRequestMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::movement_msgs::MotorRequestMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "298878b70cf41c7555ec4b3aacf8d255";
  }

  static const char* value(const ::movement_msgs::MotorRequestMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x298878b70cf41c75ULL;
  static const uint64_t static_value2 = 0x55ec4b3aacf8d255ULL;
};

template<class ContainerAllocator>
struct DataType< ::movement_msgs::MotorRequestMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "movement_msgs/MotorRequestMsg";
  }

  static const char* value(const ::movement_msgs::MotorRequestMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::movement_msgs::MotorRequestMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string source\n"
"string writeCommand\n"
"float64[] data\n"
"float64[] velocity\n"
"string readCommand\n"
"\n"
;
  }

  static const char* value(const ::movement_msgs::MotorRequestMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::movement_msgs::MotorRequestMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.source);
      stream.next(m.writeCommand);
      stream.next(m.data);
      stream.next(m.velocity);
      stream.next(m.readCommand);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MotorRequestMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::movement_msgs::MotorRequestMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::movement_msgs::MotorRequestMsg_<ContainerAllocator>& v)
  {
    s << indent << "source: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.source);
    s << indent << "writeCommand: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.writeCommand);
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.data[i]);
    }
    s << indent << "velocity[]" << std::endl;
    for (size_t i = 0; i < v.velocity.size(); ++i)
    {
      s << indent << "  velocity[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.velocity[i]);
    }
    s << indent << "readCommand: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.readCommand);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOVEMENT_MSGS_MESSAGE_MOTORREQUESTMSG_H
