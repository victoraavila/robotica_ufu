// Generated by gencpp from file movement_msgs/MotorSetSrvRequest.msg
// DO NOT EDIT!


#ifndef MOVEMENT_MSGS_MESSAGE_MOTORSETSRVREQUEST_H
#define MOVEMENT_MSGS_MESSAGE_MOTORSETSRVREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace movement_msgs
{
template <class ContainerAllocator>
struct MotorSetSrvRequest_
{
  typedef MotorSetSrvRequest_<ContainerAllocator> Type;

  MotorSetSrvRequest_()
    : toGazebo(false)
    , toRobot(false)
    , page()
    , pose()  {
    }
  MotorSetSrvRequest_(const ContainerAllocator& _alloc)
    : toGazebo(false)
    , toRobot(false)
    , page(_alloc)
    , pose(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _toGazebo_type;
  _toGazebo_type toGazebo;

   typedef uint8_t _toRobot_type;
  _toRobot_type toRobot;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _page_type;
  _page_type page;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _pose_type;
  _pose_type pose;





  typedef boost::shared_ptr< ::movement_msgs::MotorSetSrvRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::movement_msgs::MotorSetSrvRequest_<ContainerAllocator> const> ConstPtr;

}; // struct MotorSetSrvRequest_

typedef ::movement_msgs::MotorSetSrvRequest_<std::allocator<void> > MotorSetSrvRequest;

typedef boost::shared_ptr< ::movement_msgs::MotorSetSrvRequest > MotorSetSrvRequestPtr;
typedef boost::shared_ptr< ::movement_msgs::MotorSetSrvRequest const> MotorSetSrvRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::movement_msgs::MotorSetSrvRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::movement_msgs::MotorSetSrvRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::movement_msgs::MotorSetSrvRequest_<ContainerAllocator1> & lhs, const ::movement_msgs::MotorSetSrvRequest_<ContainerAllocator2> & rhs)
{
  return lhs.toGazebo == rhs.toGazebo &&
    lhs.toRobot == rhs.toRobot &&
    lhs.page == rhs.page &&
    lhs.pose == rhs.pose;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::movement_msgs::MotorSetSrvRequest_<ContainerAllocator1> & lhs, const ::movement_msgs::MotorSetSrvRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace movement_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::movement_msgs::MotorSetSrvRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::movement_msgs::MotorSetSrvRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::movement_msgs::MotorSetSrvRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::movement_msgs::MotorSetSrvRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::movement_msgs::MotorSetSrvRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::movement_msgs::MotorSetSrvRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::movement_msgs::MotorSetSrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ec1859e255b743457ecbab4cc3de4b47";
  }

  static const char* value(const ::movement_msgs::MotorSetSrvRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xec1859e255b74345ULL;
  static const uint64_t static_value2 = 0x7ecbab4cc3de4b47ULL;
};

template<class ContainerAllocator>
struct DataType< ::movement_msgs::MotorSetSrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "movement_msgs/MotorSetSrvRequest";
  }

  static const char* value(const ::movement_msgs::MotorSetSrvRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::movement_msgs::MotorSetSrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool   toGazebo\n"
"bool   toRobot\n"
"string page\n"
"string pose\n"
;
  }

  static const char* value(const ::movement_msgs::MotorSetSrvRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::movement_msgs::MotorSetSrvRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.toGazebo);
      stream.next(m.toRobot);
      stream.next(m.page);
      stream.next(m.pose);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MotorSetSrvRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::movement_msgs::MotorSetSrvRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::movement_msgs::MotorSetSrvRequest_<ContainerAllocator>& v)
  {
    s << indent << "toGazebo: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.toGazebo);
    s << indent << "toRobot: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.toRobot);
    s << indent << "page: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.page);
    s << indent << "pose: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.pose);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOVEMENT_MSGS_MESSAGE_MOTORSETSRVREQUEST_H
