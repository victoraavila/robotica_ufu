// Generated by gencpp from file movement_msgs/OpenCmRequest.msg
// DO NOT EDIT!


#ifndef MOVEMENT_MSGS_MESSAGE_OPENCMREQUEST_H
#define MOVEMENT_MSGS_MESSAGE_OPENCMREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace movement_msgs
{
template <class ContainerAllocator>
struct OpenCmRequest_
{
  typedef OpenCmRequest_<ContainerAllocator> Type;

  OpenCmRequest_()
    : write(0)
    , data()
    , vel()
    , read(0)  {
      data.assign(0);

      vel.assign(0);
  }
  OpenCmRequest_(const ContainerAllocator& _alloc)
    : write(0)
    , data()
    , vel()
    , read(0)  {
  (void)_alloc;
      data.assign(0);

      vel.assign(0);
  }



   typedef uint8_t _write_type;
  _write_type write;

   typedef boost::array<uint16_t, 20>  _data_type;
  _data_type data;

   typedef boost::array<uint16_t, 20>  _vel_type;
  _vel_type vel;

   typedef uint8_t _read_type;
  _read_type read;





  typedef boost::shared_ptr< ::movement_msgs::OpenCmRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::movement_msgs::OpenCmRequest_<ContainerAllocator> const> ConstPtr;

}; // struct OpenCmRequest_

typedef ::movement_msgs::OpenCmRequest_<std::allocator<void> > OpenCmRequest;

typedef boost::shared_ptr< ::movement_msgs::OpenCmRequest > OpenCmRequestPtr;
typedef boost::shared_ptr< ::movement_msgs::OpenCmRequest const> OpenCmRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::movement_msgs::OpenCmRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::movement_msgs::OpenCmRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::movement_msgs::OpenCmRequest_<ContainerAllocator1> & lhs, const ::movement_msgs::OpenCmRequest_<ContainerAllocator2> & rhs)
{
  return lhs.write == rhs.write &&
    lhs.data == rhs.data &&
    lhs.vel == rhs.vel &&
    lhs.read == rhs.read;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::movement_msgs::OpenCmRequest_<ContainerAllocator1> & lhs, const ::movement_msgs::OpenCmRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace movement_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::movement_msgs::OpenCmRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::movement_msgs::OpenCmRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::movement_msgs::OpenCmRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::movement_msgs::OpenCmRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::movement_msgs::OpenCmRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::movement_msgs::OpenCmRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::movement_msgs::OpenCmRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e1fa8516a67ccbbb759f9b9fe6ad3896";
  }

  static const char* value(const ::movement_msgs::OpenCmRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe1fa8516a67ccbbbULL;
  static const uint64_t static_value2 = 0x759f9b9fe6ad3896ULL;
};

template<class ContainerAllocator>
struct DataType< ::movement_msgs::OpenCmRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "movement_msgs/OpenCmRequest";
  }

  static const char* value(const ::movement_msgs::OpenCmRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::movement_msgs::OpenCmRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 write\n"
"uint16[20] data\n"
"uint16[20] vel\n"
"uint8 read \n"
;
  }

  static const char* value(const ::movement_msgs::OpenCmRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::movement_msgs::OpenCmRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.write);
      stream.next(m.data);
      stream.next(m.vel);
      stream.next(m.read);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct OpenCmRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::movement_msgs::OpenCmRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::movement_msgs::OpenCmRequest_<ContainerAllocator>& v)
  {
    s << indent << "write: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.write);
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.data[i]);
    }
    s << indent << "vel[]" << std::endl;
    for (size_t i = 0; i < v.vel.size(); ++i)
    {
      s << indent << "  vel[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.vel[i]);
    }
    s << indent << "read: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.read);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOVEMENT_MSGS_MESSAGE_OPENCMREQUEST_H
