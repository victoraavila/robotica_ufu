// Generated by gencpp from file movement_msgs/OpencmRequestMsg.msg
// DO NOT EDIT!


#ifndef MOVEMENT_MSGS_MESSAGE_OPENCMREQUESTMSG_H
#define MOVEMENT_MSGS_MESSAGE_OPENCMREQUESTMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace movement_msgs
{
template <class ContainerAllocator>
struct OpencmRequestMsg_
{
  typedef OpencmRequestMsg_<ContainerAllocator> Type;

  OpencmRequestMsg_()
    : source()
    , commandRead()
    , pos(0)
    , data()
    , velocity()  {
      data.assign(0);

      velocity.assign(0);
  }
  OpencmRequestMsg_(const ContainerAllocator& _alloc)
    : source(_alloc)
    , commandRead(_alloc)
    , pos(0)
    , data()
    , velocity()  {
  (void)_alloc;
      data.assign(0);

      velocity.assign(0);
  }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _source_type;
  _source_type source;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _commandRead_type;
  _commandRead_type commandRead;

   typedef int16_t _pos_type;
  _pos_type pos;

   typedef boost::array<int16_t, 20>  _data_type;
  _data_type data;

   typedef boost::array<int16_t, 20>  _velocity_type;
  _velocity_type velocity;





  typedef boost::shared_ptr< ::movement_msgs::OpencmRequestMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::movement_msgs::OpencmRequestMsg_<ContainerAllocator> const> ConstPtr;

}; // struct OpencmRequestMsg_

typedef ::movement_msgs::OpencmRequestMsg_<std::allocator<void> > OpencmRequestMsg;

typedef boost::shared_ptr< ::movement_msgs::OpencmRequestMsg > OpencmRequestMsgPtr;
typedef boost::shared_ptr< ::movement_msgs::OpencmRequestMsg const> OpencmRequestMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::movement_msgs::OpencmRequestMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::movement_msgs::OpencmRequestMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::movement_msgs::OpencmRequestMsg_<ContainerAllocator1> & lhs, const ::movement_msgs::OpencmRequestMsg_<ContainerAllocator2> & rhs)
{
  return lhs.source == rhs.source &&
    lhs.commandRead == rhs.commandRead &&
    lhs.pos == rhs.pos &&
    lhs.data == rhs.data &&
    lhs.velocity == rhs.velocity;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::movement_msgs::OpencmRequestMsg_<ContainerAllocator1> & lhs, const ::movement_msgs::OpencmRequestMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace movement_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::movement_msgs::OpencmRequestMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::movement_msgs::OpencmRequestMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::movement_msgs::OpencmRequestMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::movement_msgs::OpencmRequestMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::movement_msgs::OpencmRequestMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::movement_msgs::OpencmRequestMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::movement_msgs::OpencmRequestMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "20e27cbf8cbb76dbd5488b16e1291d1b";
  }

  static const char* value(const ::movement_msgs::OpencmRequestMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x20e27cbf8cbb76dbULL;
  static const uint64_t static_value2 = 0xd5488b16e1291d1bULL;
};

template<class ContainerAllocator>
struct DataType< ::movement_msgs::OpencmRequestMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "movement_msgs/OpencmRequestMsg";
  }

  static const char* value(const ::movement_msgs::OpencmRequestMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::movement_msgs::OpencmRequestMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string source\n"
"string commandRead\n"
"int16 pos\n"
"int16[20] data\n"
"int16[20] velocity\n"
;
  }

  static const char* value(const ::movement_msgs::OpencmRequestMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::movement_msgs::OpencmRequestMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.source);
      stream.next(m.commandRead);
      stream.next(m.pos);
      stream.next(m.data);
      stream.next(m.velocity);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct OpencmRequestMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::movement_msgs::OpencmRequestMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::movement_msgs::OpencmRequestMsg_<ContainerAllocator>& v)
  {
    s << indent << "source: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.source);
    s << indent << "commandRead: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.commandRead);
    s << indent << "pos: ";
    Printer<int16_t>::stream(s, indent + "  ", v.pos);
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.data[i]);
    }
    s << indent << "velocity[]" << std::endl;
    for (size_t i = 0; i < v.velocity.size(); ++i)
    {
      s << indent << "  velocity[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.velocity[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOVEMENT_MSGS_MESSAGE_OPENCMREQUESTMSG_H
