// Generated by gencpp from file movement_msgs/OpencmResponseMsg.msg
// DO NOT EDIT!


#ifndef MOVEMENT_MSGS_MESSAGE_OPENCMRESPONSEMSG_H
#define MOVEMENT_MSGS_MESSAGE_OPENCMRESPONSEMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace movement_msgs
{
template <class ContainerAllocator>
struct OpencmResponseMsg_
{
  typedef OpencmResponseMsg_<ContainerAllocator> Type;

  OpencmResponseMsg_()
    : status()
    , data()
    , velocity()
    , torque()
    , model()  {
      data.assign(0);

      velocity.assign(0);

      torque.assign(0);

      model.assign(0);
  }
  OpencmResponseMsg_(const ContainerAllocator& _alloc)
    : status(_alloc)
    , data()
    , velocity()
    , torque()
    , model()  {
  (void)_alloc;
      data.assign(0);

      velocity.assign(0);

      torque.assign(0);

      model.assign(0);
  }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _status_type;
  _status_type status;

   typedef boost::array<int16_t, 20>  _data_type;
  _data_type data;

   typedef boost::array<int16_t, 20>  _velocity_type;
  _velocity_type velocity;

   typedef boost::array<int16_t, 20>  _torque_type;
  _torque_type torque;

   typedef boost::array<int16_t, 20>  _model_type;
  _model_type model;





  typedef boost::shared_ptr< ::movement_msgs::OpencmResponseMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::movement_msgs::OpencmResponseMsg_<ContainerAllocator> const> ConstPtr;

}; // struct OpencmResponseMsg_

typedef ::movement_msgs::OpencmResponseMsg_<std::allocator<void> > OpencmResponseMsg;

typedef boost::shared_ptr< ::movement_msgs::OpencmResponseMsg > OpencmResponseMsgPtr;
typedef boost::shared_ptr< ::movement_msgs::OpencmResponseMsg const> OpencmResponseMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::movement_msgs::OpencmResponseMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::movement_msgs::OpencmResponseMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::movement_msgs::OpencmResponseMsg_<ContainerAllocator1> & lhs, const ::movement_msgs::OpencmResponseMsg_<ContainerAllocator2> & rhs)
{
  return lhs.status == rhs.status &&
    lhs.data == rhs.data &&
    lhs.velocity == rhs.velocity &&
    lhs.torque == rhs.torque &&
    lhs.model == rhs.model;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::movement_msgs::OpencmResponseMsg_<ContainerAllocator1> & lhs, const ::movement_msgs::OpencmResponseMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace movement_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::movement_msgs::OpencmResponseMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::movement_msgs::OpencmResponseMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::movement_msgs::OpencmResponseMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::movement_msgs::OpencmResponseMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::movement_msgs::OpencmResponseMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::movement_msgs::OpencmResponseMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::movement_msgs::OpencmResponseMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a00a68475e17ea797d25243ce61949c8";
  }

  static const char* value(const ::movement_msgs::OpencmResponseMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa00a68475e17ea79ULL;
  static const uint64_t static_value2 = 0x7d25243ce61949c8ULL;
};

template<class ContainerAllocator>
struct DataType< ::movement_msgs::OpencmResponseMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "movement_msgs/OpencmResponseMsg";
  }

  static const char* value(const ::movement_msgs::OpencmResponseMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::movement_msgs::OpencmResponseMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string status\n"
"int16[20] data\n"
"int16[20] velocity\n"
"int16[20] torque\n"
"int16[20] model\n"
;
  }

  static const char* value(const ::movement_msgs::OpencmResponseMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::movement_msgs::OpencmResponseMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.status);
      stream.next(m.data);
      stream.next(m.velocity);
      stream.next(m.torque);
      stream.next(m.model);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct OpencmResponseMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::movement_msgs::OpencmResponseMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::movement_msgs::OpencmResponseMsg_<ContainerAllocator>& v)
  {
    s << indent << "status: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.status);
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.data[i]);
    }
    s << indent << "velocity[]" << std::endl;
    for (size_t i = 0; i < v.velocity.size(); ++i)
    {
      s << indent << "  velocity[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.velocity[i]);
    }
    s << indent << "torque[]" << std::endl;
    for (size_t i = 0; i < v.torque.size(); ++i)
    {
      s << indent << "  torque[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.torque[i]);
    }
    s << indent << "model[]" << std::endl;
    for (size_t i = 0; i < v.model.size(); ++i)
    {
      s << indent << "  model[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.model[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOVEMENT_MSGS_MESSAGE_OPENCMRESPONSEMSG_H
