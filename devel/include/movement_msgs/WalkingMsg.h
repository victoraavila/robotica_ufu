// Generated by gencpp from file movement_msgs/WalkingMsg.msg
// DO NOT EDIT!


#ifndef MOVEMENT_MSGS_MESSAGE_WALKINGMSG_H
#define MOVEMENT_MSGS_MESSAGE_WALKINGMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace movement_msgs
{
template <class ContainerAllocator>
struct WalkingMsg_
{
  typedef WalkingMsg_<ContainerAllocator> Type;

  WalkingMsg_()
    : go(0)
    , vx(0.0)
    , vy(0.0)
    , vz(0.0)  {
    }
  WalkingMsg_(const ContainerAllocator& _alloc)
    : go(0)
    , vx(0.0)
    , vy(0.0)
    , vz(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _go_type;
  _go_type go;

   typedef double _vx_type;
  _vx_type vx;

   typedef double _vy_type;
  _vy_type vy;

   typedef double _vz_type;
  _vz_type vz;





  typedef boost::shared_ptr< ::movement_msgs::WalkingMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::movement_msgs::WalkingMsg_<ContainerAllocator> const> ConstPtr;

}; // struct WalkingMsg_

typedef ::movement_msgs::WalkingMsg_<std::allocator<void> > WalkingMsg;

typedef boost::shared_ptr< ::movement_msgs::WalkingMsg > WalkingMsgPtr;
typedef boost::shared_ptr< ::movement_msgs::WalkingMsg const> WalkingMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::movement_msgs::WalkingMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::movement_msgs::WalkingMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::movement_msgs::WalkingMsg_<ContainerAllocator1> & lhs, const ::movement_msgs::WalkingMsg_<ContainerAllocator2> & rhs)
{
  return lhs.go == rhs.go &&
    lhs.vx == rhs.vx &&
    lhs.vy == rhs.vy &&
    lhs.vz == rhs.vz;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::movement_msgs::WalkingMsg_<ContainerAllocator1> & lhs, const ::movement_msgs::WalkingMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace movement_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::movement_msgs::WalkingMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::movement_msgs::WalkingMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::movement_msgs::WalkingMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::movement_msgs::WalkingMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::movement_msgs::WalkingMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::movement_msgs::WalkingMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::movement_msgs::WalkingMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a31409d81cc4c450d46abeca782221de";
  }

  static const char* value(const ::movement_msgs::WalkingMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa31409d81cc4c450ULL;
  static const uint64_t static_value2 = 0xd46abeca782221deULL;
};

template<class ContainerAllocator>
struct DataType< ::movement_msgs::WalkingMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "movement_msgs/WalkingMsg";
  }

  static const char* value(const ::movement_msgs::WalkingMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::movement_msgs::WalkingMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32       go\n"
"float64     vx\n"
"float64     vy\n"
"float64     vz\n"
"\n"
;
  }

  static const char* value(const ::movement_msgs::WalkingMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::movement_msgs::WalkingMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.go);
      stream.next(m.vx);
      stream.next(m.vy);
      stream.next(m.vz);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WalkingMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::movement_msgs::WalkingMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::movement_msgs::WalkingMsg_<ContainerAllocator>& v)
  {
    s << indent << "go: ";
    Printer<int32_t>::stream(s, indent + "  ", v.go);
    s << indent << "vx: ";
    Printer<double>::stream(s, indent + "  ", v.vx);
    s << indent << "vy: ";
    Printer<double>::stream(s, indent + "  ", v.vy);
    s << indent << "vz: ";
    Printer<double>::stream(s, indent + "  ", v.vz);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOVEMENT_MSGS_MESSAGE_WALKINGMSG_H
