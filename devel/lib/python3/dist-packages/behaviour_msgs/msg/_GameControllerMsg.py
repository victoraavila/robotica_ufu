# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from behaviour_msgs/GameControllerMsg.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import behaviour_msgs.msg

class GameControllerMsg(genpy.Message):
  _md5sum = "e78b2067609ba5f0cc69e8cda68a5fce"
  _type = "behaviour_msgs/GameControllerMsg"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint8[] header              
uint16 version           
uint8 packetNumber        
uint8 playersPerTeam      
uint8 gamePhase             
uint8 state    
uint8 setPlay           
uint8 firstHalf            
uint8 kickingTeam
uint8 dropInTeam           
uint16 dropInTime          
uint16 secsRemaining      
uint16 secondaryTime      
GameControllerTeamMsg[] teams

================================================================================
MSG: behaviour_msgs/GameControllerTeamMsg
uint8 teamNumber
uint8 teamColour
GameControllerPlayerMsg[] players
================================================================================
MSG: behaviour_msgs/GameControllerPlayerMsg
uint8 penalty
uint8 secsTillUnpenalised"""
  __slots__ = ['header','version','packetNumber','playersPerTeam','gamePhase','state','setPlay','firstHalf','kickingTeam','dropInTeam','dropInTime','secsRemaining','secondaryTime','teams']
  _slot_types = ['uint8[]','uint16','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint16','uint16','uint16','behaviour_msgs/GameControllerTeamMsg[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,version,packetNumber,playersPerTeam,gamePhase,state,setPlay,firstHalf,kickingTeam,dropInTeam,dropInTime,secsRemaining,secondaryTime,teams

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GameControllerMsg, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = b''
      if self.version is None:
        self.version = 0
      if self.packetNumber is None:
        self.packetNumber = 0
      if self.playersPerTeam is None:
        self.playersPerTeam = 0
      if self.gamePhase is None:
        self.gamePhase = 0
      if self.state is None:
        self.state = 0
      if self.setPlay is None:
        self.setPlay = 0
      if self.firstHalf is None:
        self.firstHalf = 0
      if self.kickingTeam is None:
        self.kickingTeam = 0
      if self.dropInTeam is None:
        self.dropInTeam = 0
      if self.dropInTime is None:
        self.dropInTime = 0
      if self.secsRemaining is None:
        self.secsRemaining = 0
      if self.secondaryTime is None:
        self.secondaryTime = 0
      if self.teams is None:
        self.teams = []
    else:
      self.header = b''
      self.version = 0
      self.packetNumber = 0
      self.playersPerTeam = 0
      self.gamePhase = 0
      self.state = 0
      self.setPlay = 0
      self.firstHalf = 0
      self.kickingTeam = 0
      self.dropInTeam = 0
      self.dropInTime = 0
      self.secsRemaining = 0
      self.secondaryTime = 0
      self.teams = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.header
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_H8B3H().pack(_x.version, _x.packetNumber, _x.playersPerTeam, _x.gamePhase, _x.state, _x.setPlay, _x.firstHalf, _x.kickingTeam, _x.dropInTeam, _x.dropInTime, _x.secsRemaining, _x.secondaryTime))
      length = len(self.teams)
      buff.write(_struct_I.pack(length))
      for val1 in self.teams:
        _x = val1
        buff.write(_get_struct_2B().pack(_x.teamNumber, _x.teamColour))
        length = len(val1.players)
        buff.write(_struct_I.pack(length))
        for val2 in val1.players:
          _x = val2
          buff.write(_get_struct_2B().pack(_x.penalty, _x.secsTillUnpenalised))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.teams is None:
        self.teams = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.header = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.version, _x.packetNumber, _x.playersPerTeam, _x.gamePhase, _x.state, _x.setPlay, _x.firstHalf, _x.kickingTeam, _x.dropInTeam, _x.dropInTime, _x.secsRemaining, _x.secondaryTime,) = _get_struct_H8B3H().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.teams = []
      for i in range(0, length):
        val1 = behaviour_msgs.msg.GameControllerTeamMsg()
        _x = val1
        start = end
        end += 2
        (_x.teamNumber, _x.teamColour,) = _get_struct_2B().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.players = []
        for i in range(0, length):
          val2 = behaviour_msgs.msg.GameControllerPlayerMsg()
          _x = val2
          start = end
          end += 2
          (_x.penalty, _x.secsTillUnpenalised,) = _get_struct_2B().unpack(str[start:end])
          val1.players.append(val2)
        self.teams.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.header
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_H8B3H().pack(_x.version, _x.packetNumber, _x.playersPerTeam, _x.gamePhase, _x.state, _x.setPlay, _x.firstHalf, _x.kickingTeam, _x.dropInTeam, _x.dropInTime, _x.secsRemaining, _x.secondaryTime))
      length = len(self.teams)
      buff.write(_struct_I.pack(length))
      for val1 in self.teams:
        _x = val1
        buff.write(_get_struct_2B().pack(_x.teamNumber, _x.teamColour))
        length = len(val1.players)
        buff.write(_struct_I.pack(length))
        for val2 in val1.players:
          _x = val2
          buff.write(_get_struct_2B().pack(_x.penalty, _x.secsTillUnpenalised))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.teams is None:
        self.teams = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.header = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.version, _x.packetNumber, _x.playersPerTeam, _x.gamePhase, _x.state, _x.setPlay, _x.firstHalf, _x.kickingTeam, _x.dropInTeam, _x.dropInTime, _x.secsRemaining, _x.secondaryTime,) = _get_struct_H8B3H().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.teams = []
      for i in range(0, length):
        val1 = behaviour_msgs.msg.GameControllerTeamMsg()
        _x = val1
        start = end
        end += 2
        (_x.teamNumber, _x.teamColour,) = _get_struct_2B().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.players = []
        for i in range(0, length):
          val2 = behaviour_msgs.msg.GameControllerPlayerMsg()
          _x = val2
          start = end
          end += 2
          (_x.penalty, _x.secsTillUnpenalised,) = _get_struct_2B().unpack(str[start:end])
          val1.players.append(val2)
        self.teams.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B = None
def _get_struct_2B():
    global _struct_2B
    if _struct_2B is None:
        _struct_2B = struct.Struct("<2B")
    return _struct_2B
_struct_H8B3H = None
def _get_struct_H8B3H():
    global _struct_H8B3H
    if _struct_H8B3H is None:
        _struct_H8B3H = struct.Struct("<H8B3H")
    return _struct_H8B3H
