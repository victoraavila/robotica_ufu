# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from behaviour_msgs/StateMachineActionsMsg.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class StateMachineActionsMsg(genpy.Message):
  _md5sum = "9252a10d7d533ef28cb83926994c2a51"
  _type = "behaviour_msgs/StateMachineActionsMsg"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool falling
bool finish_kicking 
bool searching 
bool ball 
bool ball_close
bool ball_centered
bool moving 
bool game_controller 
bool getting_up 
bool impossible



"""
  __slots__ = ['falling','finish_kicking','searching','ball','ball_close','ball_centered','moving','game_controller','getting_up','impossible']
  _slot_types = ['bool','bool','bool','bool','bool','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       falling,finish_kicking,searching,ball,ball_close,ball_centered,moving,game_controller,getting_up,impossible

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(StateMachineActionsMsg, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.falling is None:
        self.falling = False
      if self.finish_kicking is None:
        self.finish_kicking = False
      if self.searching is None:
        self.searching = False
      if self.ball is None:
        self.ball = False
      if self.ball_close is None:
        self.ball_close = False
      if self.ball_centered is None:
        self.ball_centered = False
      if self.moving is None:
        self.moving = False
      if self.game_controller is None:
        self.game_controller = False
      if self.getting_up is None:
        self.getting_up = False
      if self.impossible is None:
        self.impossible = False
    else:
      self.falling = False
      self.finish_kicking = False
      self.searching = False
      self.ball = False
      self.ball_close = False
      self.ball_centered = False
      self.moving = False
      self.game_controller = False
      self.getting_up = False
      self.impossible = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_10B().pack(_x.falling, _x.finish_kicking, _x.searching, _x.ball, _x.ball_close, _x.ball_centered, _x.moving, _x.game_controller, _x.getting_up, _x.impossible))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 10
      (_x.falling, _x.finish_kicking, _x.searching, _x.ball, _x.ball_close, _x.ball_centered, _x.moving, _x.game_controller, _x.getting_up, _x.impossible,) = _get_struct_10B().unpack(str[start:end])
      self.falling = bool(self.falling)
      self.finish_kicking = bool(self.finish_kicking)
      self.searching = bool(self.searching)
      self.ball = bool(self.ball)
      self.ball_close = bool(self.ball_close)
      self.ball_centered = bool(self.ball_centered)
      self.moving = bool(self.moving)
      self.game_controller = bool(self.game_controller)
      self.getting_up = bool(self.getting_up)
      self.impossible = bool(self.impossible)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_10B().pack(_x.falling, _x.finish_kicking, _x.searching, _x.ball, _x.ball_close, _x.ball_centered, _x.moving, _x.game_controller, _x.getting_up, _x.impossible))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 10
      (_x.falling, _x.finish_kicking, _x.searching, _x.ball, _x.ball_close, _x.ball_centered, _x.moving, _x.game_controller, _x.getting_up, _x.impossible,) = _get_struct_10B().unpack(str[start:end])
      self.falling = bool(self.falling)
      self.finish_kicking = bool(self.finish_kicking)
      self.searching = bool(self.searching)
      self.ball = bool(self.ball)
      self.ball_close = bool(self.ball_close)
      self.ball_centered = bool(self.ball_centered)
      self.moving = bool(self.moving)
      self.game_controller = bool(self.game_controller)
      self.getting_up = bool(self.getting_up)
      self.impossible = bool(self.impossible)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_10B = None
def _get_struct_10B():
    global _struct_10B
    if _struct_10B is None:
        _struct_10B = struct.Struct("<10B")
    return _struct_10B
