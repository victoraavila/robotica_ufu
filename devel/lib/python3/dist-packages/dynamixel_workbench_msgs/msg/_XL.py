# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from dynamixel_workbench_msgs/XL.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class XL(genpy.Message):
  _md5sum = "e8e1a2c36244b1ea3db9410aa21f5938"
  _type = "dynamixel_workbench_msgs/XL"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# It is Published by 'single_dynamixel_monitor' node
# It is Subscribed by 'dynamixel_workbench_single_manager_gui/qnode' node
# This message is compatible with control table of Dynamixel XL Series (XL430-W250)
# It is linked to 'XL430_W250.device' in dynamixel_workbench_toolbox/dynamixel/models/XL
# If you want to specific information about control table, please follow the link (http://support.robotis.com/en/)

uint16 model_number
uint8  version_of_firmware
uint8  id
uint8  baud_rate
uint8  return_delay_time
uint8  drive_mode
uint8  operating_mode
uint8  secondary_id
uint8  protocol_version
int32 homing_offset
uint32 moving_threshold
uint8  temperature_limit
uint16 max_voltage_limit
uint16 min_voltage_limit
uint16 pwm_limit
uint32 acceleration_limit
uint32 velocity_limit
uint32 max_position_limit
uint32 min_position_limit
uint8  shutdown

uint8  torque_enable
uint8  led
uint8  status_return_level
uint8  registered_instruction
uint8  hardware_error_status
uint16 velocity_i_gain
uint16 velocity_p_gain
uint16 position_d_gain
uint16 position_i_gain
uint16 position_p_gain
uint16 feedforward_2nd_gain
uint16 feedforward_1st_gain
int16  bus_watchdog
int16  goal_pwm
int32  goal_velocity
uint32 profile_acceleration
uint32 profile_velocity
uint32 goal_position
uint16 realtime_tick
uint8  moving
uint8  moving_status
int16  present_pwm
int16  present_load
int16  present_current
int32  present_velocity
uint32 present_position
uint32 velocity_trajectory
uint32 position_trajectory
uint16 present_input_voltage
uint8  present_temperature
"""
  __slots__ = ['model_number','version_of_firmware','id','baud_rate','return_delay_time','drive_mode','operating_mode','secondary_id','protocol_version','homing_offset','moving_threshold','temperature_limit','max_voltage_limit','min_voltage_limit','pwm_limit','acceleration_limit','velocity_limit','max_position_limit','min_position_limit','shutdown','torque_enable','led','status_return_level','registered_instruction','hardware_error_status','velocity_i_gain','velocity_p_gain','position_d_gain','position_i_gain','position_p_gain','feedforward_2nd_gain','feedforward_1st_gain','bus_watchdog','goal_pwm','goal_velocity','profile_acceleration','profile_velocity','goal_position','realtime_tick','moving','moving_status','present_pwm','present_load','present_current','present_velocity','present_position','velocity_trajectory','position_trajectory','present_input_voltage','present_temperature']
  _slot_types = ['uint16','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','int32','uint32','uint8','uint16','uint16','uint16','uint32','uint32','uint32','uint32','uint8','uint8','uint8','uint8','uint8','uint8','uint16','uint16','uint16','uint16','uint16','uint16','uint16','int16','int16','int32','uint32','uint32','uint32','uint16','uint8','uint8','int16','int16','int16','int32','uint32','uint32','uint32','uint16','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       model_number,version_of_firmware,id,baud_rate,return_delay_time,drive_mode,operating_mode,secondary_id,protocol_version,homing_offset,moving_threshold,temperature_limit,max_voltage_limit,min_voltage_limit,pwm_limit,acceleration_limit,velocity_limit,max_position_limit,min_position_limit,shutdown,torque_enable,led,status_return_level,registered_instruction,hardware_error_status,velocity_i_gain,velocity_p_gain,position_d_gain,position_i_gain,position_p_gain,feedforward_2nd_gain,feedforward_1st_gain,bus_watchdog,goal_pwm,goal_velocity,profile_acceleration,profile_velocity,goal_position,realtime_tick,moving,moving_status,present_pwm,present_load,present_current,present_velocity,present_position,velocity_trajectory,position_trajectory,present_input_voltage,present_temperature

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(XL, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.model_number is None:
        self.model_number = 0
      if self.version_of_firmware is None:
        self.version_of_firmware = 0
      if self.id is None:
        self.id = 0
      if self.baud_rate is None:
        self.baud_rate = 0
      if self.return_delay_time is None:
        self.return_delay_time = 0
      if self.drive_mode is None:
        self.drive_mode = 0
      if self.operating_mode is None:
        self.operating_mode = 0
      if self.secondary_id is None:
        self.secondary_id = 0
      if self.protocol_version is None:
        self.protocol_version = 0
      if self.homing_offset is None:
        self.homing_offset = 0
      if self.moving_threshold is None:
        self.moving_threshold = 0
      if self.temperature_limit is None:
        self.temperature_limit = 0
      if self.max_voltage_limit is None:
        self.max_voltage_limit = 0
      if self.min_voltage_limit is None:
        self.min_voltage_limit = 0
      if self.pwm_limit is None:
        self.pwm_limit = 0
      if self.acceleration_limit is None:
        self.acceleration_limit = 0
      if self.velocity_limit is None:
        self.velocity_limit = 0
      if self.max_position_limit is None:
        self.max_position_limit = 0
      if self.min_position_limit is None:
        self.min_position_limit = 0
      if self.shutdown is None:
        self.shutdown = 0
      if self.torque_enable is None:
        self.torque_enable = 0
      if self.led is None:
        self.led = 0
      if self.status_return_level is None:
        self.status_return_level = 0
      if self.registered_instruction is None:
        self.registered_instruction = 0
      if self.hardware_error_status is None:
        self.hardware_error_status = 0
      if self.velocity_i_gain is None:
        self.velocity_i_gain = 0
      if self.velocity_p_gain is None:
        self.velocity_p_gain = 0
      if self.position_d_gain is None:
        self.position_d_gain = 0
      if self.position_i_gain is None:
        self.position_i_gain = 0
      if self.position_p_gain is None:
        self.position_p_gain = 0
      if self.feedforward_2nd_gain is None:
        self.feedforward_2nd_gain = 0
      if self.feedforward_1st_gain is None:
        self.feedforward_1st_gain = 0
      if self.bus_watchdog is None:
        self.bus_watchdog = 0
      if self.goal_pwm is None:
        self.goal_pwm = 0
      if self.goal_velocity is None:
        self.goal_velocity = 0
      if self.profile_acceleration is None:
        self.profile_acceleration = 0
      if self.profile_velocity is None:
        self.profile_velocity = 0
      if self.goal_position is None:
        self.goal_position = 0
      if self.realtime_tick is None:
        self.realtime_tick = 0
      if self.moving is None:
        self.moving = 0
      if self.moving_status is None:
        self.moving_status = 0
      if self.present_pwm is None:
        self.present_pwm = 0
      if self.present_load is None:
        self.present_load = 0
      if self.present_current is None:
        self.present_current = 0
      if self.present_velocity is None:
        self.present_velocity = 0
      if self.present_position is None:
        self.present_position = 0
      if self.velocity_trajectory is None:
        self.velocity_trajectory = 0
      if self.position_trajectory is None:
        self.position_trajectory = 0
      if self.present_input_voltage is None:
        self.present_input_voltage = 0
      if self.present_temperature is None:
        self.present_temperature = 0
    else:
      self.model_number = 0
      self.version_of_firmware = 0
      self.id = 0
      self.baud_rate = 0
      self.return_delay_time = 0
      self.drive_mode = 0
      self.operating_mode = 0
      self.secondary_id = 0
      self.protocol_version = 0
      self.homing_offset = 0
      self.moving_threshold = 0
      self.temperature_limit = 0
      self.max_voltage_limit = 0
      self.min_voltage_limit = 0
      self.pwm_limit = 0
      self.acceleration_limit = 0
      self.velocity_limit = 0
      self.max_position_limit = 0
      self.min_position_limit = 0
      self.shutdown = 0
      self.torque_enable = 0
      self.led = 0
      self.status_return_level = 0
      self.registered_instruction = 0
      self.hardware_error_status = 0
      self.velocity_i_gain = 0
      self.velocity_p_gain = 0
      self.position_d_gain = 0
      self.position_i_gain = 0
      self.position_p_gain = 0
      self.feedforward_2nd_gain = 0
      self.feedforward_1st_gain = 0
      self.bus_watchdog = 0
      self.goal_pwm = 0
      self.goal_velocity = 0
      self.profile_acceleration = 0
      self.profile_velocity = 0
      self.goal_position = 0
      self.realtime_tick = 0
      self.moving = 0
      self.moving_status = 0
      self.present_pwm = 0
      self.present_load = 0
      self.present_current = 0
      self.present_velocity = 0
      self.present_position = 0
      self.velocity_trajectory = 0
      self.position_trajectory = 0
      self.present_input_voltage = 0
      self.present_temperature = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_H8BiIB3H4I6B7H2hi3IH2B3hi3IHB().pack(_x.model_number, _x.version_of_firmware, _x.id, _x.baud_rate, _x.return_delay_time, _x.drive_mode, _x.operating_mode, _x.secondary_id, _x.protocol_version, _x.homing_offset, _x.moving_threshold, _x.temperature_limit, _x.max_voltage_limit, _x.min_voltage_limit, _x.pwm_limit, _x.acceleration_limit, _x.velocity_limit, _x.max_position_limit, _x.min_position_limit, _x.shutdown, _x.torque_enable, _x.led, _x.status_return_level, _x.registered_instruction, _x.hardware_error_status, _x.velocity_i_gain, _x.velocity_p_gain, _x.position_d_gain, _x.position_i_gain, _x.position_p_gain, _x.feedforward_2nd_gain, _x.feedforward_1st_gain, _x.bus_watchdog, _x.goal_pwm, _x.goal_velocity, _x.profile_acceleration, _x.profile_velocity, _x.goal_position, _x.realtime_tick, _x.moving, _x.moving_status, _x.present_pwm, _x.present_load, _x.present_current, _x.present_velocity, _x.present_position, _x.velocity_trajectory, _x.position_trajectory, _x.present_input_voltage, _x.present_temperature))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 110
      (_x.model_number, _x.version_of_firmware, _x.id, _x.baud_rate, _x.return_delay_time, _x.drive_mode, _x.operating_mode, _x.secondary_id, _x.protocol_version, _x.homing_offset, _x.moving_threshold, _x.temperature_limit, _x.max_voltage_limit, _x.min_voltage_limit, _x.pwm_limit, _x.acceleration_limit, _x.velocity_limit, _x.max_position_limit, _x.min_position_limit, _x.shutdown, _x.torque_enable, _x.led, _x.status_return_level, _x.registered_instruction, _x.hardware_error_status, _x.velocity_i_gain, _x.velocity_p_gain, _x.position_d_gain, _x.position_i_gain, _x.position_p_gain, _x.feedforward_2nd_gain, _x.feedforward_1st_gain, _x.bus_watchdog, _x.goal_pwm, _x.goal_velocity, _x.profile_acceleration, _x.profile_velocity, _x.goal_position, _x.realtime_tick, _x.moving, _x.moving_status, _x.present_pwm, _x.present_load, _x.present_current, _x.present_velocity, _x.present_position, _x.velocity_trajectory, _x.position_trajectory, _x.present_input_voltage, _x.present_temperature,) = _get_struct_H8BiIB3H4I6B7H2hi3IH2B3hi3IHB().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_H8BiIB3H4I6B7H2hi3IH2B3hi3IHB().pack(_x.model_number, _x.version_of_firmware, _x.id, _x.baud_rate, _x.return_delay_time, _x.drive_mode, _x.operating_mode, _x.secondary_id, _x.protocol_version, _x.homing_offset, _x.moving_threshold, _x.temperature_limit, _x.max_voltage_limit, _x.min_voltage_limit, _x.pwm_limit, _x.acceleration_limit, _x.velocity_limit, _x.max_position_limit, _x.min_position_limit, _x.shutdown, _x.torque_enable, _x.led, _x.status_return_level, _x.registered_instruction, _x.hardware_error_status, _x.velocity_i_gain, _x.velocity_p_gain, _x.position_d_gain, _x.position_i_gain, _x.position_p_gain, _x.feedforward_2nd_gain, _x.feedforward_1st_gain, _x.bus_watchdog, _x.goal_pwm, _x.goal_velocity, _x.profile_acceleration, _x.profile_velocity, _x.goal_position, _x.realtime_tick, _x.moving, _x.moving_status, _x.present_pwm, _x.present_load, _x.present_current, _x.present_velocity, _x.present_position, _x.velocity_trajectory, _x.position_trajectory, _x.present_input_voltage, _x.present_temperature))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 110
      (_x.model_number, _x.version_of_firmware, _x.id, _x.baud_rate, _x.return_delay_time, _x.drive_mode, _x.operating_mode, _x.secondary_id, _x.protocol_version, _x.homing_offset, _x.moving_threshold, _x.temperature_limit, _x.max_voltage_limit, _x.min_voltage_limit, _x.pwm_limit, _x.acceleration_limit, _x.velocity_limit, _x.max_position_limit, _x.min_position_limit, _x.shutdown, _x.torque_enable, _x.led, _x.status_return_level, _x.registered_instruction, _x.hardware_error_status, _x.velocity_i_gain, _x.velocity_p_gain, _x.position_d_gain, _x.position_i_gain, _x.position_p_gain, _x.feedforward_2nd_gain, _x.feedforward_1st_gain, _x.bus_watchdog, _x.goal_pwm, _x.goal_velocity, _x.profile_acceleration, _x.profile_velocity, _x.goal_position, _x.realtime_tick, _x.moving, _x.moving_status, _x.present_pwm, _x.present_load, _x.present_current, _x.present_velocity, _x.present_position, _x.velocity_trajectory, _x.position_trajectory, _x.present_input_voltage, _x.present_temperature,) = _get_struct_H8BiIB3H4I6B7H2hi3IH2B3hi3IHB().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_H8BiIB3H4I6B7H2hi3IH2B3hi3IHB = None
def _get_struct_H8BiIB3H4I6B7H2hi3IH2B3hi3IHB():
    global _struct_H8BiIB3H4I6B7H2hi3IH2B3hi3IHB
    if _struct_H8BiIB3H4I6B7H2hi3IH2B3hi3IHB is None:
        _struct_H8BiIB3H4I6B7H2hi3IH2B3hi3IHB = struct.Struct("<H8BiIB3H4I6B7H2hi3IH2B3hi3IHB")
    return _struct_H8BiIB3H4I6B7H2hi3IH2B3hi3IHB
