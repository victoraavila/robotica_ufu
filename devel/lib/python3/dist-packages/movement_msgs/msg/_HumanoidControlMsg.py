# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from movement_msgs/HumanoidControlMsg.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import movement_msgs.msg
import std_msgs.msg

class HumanoidControlMsg(genpy.Message):
  _md5sum = "0b7c6a6b1b062af7f2563f72e33b0aab"
  _type = "movement_msgs/HumanoidControlMsg"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header  header
bool    ctrl_flag  
bool    arm_ctrl_flag
bool    torso_ctrl_flag 
bool    phase_ctrl_flag 
bool    slope_ctrl_flag 
bool    foot_ctrl_flag 

float64 torsoAddX
float64 torsoAddY
float64 torsoAddZ

float64 slope

movement_msgs/EndEffMsg  rFootFac
movement_msgs/EndEffMsg  lFootFac

float64 phaseFac


float64 armAdd


float64 delayR
float64 delayL
float64 delayAll





================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: movement_msgs/EndEffMsg
geometry_msgs/Point  pos
geometry_msgs/Point  vel
geometry_msgs/Point  acc
geometry_msgs/Point  rot
int32                type
int32                flag
float64              dt

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z
"""
  __slots__ = ['header','ctrl_flag','arm_ctrl_flag','torso_ctrl_flag','phase_ctrl_flag','slope_ctrl_flag','foot_ctrl_flag','torsoAddX','torsoAddY','torsoAddZ','slope','rFootFac','lFootFac','phaseFac','armAdd','delayR','delayL','delayAll']
  _slot_types = ['std_msgs/Header','bool','bool','bool','bool','bool','bool','float64','float64','float64','float64','movement_msgs/EndEffMsg','movement_msgs/EndEffMsg','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,ctrl_flag,arm_ctrl_flag,torso_ctrl_flag,phase_ctrl_flag,slope_ctrl_flag,foot_ctrl_flag,torsoAddX,torsoAddY,torsoAddZ,slope,rFootFac,lFootFac,phaseFac,armAdd,delayR,delayL,delayAll

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(HumanoidControlMsg, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.ctrl_flag is None:
        self.ctrl_flag = False
      if self.arm_ctrl_flag is None:
        self.arm_ctrl_flag = False
      if self.torso_ctrl_flag is None:
        self.torso_ctrl_flag = False
      if self.phase_ctrl_flag is None:
        self.phase_ctrl_flag = False
      if self.slope_ctrl_flag is None:
        self.slope_ctrl_flag = False
      if self.foot_ctrl_flag is None:
        self.foot_ctrl_flag = False
      if self.torsoAddX is None:
        self.torsoAddX = 0.
      if self.torsoAddY is None:
        self.torsoAddY = 0.
      if self.torsoAddZ is None:
        self.torsoAddZ = 0.
      if self.slope is None:
        self.slope = 0.
      if self.rFootFac is None:
        self.rFootFac = movement_msgs.msg.EndEffMsg()
      if self.lFootFac is None:
        self.lFootFac = movement_msgs.msg.EndEffMsg()
      if self.phaseFac is None:
        self.phaseFac = 0.
      if self.armAdd is None:
        self.armAdd = 0.
      if self.delayR is None:
        self.delayR = 0.
      if self.delayL is None:
        self.delayL = 0.
      if self.delayAll is None:
        self.delayAll = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.ctrl_flag = False
      self.arm_ctrl_flag = False
      self.torso_ctrl_flag = False
      self.phase_ctrl_flag = False
      self.slope_ctrl_flag = False
      self.foot_ctrl_flag = False
      self.torsoAddX = 0.
      self.torsoAddY = 0.
      self.torsoAddZ = 0.
      self.slope = 0.
      self.rFootFac = movement_msgs.msg.EndEffMsg()
      self.lFootFac = movement_msgs.msg.EndEffMsg()
      self.phaseFac = 0.
      self.armAdd = 0.
      self.delayR = 0.
      self.delayL = 0.
      self.delayAll = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_6B16d2i13d2i6d().pack(_x.ctrl_flag, _x.arm_ctrl_flag, _x.torso_ctrl_flag, _x.phase_ctrl_flag, _x.slope_ctrl_flag, _x.foot_ctrl_flag, _x.torsoAddX, _x.torsoAddY, _x.torsoAddZ, _x.slope, _x.rFootFac.pos.x, _x.rFootFac.pos.y, _x.rFootFac.pos.z, _x.rFootFac.vel.x, _x.rFootFac.vel.y, _x.rFootFac.vel.z, _x.rFootFac.acc.x, _x.rFootFac.acc.y, _x.rFootFac.acc.z, _x.rFootFac.rot.x, _x.rFootFac.rot.y, _x.rFootFac.rot.z, _x.rFootFac.type, _x.rFootFac.flag, _x.rFootFac.dt, _x.lFootFac.pos.x, _x.lFootFac.pos.y, _x.lFootFac.pos.z, _x.lFootFac.vel.x, _x.lFootFac.vel.y, _x.lFootFac.vel.z, _x.lFootFac.acc.x, _x.lFootFac.acc.y, _x.lFootFac.acc.z, _x.lFootFac.rot.x, _x.lFootFac.rot.y, _x.lFootFac.rot.z, _x.lFootFac.type, _x.lFootFac.flag, _x.lFootFac.dt, _x.phaseFac, _x.armAdd, _x.delayR, _x.delayL, _x.delayAll))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.rFootFac is None:
        self.rFootFac = movement_msgs.msg.EndEffMsg()
      if self.lFootFac is None:
        self.lFootFac = movement_msgs.msg.EndEffMsg()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 302
      (_x.ctrl_flag, _x.arm_ctrl_flag, _x.torso_ctrl_flag, _x.phase_ctrl_flag, _x.slope_ctrl_flag, _x.foot_ctrl_flag, _x.torsoAddX, _x.torsoAddY, _x.torsoAddZ, _x.slope, _x.rFootFac.pos.x, _x.rFootFac.pos.y, _x.rFootFac.pos.z, _x.rFootFac.vel.x, _x.rFootFac.vel.y, _x.rFootFac.vel.z, _x.rFootFac.acc.x, _x.rFootFac.acc.y, _x.rFootFac.acc.z, _x.rFootFac.rot.x, _x.rFootFac.rot.y, _x.rFootFac.rot.z, _x.rFootFac.type, _x.rFootFac.flag, _x.rFootFac.dt, _x.lFootFac.pos.x, _x.lFootFac.pos.y, _x.lFootFac.pos.z, _x.lFootFac.vel.x, _x.lFootFac.vel.y, _x.lFootFac.vel.z, _x.lFootFac.acc.x, _x.lFootFac.acc.y, _x.lFootFac.acc.z, _x.lFootFac.rot.x, _x.lFootFac.rot.y, _x.lFootFac.rot.z, _x.lFootFac.type, _x.lFootFac.flag, _x.lFootFac.dt, _x.phaseFac, _x.armAdd, _x.delayR, _x.delayL, _x.delayAll,) = _get_struct_6B16d2i13d2i6d().unpack(str[start:end])
      self.ctrl_flag = bool(self.ctrl_flag)
      self.arm_ctrl_flag = bool(self.arm_ctrl_flag)
      self.torso_ctrl_flag = bool(self.torso_ctrl_flag)
      self.phase_ctrl_flag = bool(self.phase_ctrl_flag)
      self.slope_ctrl_flag = bool(self.slope_ctrl_flag)
      self.foot_ctrl_flag = bool(self.foot_ctrl_flag)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_6B16d2i13d2i6d().pack(_x.ctrl_flag, _x.arm_ctrl_flag, _x.torso_ctrl_flag, _x.phase_ctrl_flag, _x.slope_ctrl_flag, _x.foot_ctrl_flag, _x.torsoAddX, _x.torsoAddY, _x.torsoAddZ, _x.slope, _x.rFootFac.pos.x, _x.rFootFac.pos.y, _x.rFootFac.pos.z, _x.rFootFac.vel.x, _x.rFootFac.vel.y, _x.rFootFac.vel.z, _x.rFootFac.acc.x, _x.rFootFac.acc.y, _x.rFootFac.acc.z, _x.rFootFac.rot.x, _x.rFootFac.rot.y, _x.rFootFac.rot.z, _x.rFootFac.type, _x.rFootFac.flag, _x.rFootFac.dt, _x.lFootFac.pos.x, _x.lFootFac.pos.y, _x.lFootFac.pos.z, _x.lFootFac.vel.x, _x.lFootFac.vel.y, _x.lFootFac.vel.z, _x.lFootFac.acc.x, _x.lFootFac.acc.y, _x.lFootFac.acc.z, _x.lFootFac.rot.x, _x.lFootFac.rot.y, _x.lFootFac.rot.z, _x.lFootFac.type, _x.lFootFac.flag, _x.lFootFac.dt, _x.phaseFac, _x.armAdd, _x.delayR, _x.delayL, _x.delayAll))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.rFootFac is None:
        self.rFootFac = movement_msgs.msg.EndEffMsg()
      if self.lFootFac is None:
        self.lFootFac = movement_msgs.msg.EndEffMsg()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 302
      (_x.ctrl_flag, _x.arm_ctrl_flag, _x.torso_ctrl_flag, _x.phase_ctrl_flag, _x.slope_ctrl_flag, _x.foot_ctrl_flag, _x.torsoAddX, _x.torsoAddY, _x.torsoAddZ, _x.slope, _x.rFootFac.pos.x, _x.rFootFac.pos.y, _x.rFootFac.pos.z, _x.rFootFac.vel.x, _x.rFootFac.vel.y, _x.rFootFac.vel.z, _x.rFootFac.acc.x, _x.rFootFac.acc.y, _x.rFootFac.acc.z, _x.rFootFac.rot.x, _x.rFootFac.rot.y, _x.rFootFac.rot.z, _x.rFootFac.type, _x.rFootFac.flag, _x.rFootFac.dt, _x.lFootFac.pos.x, _x.lFootFac.pos.y, _x.lFootFac.pos.z, _x.lFootFac.vel.x, _x.lFootFac.vel.y, _x.lFootFac.vel.z, _x.lFootFac.acc.x, _x.lFootFac.acc.y, _x.lFootFac.acc.z, _x.lFootFac.rot.x, _x.lFootFac.rot.y, _x.lFootFac.rot.z, _x.lFootFac.type, _x.lFootFac.flag, _x.lFootFac.dt, _x.phaseFac, _x.armAdd, _x.delayR, _x.delayL, _x.delayAll,) = _get_struct_6B16d2i13d2i6d().unpack(str[start:end])
      self.ctrl_flag = bool(self.ctrl_flag)
      self.arm_ctrl_flag = bool(self.arm_ctrl_flag)
      self.torso_ctrl_flag = bool(self.torso_ctrl_flag)
      self.phase_ctrl_flag = bool(self.phase_ctrl_flag)
      self.slope_ctrl_flag = bool(self.slope_ctrl_flag)
      self.foot_ctrl_flag = bool(self.foot_ctrl_flag)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_6B16d2i13d2i6d = None
def _get_struct_6B16d2i13d2i6d():
    global _struct_6B16d2i13d2i6d
    if _struct_6B16d2i13d2i6d is None:
        _struct_6B16d2i13d2i6d = struct.Struct("<6B16d2i13d2i6d")
    return _struct_6B16d2i13d2i6d
