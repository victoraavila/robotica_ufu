# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from movement_msgs/HumanoidPropertiesMsg.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class HumanoidPropertiesMsg(genpy.Message):
  _md5sum = "ed5d141b03975d3cb4615c633a218029"
  _type = "movement_msgs/HumanoidPropertiesMsg"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float64               squat
float64               open
float64               incl
float64               sideIncl
float64               footIncl
geometry_msgs/Point  zmpPoint
geometry_msgs/Point  comPoint
geometry_msgs/Point  footComPoint
float64[]            torq



================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z
"""
  __slots__ = ['squat','open','incl','sideIncl','footIncl','zmpPoint','comPoint','footComPoint','torq']
  _slot_types = ['float64','float64','float64','float64','float64','geometry_msgs/Point','geometry_msgs/Point','geometry_msgs/Point','float64[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       squat,open,incl,sideIncl,footIncl,zmpPoint,comPoint,footComPoint,torq

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(HumanoidPropertiesMsg, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.squat is None:
        self.squat = 0.
      if self.open is None:
        self.open = 0.
      if self.incl is None:
        self.incl = 0.
      if self.sideIncl is None:
        self.sideIncl = 0.
      if self.footIncl is None:
        self.footIncl = 0.
      if self.zmpPoint is None:
        self.zmpPoint = geometry_msgs.msg.Point()
      if self.comPoint is None:
        self.comPoint = geometry_msgs.msg.Point()
      if self.footComPoint is None:
        self.footComPoint = geometry_msgs.msg.Point()
      if self.torq is None:
        self.torq = []
    else:
      self.squat = 0.
      self.open = 0.
      self.incl = 0.
      self.sideIncl = 0.
      self.footIncl = 0.
      self.zmpPoint = geometry_msgs.msg.Point()
      self.comPoint = geometry_msgs.msg.Point()
      self.footComPoint = geometry_msgs.msg.Point()
      self.torq = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_14d().pack(_x.squat, _x.open, _x.incl, _x.sideIncl, _x.footIncl, _x.zmpPoint.x, _x.zmpPoint.y, _x.zmpPoint.z, _x.comPoint.x, _x.comPoint.y, _x.comPoint.z, _x.footComPoint.x, _x.footComPoint.y, _x.footComPoint.z))
      length = len(self.torq)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.torq))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.zmpPoint is None:
        self.zmpPoint = geometry_msgs.msg.Point()
      if self.comPoint is None:
        self.comPoint = geometry_msgs.msg.Point()
      if self.footComPoint is None:
        self.footComPoint = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 112
      (_x.squat, _x.open, _x.incl, _x.sideIncl, _x.footIncl, _x.zmpPoint.x, _x.zmpPoint.y, _x.zmpPoint.z, _x.comPoint.x, _x.comPoint.y, _x.comPoint.z, _x.footComPoint.x, _x.footComPoint.y, _x.footComPoint.z,) = _get_struct_14d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.torq = s.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_14d().pack(_x.squat, _x.open, _x.incl, _x.sideIncl, _x.footIncl, _x.zmpPoint.x, _x.zmpPoint.y, _x.zmpPoint.z, _x.comPoint.x, _x.comPoint.y, _x.comPoint.z, _x.footComPoint.x, _x.footComPoint.y, _x.footComPoint.z))
      length = len(self.torq)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.torq.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.zmpPoint is None:
        self.zmpPoint = geometry_msgs.msg.Point()
      if self.comPoint is None:
        self.comPoint = geometry_msgs.msg.Point()
      if self.footComPoint is None:
        self.footComPoint = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 112
      (_x.squat, _x.open, _x.incl, _x.sideIncl, _x.footIncl, _x.zmpPoint.x, _x.zmpPoint.y, _x.zmpPoint.z, _x.comPoint.x, _x.comPoint.y, _x.comPoint.z, _x.footComPoint.x, _x.footComPoint.y, _x.footComPoint.z,) = _get_struct_14d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.torq = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_14d = None
def _get_struct_14d():
    global _struct_14d
    if _struct_14d is None:
        _struct_14d = struct.Struct("<14d")
    return _struct_14d
