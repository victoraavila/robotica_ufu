# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from movement_msgs/PerformanceMsg.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class PerformanceMsg(genpy.Message):
  _md5sum = "299aadea0ec447ab474d650cbedfd2a5"
  _type = "movement_msgs/PerformanceMsg"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float64[] data
float64[] bins
float64   freq
float64   amp
float64   mean
float64   integral
float64   freqRef
float64   freqRange
float64   ampRef
float64   ampRange
float64   meanRef
float64   meanRange

float64   freqPerf
float64   ampPerf
float64   meanPerf

float64   wFreq
float64   wAmp
float64   wMean

float64   perf
"""
  __slots__ = ['data','bins','freq','amp','mean','integral','freqRef','freqRange','ampRef','ampRange','meanRef','meanRange','freqPerf','ampPerf','meanPerf','wFreq','wAmp','wMean','perf']
  _slot_types = ['float64[]','float64[]','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       data,bins,freq,amp,mean,integral,freqRef,freqRange,ampRef,ampRange,meanRef,meanRange,freqPerf,ampPerf,meanPerf,wFreq,wAmp,wMean,perf

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PerformanceMsg, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.data is None:
        self.data = []
      if self.bins is None:
        self.bins = []
      if self.freq is None:
        self.freq = 0.
      if self.amp is None:
        self.amp = 0.
      if self.mean is None:
        self.mean = 0.
      if self.integral is None:
        self.integral = 0.
      if self.freqRef is None:
        self.freqRef = 0.
      if self.freqRange is None:
        self.freqRange = 0.
      if self.ampRef is None:
        self.ampRef = 0.
      if self.ampRange is None:
        self.ampRange = 0.
      if self.meanRef is None:
        self.meanRef = 0.
      if self.meanRange is None:
        self.meanRange = 0.
      if self.freqPerf is None:
        self.freqPerf = 0.
      if self.ampPerf is None:
        self.ampPerf = 0.
      if self.meanPerf is None:
        self.meanPerf = 0.
      if self.wFreq is None:
        self.wFreq = 0.
      if self.wAmp is None:
        self.wAmp = 0.
      if self.wMean is None:
        self.wMean = 0.
      if self.perf is None:
        self.perf = 0.
    else:
      self.data = []
      self.bins = []
      self.freq = 0.
      self.amp = 0.
      self.mean = 0.
      self.integral = 0.
      self.freqRef = 0.
      self.freqRange = 0.
      self.ampRef = 0.
      self.ampRange = 0.
      self.meanRef = 0.
      self.meanRange = 0.
      self.freqPerf = 0.
      self.ampPerf = 0.
      self.meanPerf = 0.
      self.wFreq = 0.
      self.wAmp = 0.
      self.wMean = 0.
      self.perf = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.data))
      length = len(self.bins)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.bins))
      _x = self
      buff.write(_get_struct_17d().pack(_x.freq, _x.amp, _x.mean, _x.integral, _x.freqRef, _x.freqRange, _x.ampRef, _x.ampRange, _x.meanRef, _x.meanRange, _x.freqPerf, _x.ampPerf, _x.meanPerf, _x.wFreq, _x.wAmp, _x.wMean, _x.perf))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.data = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.bins = s.unpack(str[start:end])
      _x = self
      start = end
      end += 136
      (_x.freq, _x.amp, _x.mean, _x.integral, _x.freqRef, _x.freqRange, _x.ampRef, _x.ampRange, _x.meanRef, _x.meanRange, _x.freqPerf, _x.ampPerf, _x.meanPerf, _x.wFreq, _x.wAmp, _x.wMean, _x.perf,) = _get_struct_17d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.data.tostring())
      length = len(self.bins)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.bins.tostring())
      _x = self
      buff.write(_get_struct_17d().pack(_x.freq, _x.amp, _x.mean, _x.integral, _x.freqRef, _x.freqRange, _x.ampRef, _x.ampRange, _x.meanRef, _x.meanRange, _x.freqPerf, _x.ampPerf, _x.meanPerf, _x.wFreq, _x.wAmp, _x.wMean, _x.perf))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.data = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.bins = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 136
      (_x.freq, _x.amp, _x.mean, _x.integral, _x.freqRef, _x.freqRange, _x.ampRef, _x.ampRange, _x.meanRef, _x.meanRange, _x.freqPerf, _x.ampPerf, _x.meanPerf, _x.wFreq, _x.wAmp, _x.wMean, _x.perf,) = _get_struct_17d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_17d = None
def _get_struct_17d():
    global _struct_17d
    if _struct_17d is None:
        _struct_17d = struct.Struct("<17d")
    return _struct_17d
