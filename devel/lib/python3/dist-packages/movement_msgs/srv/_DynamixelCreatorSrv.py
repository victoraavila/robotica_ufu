# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from movement_msgs/DynamixelCreatorSrvRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class DynamixelCreatorSrvRequest(genpy.Message):
  _md5sum = "44c6f6ff6bf82ca49091d31c05b8eccc"
  _type = "movement_msgs/DynamixelCreatorSrvRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool[] torque
string wish 

"""
  __slots__ = ['torque','wish']
  _slot_types = ['bool[]','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       torque,wish

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DynamixelCreatorSrvRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.torque is None:
        self.torque = []
      if self.wish is None:
        self.wish = ''
    else:
      self.torque = []
      self.wish = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.torque)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.Struct(pattern).pack(*self.torque))
      _x = self.wish
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.torque = s.unpack(str[start:end])
      self.torque = list(map(bool, self.torque))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.wish = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.wish = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.torque)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.torque.tostring())
      _x = self.wish
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.torque = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.torque = list(map(bool, self.torque))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.wish = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.wish = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from movement_msgs/DynamixelCreatorSrvResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class DynamixelCreatorSrvResponse(genpy.Message):
  _md5sum = "8223065620cdc5ef775559d5daa46c26"
  _type = "movement_msgs/DynamixelCreatorSrvResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float64[20] feedbackPosition
bool[20] feedbackTorque
float64[20] feedbackVcc

"""
  __slots__ = ['feedbackPosition','feedbackTorque','feedbackVcc']
  _slot_types = ['float64[20]','bool[20]','float64[20]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       feedbackPosition,feedbackTorque,feedbackVcc

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DynamixelCreatorSrvResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.feedbackPosition is None:
        self.feedbackPosition = [0.] * 20
      if self.feedbackTorque is None:
        self.feedbackTorque = [False] * 20
      if self.feedbackVcc is None:
        self.feedbackVcc = [0.] * 20
    else:
      self.feedbackPosition = [0.] * 20
      self.feedbackTorque = [False] * 20
      self.feedbackVcc = [0.] * 20

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_20d().pack(*self.feedbackPosition))
      buff.write(_get_struct_20B().pack(*self.feedbackTorque))
      buff.write(_get_struct_20d().pack(*self.feedbackVcc))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 160
      self.feedbackPosition = _get_struct_20d().unpack(str[start:end])
      start = end
      end += 20
      self.feedbackTorque = _get_struct_20B().unpack(str[start:end])
      self.feedbackTorque = list(map(bool, self.feedbackTorque))
      start = end
      end += 160
      self.feedbackVcc = _get_struct_20d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(self.feedbackPosition.tostring())
      buff.write(self.feedbackTorque.tostring())
      buff.write(self.feedbackVcc.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 160
      self.feedbackPosition = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=20)
      start = end
      end += 20
      self.feedbackTorque = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=20)
      self.feedbackTorque = list(map(bool, self.feedbackTorque))
      start = end
      end += 160
      self.feedbackVcc = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=20)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_20B = None
def _get_struct_20B():
    global _struct_20B
    if _struct_20B is None:
        _struct_20B = struct.Struct("<20B")
    return _struct_20B
_struct_20d = None
def _get_struct_20d():
    global _struct_20d
    if _struct_20d is None:
        _struct_20d = struct.Struct("<20d")
    return _struct_20d
class DynamixelCreatorSrv(object):
  _type          = 'movement_msgs/DynamixelCreatorSrv'
  _md5sum = 'afc4a102e69ac104a3346382d7f6e9b9'
  _request_class  = DynamixelCreatorSrvRequest
  _response_class = DynamixelCreatorSrvResponse
