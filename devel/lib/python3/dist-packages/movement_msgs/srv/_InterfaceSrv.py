# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from movement_msgs/InterfaceSrvRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class InterfaceSrvRequest(genpy.Message):
  _md5sum = "dd5045c9a9c8191cda69ed2ec4c1a725"
  _type = "movement_msgs/InterfaceSrvRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool toGazebo
bool toRobot
bool scanMotors
bool getPID
bool getMotorPos
bool send2Motor
bool[] setTorque
int16  motorIds
bool fall
bool ping

"""
  __slots__ = ['toGazebo','toRobot','scanMotors','getPID','getMotorPos','send2Motor','setTorque','motorIds','fall','ping']
  _slot_types = ['bool','bool','bool','bool','bool','bool','bool[]','int16','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       toGazebo,toRobot,scanMotors,getPID,getMotorPos,send2Motor,setTorque,motorIds,fall,ping

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(InterfaceSrvRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.toGazebo is None:
        self.toGazebo = False
      if self.toRobot is None:
        self.toRobot = False
      if self.scanMotors is None:
        self.scanMotors = False
      if self.getPID is None:
        self.getPID = False
      if self.getMotorPos is None:
        self.getMotorPos = False
      if self.send2Motor is None:
        self.send2Motor = False
      if self.setTorque is None:
        self.setTorque = []
      if self.motorIds is None:
        self.motorIds = 0
      if self.fall is None:
        self.fall = False
      if self.ping is None:
        self.ping = False
    else:
      self.toGazebo = False
      self.toRobot = False
      self.scanMotors = False
      self.getPID = False
      self.getMotorPos = False
      self.send2Motor = False
      self.setTorque = []
      self.motorIds = 0
      self.fall = False
      self.ping = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_6B().pack(_x.toGazebo, _x.toRobot, _x.scanMotors, _x.getPID, _x.getMotorPos, _x.send2Motor))
      length = len(self.setTorque)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.Struct(pattern).pack(*self.setTorque))
      _x = self
      buff.write(_get_struct_h2B().pack(_x.motorIds, _x.fall, _x.ping))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 6
      (_x.toGazebo, _x.toRobot, _x.scanMotors, _x.getPID, _x.getMotorPos, _x.send2Motor,) = _get_struct_6B().unpack(str[start:end])
      self.toGazebo = bool(self.toGazebo)
      self.toRobot = bool(self.toRobot)
      self.scanMotors = bool(self.scanMotors)
      self.getPID = bool(self.getPID)
      self.getMotorPos = bool(self.getMotorPos)
      self.send2Motor = bool(self.send2Motor)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.setTorque = s.unpack(str[start:end])
      self.setTorque = list(map(bool, self.setTorque))
      _x = self
      start = end
      end += 4
      (_x.motorIds, _x.fall, _x.ping,) = _get_struct_h2B().unpack(str[start:end])
      self.fall = bool(self.fall)
      self.ping = bool(self.ping)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_6B().pack(_x.toGazebo, _x.toRobot, _x.scanMotors, _x.getPID, _x.getMotorPos, _x.send2Motor))
      length = len(self.setTorque)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.setTorque.tostring())
      _x = self
      buff.write(_get_struct_h2B().pack(_x.motorIds, _x.fall, _x.ping))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 6
      (_x.toGazebo, _x.toRobot, _x.scanMotors, _x.getPID, _x.getMotorPos, _x.send2Motor,) = _get_struct_6B().unpack(str[start:end])
      self.toGazebo = bool(self.toGazebo)
      self.toRobot = bool(self.toRobot)
      self.scanMotors = bool(self.scanMotors)
      self.getPID = bool(self.getPID)
      self.getMotorPos = bool(self.getMotorPos)
      self.send2Motor = bool(self.send2Motor)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.setTorque = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.setTorque = list(map(bool, self.setTorque))
      _x = self
      start = end
      end += 4
      (_x.motorIds, _x.fall, _x.ping,) = _get_struct_h2B().unpack(str[start:end])
      self.fall = bool(self.fall)
      self.ping = bool(self.ping)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6B = None
def _get_struct_6B():
    global _struct_6B
    if _struct_6B is None:
        _struct_6B = struct.Struct("<6B")
    return _struct_6B
_struct_h2B = None
def _get_struct_h2B():
    global _struct_h2B
    if _struct_h2B is None:
        _struct_h2B = struct.Struct("<h2B")
    return _struct_h2B
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from movement_msgs/InterfaceSrvResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import movement_msgs.msg
import std_msgs.msg

class InterfaceSrvResponse(genpy.Message):
  _md5sum = "9f6a712565425d1f45ef42e77c1863fd"
  _type = "movement_msgs/InterfaceSrvResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """movement_msgs/JointStateMsg motorState
movement_msgs/MotorPIDMsg   motorPID
int16[]                     ids


================================================================================
MSG: movement_msgs/JointStateMsg
Header    header
float64[] pos
float64[] vel
float64[] acc
float64[] torq
string  writeCommand
string        kind
string        readCommand
int32         type
int32         source
float64       dt


================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: movement_msgs/MotorPIDMsg
float64[]       kp
float64[]       ki
float64[]       kd


"""
  __slots__ = ['motorState','motorPID','ids']
  _slot_types = ['movement_msgs/JointStateMsg','movement_msgs/MotorPIDMsg','int16[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       motorState,motorPID,ids

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(InterfaceSrvResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.motorState is None:
        self.motorState = movement_msgs.msg.JointStateMsg()
      if self.motorPID is None:
        self.motorPID = movement_msgs.msg.MotorPIDMsg()
      if self.ids is None:
        self.ids = []
    else:
      self.motorState = movement_msgs.msg.JointStateMsg()
      self.motorPID = movement_msgs.msg.MotorPIDMsg()
      self.ids = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.motorState.header.seq, _x.motorState.header.stamp.secs, _x.motorState.header.stamp.nsecs))
      _x = self.motorState.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.motorState.pos)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.motorState.pos))
      length = len(self.motorState.vel)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.motorState.vel))
      length = len(self.motorState.acc)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.motorState.acc))
      length = len(self.motorState.torq)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.motorState.torq))
      _x = self.motorState.writeCommand
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.motorState.kind
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.motorState.readCommand
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2id().pack(_x.motorState.type, _x.motorState.source, _x.motorState.dt))
      length = len(self.motorPID.kp)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.motorPID.kp))
      length = len(self.motorPID.ki)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.motorPID.ki))
      length = len(self.motorPID.kd)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.motorPID.kd))
      length = len(self.ids)
      buff.write(_struct_I.pack(length))
      pattern = '<%sh'%length
      buff.write(struct.Struct(pattern).pack(*self.ids))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.motorState is None:
        self.motorState = movement_msgs.msg.JointStateMsg()
      if self.motorPID is None:
        self.motorPID = movement_msgs.msg.MotorPIDMsg()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.motorState.header.seq, _x.motorState.header.stamp.secs, _x.motorState.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.motorState.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.motorState.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.motorState.pos = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.motorState.vel = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.motorState.acc = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.motorState.torq = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.motorState.writeCommand = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.motorState.writeCommand = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.motorState.kind = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.motorState.kind = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.motorState.readCommand = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.motorState.readCommand = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.motorState.type, _x.motorState.source, _x.motorState.dt,) = _get_struct_2id().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.motorPID.kp = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.motorPID.ki = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.motorPID.kd = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sh'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.ids = s.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.motorState.header.seq, _x.motorState.header.stamp.secs, _x.motorState.header.stamp.nsecs))
      _x = self.motorState.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.motorState.pos)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.motorState.pos.tostring())
      length = len(self.motorState.vel)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.motorState.vel.tostring())
      length = len(self.motorState.acc)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.motorState.acc.tostring())
      length = len(self.motorState.torq)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.motorState.torq.tostring())
      _x = self.motorState.writeCommand
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.motorState.kind
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.motorState.readCommand
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2id().pack(_x.motorState.type, _x.motorState.source, _x.motorState.dt))
      length = len(self.motorPID.kp)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.motorPID.kp.tostring())
      length = len(self.motorPID.ki)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.motorPID.ki.tostring())
      length = len(self.motorPID.kd)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.motorPID.kd.tostring())
      length = len(self.ids)
      buff.write(_struct_I.pack(length))
      pattern = '<%sh'%length
      buff.write(self.ids.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.motorState is None:
        self.motorState = movement_msgs.msg.JointStateMsg()
      if self.motorPID is None:
        self.motorPID = movement_msgs.msg.MotorPIDMsg()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.motorState.header.seq, _x.motorState.header.stamp.secs, _x.motorState.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.motorState.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.motorState.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.motorState.pos = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.motorState.vel = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.motorState.acc = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.motorState.torq = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.motorState.writeCommand = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.motorState.writeCommand = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.motorState.kind = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.motorState.kind = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.motorState.readCommand = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.motorState.readCommand = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.motorState.type, _x.motorState.source, _x.motorState.dt,) = _get_struct_2id().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.motorPID.kp = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.motorPID.ki = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.motorPID.kd = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sh'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.ids = numpy.frombuffer(str[start:end], dtype=numpy.int16, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2id = None
def _get_struct_2id():
    global _struct_2id
    if _struct_2id is None:
        _struct_2id = struct.Struct("<2id")
    return _struct_2id
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
class InterfaceSrv(object):
  _type          = 'movement_msgs/InterfaceSrv'
  _md5sum = 'df2744d447a21ef2bc8fc6392375798f'
  _request_class  = InterfaceSrvRequest
  _response_class = InterfaceSrvResponse
