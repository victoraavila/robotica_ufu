# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from movement_msgs/LipParamsSrvRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class LipParamsSrvRequest(genpy.Message):
  _md5sum = "db1c6188bb6ce370d900612c9849416e"
  _type = "movement_msgs/LipParamsSrvRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool    get_params
float64 zCCorr
float64 tS
float64 tD
float64 stepH

"""
  __slots__ = ['get_params','zCCorr','tS','tD','stepH']
  _slot_types = ['bool','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       get_params,zCCorr,tS,tD,stepH

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LipParamsSrvRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.get_params is None:
        self.get_params = False
      if self.zCCorr is None:
        self.zCCorr = 0.
      if self.tS is None:
        self.tS = 0.
      if self.tD is None:
        self.tD = 0.
      if self.stepH is None:
        self.stepH = 0.
    else:
      self.get_params = False
      self.zCCorr = 0.
      self.tS = 0.
      self.tD = 0.
      self.stepH = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_B4d().pack(_x.get_params, _x.zCCorr, _x.tS, _x.tD, _x.stepH))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 33
      (_x.get_params, _x.zCCorr, _x.tS, _x.tD, _x.stepH,) = _get_struct_B4d().unpack(str[start:end])
      self.get_params = bool(self.get_params)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_B4d().pack(_x.get_params, _x.zCCorr, _x.tS, _x.tD, _x.stepH))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 33
      (_x.get_params, _x.zCCorr, _x.tS, _x.tD, _x.stepH,) = _get_struct_B4d().unpack(str[start:end])
      self.get_params = bool(self.get_params)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B4d = None
def _get_struct_B4d():
    global _struct_B4d
    if _struct_B4d is None:
        _struct_B4d = struct.Struct("<B4d")
    return _struct_B4d
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from movement_msgs/LipParamsSrvResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class LipParamsSrvResponse(genpy.Message):
  _md5sum = "704116e5d95bcbd9451422b942e968c5"
  _type = "movement_msgs/LipParamsSrvResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """
float64 zCCorr
float64 tS
float64 tD
float64 stepH
float64 delayR
float64 delayL
float64 delayAll
float64 vx
float64 vy
float64 vz




"""
  __slots__ = ['zCCorr','tS','tD','stepH','delayR','delayL','delayAll','vx','vy','vz']
  _slot_types = ['float64','float64','float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       zCCorr,tS,tD,stepH,delayR,delayL,delayAll,vx,vy,vz

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LipParamsSrvResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.zCCorr is None:
        self.zCCorr = 0.
      if self.tS is None:
        self.tS = 0.
      if self.tD is None:
        self.tD = 0.
      if self.stepH is None:
        self.stepH = 0.
      if self.delayR is None:
        self.delayR = 0.
      if self.delayL is None:
        self.delayL = 0.
      if self.delayAll is None:
        self.delayAll = 0.
      if self.vx is None:
        self.vx = 0.
      if self.vy is None:
        self.vy = 0.
      if self.vz is None:
        self.vz = 0.
    else:
      self.zCCorr = 0.
      self.tS = 0.
      self.tD = 0.
      self.stepH = 0.
      self.delayR = 0.
      self.delayL = 0.
      self.delayAll = 0.
      self.vx = 0.
      self.vy = 0.
      self.vz = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_10d().pack(_x.zCCorr, _x.tS, _x.tD, _x.stepH, _x.delayR, _x.delayL, _x.delayAll, _x.vx, _x.vy, _x.vz))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 80
      (_x.zCCorr, _x.tS, _x.tD, _x.stepH, _x.delayR, _x.delayL, _x.delayAll, _x.vx, _x.vy, _x.vz,) = _get_struct_10d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_10d().pack(_x.zCCorr, _x.tS, _x.tD, _x.stepH, _x.delayR, _x.delayL, _x.delayAll, _x.vx, _x.vy, _x.vz))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 80
      (_x.zCCorr, _x.tS, _x.tD, _x.stepH, _x.delayR, _x.delayL, _x.delayAll, _x.vx, _x.vy, _x.vz,) = _get_struct_10d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_10d = None
def _get_struct_10d():
    global _struct_10d
    if _struct_10d is None:
        _struct_10d = struct.Struct("<10d")
    return _struct_10d
class LipParamsSrv(object):
  _type          = 'movement_msgs/LipParamsSrv'
  _md5sum = 'f49d9d3d13a09f7a44ea1b8e3860a944'
  _request_class  = LipParamsSrvRequest
  _response_class = LipParamsSrvResponse
