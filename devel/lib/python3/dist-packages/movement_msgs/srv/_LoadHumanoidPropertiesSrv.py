# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from movement_msgs/LoadHumanoidPropertiesSrvRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import movement_msgs.msg
import std_msgs.msg

class LoadHumanoidPropertiesSrvRequest(genpy.Message):
  _md5sum = "1843db99d8df7f28f948fe93eedb228a"
  _type = "movement_msgs/LoadHumanoidPropertiesSrvRequest"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header                       header
movement_msgs/JointStateMsg  joint
movement_msgs/EndEffStateMsg endEff
geometry_msgs/Point          ikRef

bool                         calcZMP
bool                         calcCOM
bool                         calcInvDyn
bool                         setIkRef
bool                         setComAsIkRef


================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: movement_msgs/JointStateMsg
Header    header
float64[] pos
float64[] vel
float64[] acc
float64[] torq
string  writeCommand
string        kind
string        readCommand
int32         type
int32         source
float64       dt


================================================================================
MSG: movement_msgs/EndEffStateMsg
Header                     header
movement_msgs/EndEffMsg[]  endEff

================================================================================
MSG: movement_msgs/EndEffMsg
geometry_msgs/Point  pos
geometry_msgs/Point  vel
geometry_msgs/Point  acc
geometry_msgs/Point  rot
int32                type
int32                flag
float64              dt

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z
"""
  __slots__ = ['header','joint','endEff','ikRef','calcZMP','calcCOM','calcInvDyn','setIkRef','setComAsIkRef']
  _slot_types = ['std_msgs/Header','movement_msgs/JointStateMsg','movement_msgs/EndEffStateMsg','geometry_msgs/Point','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,joint,endEff,ikRef,calcZMP,calcCOM,calcInvDyn,setIkRef,setComAsIkRef

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LoadHumanoidPropertiesSrvRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.joint is None:
        self.joint = movement_msgs.msg.JointStateMsg()
      if self.endEff is None:
        self.endEff = movement_msgs.msg.EndEffStateMsg()
      if self.ikRef is None:
        self.ikRef = geometry_msgs.msg.Point()
      if self.calcZMP is None:
        self.calcZMP = False
      if self.calcCOM is None:
        self.calcCOM = False
      if self.calcInvDyn is None:
        self.calcInvDyn = False
      if self.setIkRef is None:
        self.setIkRef = False
      if self.setComAsIkRef is None:
        self.setComAsIkRef = False
    else:
      self.header = std_msgs.msg.Header()
      self.joint = movement_msgs.msg.JointStateMsg()
      self.endEff = movement_msgs.msg.EndEffStateMsg()
      self.ikRef = geometry_msgs.msg.Point()
      self.calcZMP = False
      self.calcCOM = False
      self.calcInvDyn = False
      self.setIkRef = False
      self.setComAsIkRef = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.joint.header.seq, _x.joint.header.stamp.secs, _x.joint.header.stamp.nsecs))
      _x = self.joint.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.joint.pos)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.joint.pos))
      length = len(self.joint.vel)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.joint.vel))
      length = len(self.joint.acc)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.joint.acc))
      length = len(self.joint.torq)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.joint.torq))
      _x = self.joint.writeCommand
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.joint.kind
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.joint.readCommand
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2id3I().pack(_x.joint.type, _x.joint.source, _x.joint.dt, _x.endEff.header.seq, _x.endEff.header.stamp.secs, _x.endEff.header.stamp.nsecs))
      _x = self.endEff.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.endEff.endEff)
      buff.write(_struct_I.pack(length))
      for val1 in self.endEff.endEff:
        _v1 = val1.pos
        _x = _v1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v2 = val1.vel
        _x = _v2
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v3 = val1.acc
        _x = _v3
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v4 = val1.rot
        _x = _v4
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_get_struct_2id().pack(_x.type, _x.flag, _x.dt))
      _x = self
      buff.write(_get_struct_3d5B().pack(_x.ikRef.x, _x.ikRef.y, _x.ikRef.z, _x.calcZMP, _x.calcCOM, _x.calcInvDyn, _x.setIkRef, _x.setComAsIkRef))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.joint is None:
        self.joint = movement_msgs.msg.JointStateMsg()
      if self.endEff is None:
        self.endEff = movement_msgs.msg.EndEffStateMsg()
      if self.ikRef is None:
        self.ikRef = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.joint.header.seq, _x.joint.header.stamp.secs, _x.joint.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.joint.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.joint.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.joint.pos = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.joint.vel = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.joint.acc = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.joint.torq = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.joint.writeCommand = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.joint.writeCommand = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.joint.kind = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.joint.kind = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.joint.readCommand = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.joint.readCommand = str[start:end]
      _x = self
      start = end
      end += 28
      (_x.joint.type, _x.joint.source, _x.joint.dt, _x.endEff.header.seq, _x.endEff.header.stamp.secs, _x.endEff.header.stamp.nsecs,) = _get_struct_2id3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.endEff.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.endEff.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.endEff.endEff = []
      for i in range(0, length):
        val1 = movement_msgs.msg.EndEffMsg()
        _v5 = val1.pos
        _x = _v5
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v6 = val1.vel
        _x = _v6
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v7 = val1.acc
        _x = _v7
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v8 = val1.rot
        _x = _v8
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _x = val1
        start = end
        end += 16
        (_x.type, _x.flag, _x.dt,) = _get_struct_2id().unpack(str[start:end])
        self.endEff.endEff.append(val1)
      _x = self
      start = end
      end += 29
      (_x.ikRef.x, _x.ikRef.y, _x.ikRef.z, _x.calcZMP, _x.calcCOM, _x.calcInvDyn, _x.setIkRef, _x.setComAsIkRef,) = _get_struct_3d5B().unpack(str[start:end])
      self.calcZMP = bool(self.calcZMP)
      self.calcCOM = bool(self.calcCOM)
      self.calcInvDyn = bool(self.calcInvDyn)
      self.setIkRef = bool(self.setIkRef)
      self.setComAsIkRef = bool(self.setComAsIkRef)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.joint.header.seq, _x.joint.header.stamp.secs, _x.joint.header.stamp.nsecs))
      _x = self.joint.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.joint.pos)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.joint.pos.tostring())
      length = len(self.joint.vel)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.joint.vel.tostring())
      length = len(self.joint.acc)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.joint.acc.tostring())
      length = len(self.joint.torq)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.joint.torq.tostring())
      _x = self.joint.writeCommand
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.joint.kind
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.joint.readCommand
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2id3I().pack(_x.joint.type, _x.joint.source, _x.joint.dt, _x.endEff.header.seq, _x.endEff.header.stamp.secs, _x.endEff.header.stamp.nsecs))
      _x = self.endEff.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.endEff.endEff)
      buff.write(_struct_I.pack(length))
      for val1 in self.endEff.endEff:
        _v9 = val1.pos
        _x = _v9
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v10 = val1.vel
        _x = _v10
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v11 = val1.acc
        _x = _v11
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v12 = val1.rot
        _x = _v12
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_get_struct_2id().pack(_x.type, _x.flag, _x.dt))
      _x = self
      buff.write(_get_struct_3d5B().pack(_x.ikRef.x, _x.ikRef.y, _x.ikRef.z, _x.calcZMP, _x.calcCOM, _x.calcInvDyn, _x.setIkRef, _x.setComAsIkRef))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.joint is None:
        self.joint = movement_msgs.msg.JointStateMsg()
      if self.endEff is None:
        self.endEff = movement_msgs.msg.EndEffStateMsg()
      if self.ikRef is None:
        self.ikRef = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.joint.header.seq, _x.joint.header.stamp.secs, _x.joint.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.joint.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.joint.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.joint.pos = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.joint.vel = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.joint.acc = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.joint.torq = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.joint.writeCommand = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.joint.writeCommand = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.joint.kind = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.joint.kind = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.joint.readCommand = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.joint.readCommand = str[start:end]
      _x = self
      start = end
      end += 28
      (_x.joint.type, _x.joint.source, _x.joint.dt, _x.endEff.header.seq, _x.endEff.header.stamp.secs, _x.endEff.header.stamp.nsecs,) = _get_struct_2id3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.endEff.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.endEff.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.endEff.endEff = []
      for i in range(0, length):
        val1 = movement_msgs.msg.EndEffMsg()
        _v13 = val1.pos
        _x = _v13
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v14 = val1.vel
        _x = _v14
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v15 = val1.acc
        _x = _v15
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v16 = val1.rot
        _x = _v16
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _x = val1
        start = end
        end += 16
        (_x.type, _x.flag, _x.dt,) = _get_struct_2id().unpack(str[start:end])
        self.endEff.endEff.append(val1)
      _x = self
      start = end
      end += 29
      (_x.ikRef.x, _x.ikRef.y, _x.ikRef.z, _x.calcZMP, _x.calcCOM, _x.calcInvDyn, _x.setIkRef, _x.setComAsIkRef,) = _get_struct_3d5B().unpack(str[start:end])
      self.calcZMP = bool(self.calcZMP)
      self.calcCOM = bool(self.calcCOM)
      self.calcInvDyn = bool(self.calcInvDyn)
      self.setIkRef = bool(self.setIkRef)
      self.setComAsIkRef = bool(self.setComAsIkRef)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2id = None
def _get_struct_2id():
    global _struct_2id
    if _struct_2id is None:
        _struct_2id = struct.Struct("<2id")
    return _struct_2id
_struct_2id3I = None
def _get_struct_2id3I():
    global _struct_2id3I
    if _struct_2id3I is None:
        _struct_2id3I = struct.Struct("<2id3I")
    return _struct_2id3I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_3d5B = None
def _get_struct_3d5B():
    global _struct_3d5B
    if _struct_3d5B is None:
        _struct_3d5B = struct.Struct("<3d5B")
    return _struct_3d5B
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from movement_msgs/LoadHumanoidPropertiesSrvResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class LoadHumanoidPropertiesSrvResponse(genpy.Message):
  _md5sum = "a7a33232467fc746c475c5575da5109a"
  _type = "movement_msgs/LoadHumanoidPropertiesSrvResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """
geometry_msgs/Point  zmpPoint
geometry_msgs/Point  comPoint
geometry_msgs/Point  footComPoint
float64[]            torq




================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z
"""
  __slots__ = ['zmpPoint','comPoint','footComPoint','torq']
  _slot_types = ['geometry_msgs/Point','geometry_msgs/Point','geometry_msgs/Point','float64[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       zmpPoint,comPoint,footComPoint,torq

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LoadHumanoidPropertiesSrvResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.zmpPoint is None:
        self.zmpPoint = geometry_msgs.msg.Point()
      if self.comPoint is None:
        self.comPoint = geometry_msgs.msg.Point()
      if self.footComPoint is None:
        self.footComPoint = geometry_msgs.msg.Point()
      if self.torq is None:
        self.torq = []
    else:
      self.zmpPoint = geometry_msgs.msg.Point()
      self.comPoint = geometry_msgs.msg.Point()
      self.footComPoint = geometry_msgs.msg.Point()
      self.torq = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_9d().pack(_x.zmpPoint.x, _x.zmpPoint.y, _x.zmpPoint.z, _x.comPoint.x, _x.comPoint.y, _x.comPoint.z, _x.footComPoint.x, _x.footComPoint.y, _x.footComPoint.z))
      length = len(self.torq)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.torq))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.zmpPoint is None:
        self.zmpPoint = geometry_msgs.msg.Point()
      if self.comPoint is None:
        self.comPoint = geometry_msgs.msg.Point()
      if self.footComPoint is None:
        self.footComPoint = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 72
      (_x.zmpPoint.x, _x.zmpPoint.y, _x.zmpPoint.z, _x.comPoint.x, _x.comPoint.y, _x.comPoint.z, _x.footComPoint.x, _x.footComPoint.y, _x.footComPoint.z,) = _get_struct_9d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.torq = s.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_9d().pack(_x.zmpPoint.x, _x.zmpPoint.y, _x.zmpPoint.z, _x.comPoint.x, _x.comPoint.y, _x.comPoint.z, _x.footComPoint.x, _x.footComPoint.y, _x.footComPoint.z))
      length = len(self.torq)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.torq.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.zmpPoint is None:
        self.zmpPoint = geometry_msgs.msg.Point()
      if self.comPoint is None:
        self.comPoint = geometry_msgs.msg.Point()
      if self.footComPoint is None:
        self.footComPoint = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 72
      (_x.zmpPoint.x, _x.zmpPoint.y, _x.zmpPoint.z, _x.comPoint.x, _x.comPoint.y, _x.comPoint.z, _x.footComPoint.x, _x.footComPoint.y, _x.footComPoint.z,) = _get_struct_9d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.torq = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_9d = None
def _get_struct_9d():
    global _struct_9d
    if _struct_9d is None:
        _struct_9d = struct.Struct("<9d")
    return _struct_9d
class LoadHumanoidPropertiesSrv(object):
  _type          = 'movement_msgs/LoadHumanoidPropertiesSrv'
  _md5sum = '3e2b196ffde962aa21d86738ea07bc83'
  _request_class  = LoadHumanoidPropertiesSrvRequest
  _response_class = LoadHumanoidPropertiesSrvResponse
